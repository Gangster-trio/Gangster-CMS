-- MySQL dump 10.13  Distrib 5.7.21, for Linux (x86_64)
--
-- Host: db_server    Database: db_cms
-- ------------------------------------------------------
-- Server version	5.6.37

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `db_cms`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `db_cms` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `db_cms`;

--
-- Table structure for table `cms_article`
--

DROP TABLE IF EXISTS `cms_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_article` (
  `article_id` int(20) NOT NULL AUTO_INCREMENT,
  `article_title` varchar(255) DEFAULT NULL,
  `article_type` varchar(255) DEFAULT NULL,
  `article_author` varchar(255) DEFAULT NULL,
  `article_url` varchar(255) DEFAULT NULL,
  `article_order` int(11) DEFAULT NULL,
  `article_site_id` int(11) DEFAULT NULL,
  `article_category_id` int(11) DEFAULT NULL,
  `article_create_time` datetime DEFAULT NULL,
  `article_update_time` datetime DEFAULT NULL,
  `article_thumb` varchar(255) DEFAULT NULL,
  `article_hit` int(11) DEFAULT '0',
  `article_desc` varchar(255) DEFAULT NULL,
  `article_status` int(11) DEFAULT NULL,
  `article_content` longtext,
  `article_skin` varchar(255) DEFAULT NULL,
  `article_in_homepage` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`article_id`),
  KEY `cms_article_cms_category_category_id_fk` (`article_category_id`),
  KEY `cms_article_cms_site_site_id_fk` (`article_site_id`),
  CONSTRAINT `cms_article_cms_category_category_id_fk` FOREIGN KEY (`article_category_id`) REFERENCES `cms_category` (`category_id`),
  CONSTRAINT `cms_article_cms_site_site_id_fk` FOREIGN KEY (`article_site_id`) REFERENCES `cms_site` (`site_id`)
) ENGINE=InnoDB AUTO_INCREMENT=173 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_article`
--

LOCK TABLES `cms_article` WRITE;
/*!40000 ALTER TABLE `cms_article` DISABLE KEYS */;
INSERT INTO `cms_article` VALUES (163,'Java 简介','普通文章','bigmeng',NULL,1,1,28,'2018-02-08 01:42:49',NULL,NULL,2,'Java 的前世今生',NULL,'<p>Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。</p><p>Java分为三个体系：</p><ul><li>JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li></ul><p>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名以取消其中的数字\"2\"：J2EE更名为Java EE, J2SE更名为Java SE，J2ME更名为Java ME。</p><hr><h2>主要特性</h2><ul><li><strong>Java语言是简单的：</strong><p>Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p></li><li><strong>Java语言是面向对象的：</strong><p>Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</p></li><li><strong>Java语言是分布式的：</strong><p>Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p></li><li><strong>Java语言是健壮的：</strong><p>Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。</p></li><li><strong>Java语言是安全的：</strong><p>Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。</p></li><li><strong>Java语言是体系结构中立的：</strong><p>Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。</p></li><li><strong>Java语言是可移植的：</strong><p>这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。</p></li><li><strong>Java语言是解释型的：</strong><p>如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p></li><li><strong>Java是高性能的：</strong><p>与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。</p></li><li><strong>Java语言是多线程的：</strong><p>在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。</p></li><li><strong>Java语言是动态的：</strong><p>Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p></li></ul><hr><h2>发展历史</h2><ul><li>1995年5月23日，Java语言诞生</li><li>1996年1月，第一个JDK-JDK1.0诞生</li><li>1996年4月，10个最主要的操作系统供应商申明将在其产品中嵌入JAVA技术</li><li>1996年9月，约8.3万个网页应用了JAVA技术来制作</li><li>1997年2月18日，JDK1.1发布</li><li>1997年4月2日，JavaOne会议召开，参与者逾一万人，创当时全球同类会议规模之纪录</li><li>1997年9月，JavaDeveloperConnection社区成员超过十万</li><li>1998年2月，JDK1.1被下载超过2,000,000次</li><li>1998年12月8日，JAVA2企业平台J2EE发布</li><li>1999年6月，SUN公司发布Java的三个版本：标准版（JavaSE,以前是J2SE）、企业版（JavaEE以前是J2EE）和微型版（JavaME，以前是J2ME）</li><li>2000年5月8日，JDK1.3发布</li><li>2000年5月29日，JDK1.4发布</li><li>2001年6月5日，NOKIA宣布，到2003年将出售1亿部支持Java的手机</li><li>2001年9月24日，J2EE1.3发布</li><li>2002年2月26日，J2SE1.4发布，自此Java的计算能力有了大幅提升</li><li>2004年9月30日18:00PM，J2SE1.5发布，成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0</li><li>2005年6月，JavaOne大会召开，SUN公司公开Java SE 6。此时，Java的各种版本已经更名，以取消其中的数字\"2\"：J2EE更名为Java EE，J2SE更名为Java SE，J2ME更名为Java ME</li><li>2006年12月，SUN公司发布JRE6.0</li><li>2009年04月20日，甲骨文74亿美元收购Sun。取得java的版权。</li><li>2010年11月，由于甲骨文对于Java社区的不友善，因此Apache扬言将退出JCP[4]。</li><li>2011年7月28日，甲骨文发布java7.0的正式版。</li><li>2014年3月18日，Oracle公司发表Java SE 8。</li></ul><hr><h2>Java开发工具</h2><p>Java语言尽量保证系统内存在1G以上，其他工具如下所示：</p><ul><li>Linux 系统、Mac OS 系统、Windows 95/98/2000/XP，WIN 7/8系统。</li><li><a href=\"http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html\" target=\"_blank\">Java JDK 7、8……</a></li><li><a href=\"https://notepad-plus-plus.org/\" target=\"_blank\">Notepad</a>&nbsp;编辑器或者其他编辑器。</li><li>IDE：<a href=\"http://www.eclipse.org/downloads/\" target=\"_blank\">Eclipse</a></li></ul><p>安装好以上的工具后，我们就可以输出Java的第一个程序\"Hello World！\"</p><div class=\"example\"><div class=\"example_code\"><div class=\"hl-main\"><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-reserved\">class</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">HelloWorld</span><span class=\"hl-code\"> </span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\r\n    </span><span class=\"hl-reserved\">public</span><span class=\"hl-code\"> </span><span class=\"hl-types\">static</span><span class=\"hl-code\"> </span><span class=\"hl-types\">void</span><span class=\"hl-code\"> </span><span class=\"hl-identifier\">main</span><span class=\"hl-brackets\">(</span><span class=\"hl-identifier\">String</span><span class=\"hl-code\"> </span><span class=\"hl-brackets\">[</span><span class=\"hl-brackets\">]</span><span class=\"hl-identifier\">args</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\"> </span><span class=\"hl-brackets\">{</span><span class=\"hl-code\">\r\n        </span><span class=\"hl-identifier\">System</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">out</span><span class=\"hl-code\">.</span><span class=\"hl-identifier\">println</span><span class=\"hl-brackets\">(</span><span class=\"hl-quotes\">\"</span><span class=\"hl-string\">Hello World</span><span class=\"hl-quotes\">\"</span><span class=\"hl-brackets\">)</span><span class=\"hl-code\">;\r\n    </span><span class=\"hl-brackets\">}</span><span class=\"hl-code\">\r\n</span><span class=\"hl-brackets\">}</span></div></div></div>','default',0),(164,'Java 线程简介','主页文章','bigmeng',NULL,1,1,28,'2018-02-08 01:51:14',NULL,NULL,2,'本教程研究了线程的基础知识 ― 线程是什么、线程为什么有用以及怎么开始编写使用线程的简单程序。\r\n\r\n我们还将研究更复杂的、使用线程的应用程序的基本构件 ― 如何在线程之间交换数据、如何控制线程以及线程如何互相通信。',NULL,'<h2 id=\"N100E6\" class=\"ibm-h2\">线程基础</h2><h3 id=\"N1005E\" class=\"ibm-h3\">什么是线程？</h3><p>几乎每种操作系统都支持进程的概念 ―― 进程就是在某种程度上相互隔离的、独立运行的程序。</p><p>线程化是允许多个活动共存于一个进程中的工具。大多数现代的操作系统都支持线程，而且线程的概念以各种形式已存在了好多年。Java 是第一个在语言本身中显式地包含线程的主流编程语言，它没有把线程化看作是底层操作系统的工具。</p><p>有时候，线程也称作<em>轻量级进程</em>。就象进程一样，线程在程序中是独立的、并发的执行路径，每个线程有它自己的堆栈、自己的程序计数器和自己的局部变量。但是，与分隔的进程相比，进程中的线程之间的隔离程度要小。它们共享内存、文件句柄和其它每个进程应有的状态。</p><p>进程可以支持多个线程，它们看似同时执行，但互相之间并不同步。一个进程中的多个线程共享相同的内存地址空间，这就意味着它们可以访问相同的变量和对象，而且它们从同一堆中分配对象。尽管这让线程之间共享信息变得更容易，但您必须小心，确保它们不会妨碍同一进程里的其它线程。</p><p>Java 线程工具和 API 看似简单。但是，编写有效使用线程的复杂程序并不十分容易。因为有多个线程共存在相同的内存空间中并共享相同的变量，所以您必须小心，确保您的线程不会互相干扰。</p><h3 id=\"N1006F\" class=\"ibm-h3\">每个 Java 程序都使用线程</h3><p>每个 Java 程序都至少有一个线程 ― 主线程。当一个 Java 程序启动时，JVM 会创建主线程，并在该线程中调用程序的&nbsp;<code>main()</code>方法。</p><p>JVM 还创建了其它线程，您通常都看不到它们 ― 例如，与垃圾收集、对象终止和其它 JVM 内务处理任务相关的线程。其它工具也创建线程，如 AWT（抽象窗口工具箱（Abstract Windowing Toolkit））或 Swing UI 工具箱、servlet 容器、应用程序服务器和 RMI（远程方法调用（Remote Method Invocation））。</p><h3 id=\"N1007A\" class=\"ibm-h3\">为什么使用线程？</h3><p>在 Java 程序中使用线程有许多原因。如果您使用 Swing、servlet、RMI 或 Enterprise JavaBeans（EJB）技术，您也许没有意识到您已经在使用线程了。</p><p>使用线程的一些原因是它们可以帮助：</p><ul class=\"ibm-bullet-list\"><li>使 UI 响应更快</li><li>利用多处理器系统</li><li>简化建模</li><li>执行异步或后台处理</li></ul><h3 id=\"N1008B\" class=\"ibm-h3\">响应更快的 UI</h3><p>事件驱动的 UI 工具箱（如 AWT 和 Swing）有一个事件线程，它处理 UI 事件，如击键或鼠标点击。</p><p>AWT 和 Swing 程序把事件侦听器与 UI 对象连接。当特定事件（如单击了某个按钮）发生时，这些侦听器会得到通知。事件侦听器是在 AWT 事件线程中调用的。</p><p>如果事件侦听器要执行持续很久的任务，如检查一个大文档中的拼写，事件线程将忙于运行拼写检查器，所以在完成事件侦听器之前，就不能处理额外的 UI 事件。这就会使程序看来似乎停滞了，让用户不知所措。</p><p>要避免使 UI 延迟响应，事件侦听器应该把较长的任务放到另一个线程中，这样 AWT 线程在任务的执行过程中就可以继续处理 UI 事件（包括取消正在执行的长时间运行任务的请求）。</p><h3 id=\"N10097\" class=\"ibm-h3\">利用多处理器系统</h3><p>多处理器（MP）系统比过去更普及了。以前只能在大型数据中心和科学计算设施中才能找到它们。现在许多低端服务器系统 ― 甚至是一些台式机系统 ― 都有多个处理器。</p><p>现代操作系统，包括 Linux、Solaris 和 Windows NT/2000，都可以利用多个处理器并调度线程在任何可用的处理器上执行。</p><p>调度的基本单位通常是线程；如果某个程序只有一个活动的线程，它一次只能在一个处理器上运行。如果某个程序有多个活动线程，那么可以同时调度多个线程。在精心设计的程序中，使用多个线程可以提高程序吞吐量和性能。</p><h3 id=\"N100A1\" class=\"ibm-h3\">简化建模</h3><p>在某些情况下，使用线程可以使程序编写和维护起来更简单。考虑一个仿真应用程序，您要在其中模拟多个实体之间的交互作用。给每个实体一个自己的线程可以使许多仿真和对应用程序的建模大大简化。</p><p>另一个适合使用单独线程来简化程序的示例是在一个应用程序有多个独立的事件驱动的组件的时候。例如，一个应用程序可能有这样一个组件，该组件在某个事件之后用秒数倒计时，并更新屏幕显示。与其让一个主循环定期检查时间并更新显示，不如让一个线程什么也不做，一直休眠，直到某一段时间后，更新屏幕上的计数器，这样更简单，而且不容易出错。这样，主线程就根本无需担心计时器。</p><h3 id=\"N100A9\" class=\"ibm-h3\">异步或后台处理</h3><p>服务器应用程序从远程来源（如套接字）获取输入。当读取套接字时，如果当前没有可用数据，那么对&nbsp;<code>SocketInputStream.read()</code>&nbsp;的调用将会阻塞，直到有可用数据为止。</p><p>如果单线程程序要读取套接字，而套接字另一端的实体并未发送任何数据，那么该程序只会永远等待，而不执行其它处理。相反，程序可以轮询套接字，查看是否有可用数据，但通常不会使用这种做法，因为会影响性能。</p><p>但是，如果您创建了一个线程来读取套接字，那么当这个线程等待套接字中的输入时，主线程就可以执行其它任务。您甚至可以创建多个线程，这样就可以同时读取多个套接字。这样，当有可用数据时，您会迅速得到通知（因为正在等待的线程被唤醒），而不必经常轮询以检查是否有可用数据。使用线程等待套接字的代码也比轮询更简单、更不易出错。</p><h3 id=\"N100B6\" class=\"ibm-h3\">简单，但有时有风险</h3><p>虽然 Java 线程工具非常易于使用，但当您创建多线程程序时，应该尽量避免一些风险。</p><p>当多个线程访问同一数据项（如静态字段、可全局访问对象的实例字段或共享集合）时，需要确保它们协调了对数据的访问，这样它们都可以看到数据的一致视图，而且相互不会干扰另一方的更改。为了实现这个目的，Java 语言提供了两个关键字：<code>synchronized</code>&nbsp;和&nbsp;<code>volatile</code>。我们将稍后在本教程中研究这些关键字的用途和意义。</p><p>当从多个线程中访问变量时，必须确保对该访问正确地进行了同步。对于简单变量，将变量声明成&nbsp;<code>volatile</code>&nbsp;也许就足够了，但在大多数情况下，需要使用同步。</p><p>如果您将要使用同步来保护对共享变量的访问，那么必须确保在程序中<em>所有</em>访问该变量的地方都使用同步。</p><h3 id=\"N100CE\" class=\"ibm-h3\">不要做过头</h3><p>虽然线程可以大大简化许多类型的应用程序，过度使用线程可能会危及程序的性能及其可维护性。线程消耗了资源。因此，在不降低性能的情况下，可以创建的线程的数量是有限制的。</p><p>尤其在单处理器系统中，使用多个线程<em>不</em>会使主要消耗 CPU 资源的程序运行得更快。</p><h3 id=\"N100D9\" class=\"ibm-h3\">示例：使用一个线程用于计时，并使用另一个线程完成工作</h3><p>以下示例使用两个线程，一个用于计时，一个用于执行实际工作。主线程使用非常简单的算法计算素数。</p><p>在它启动之前，它创建并启动一个计时器线程，这个线程会休眠十秒钟，然后设置一个主线程要检查的标志。十秒钟之后，主线程将停止。请注意，共享标志被声明成&nbsp;<code>volatile</code>。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_201275\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div><div class=\"line number37 index36 alt2\" style=\"text-align: right;\">37</div><div class=\"line number38 index37 alt1\" style=\"text-align: right;\">38</div><div class=\"line number39 index38 alt2\" style=\"text-align: right;\">39</div><div class=\"line number40 index39 alt1\" style=\"text-align: right;\">40</div><div class=\"line number41 index40 alt2\" style=\"text-align: right;\">41</div><div class=\"line number42 index41 alt1\" style=\"text-align: right;\">42</div><div class=\"line number43 index42 alt2\" style=\"text-align: right;\">43</div><div class=\"line number44 index43 alt1\" style=\"text-align: right;\">44</div><div class=\"line number45 index44 alt2\" style=\"text-align: right;\">45</div><div class=\"line number46 index45 alt1\" style=\"text-align: right;\">46</div><div class=\"line number47 index46 alt2\" style=\"text-align: right;\">47</div><div class=\"line number48 index47 alt1\" style=\"text-align: right;\">48</div><div class=\"line number49 index48 alt2\" style=\"text-align: right;\">49</div><div class=\"line number50 index49 alt1\" style=\"text-align: right;\">50</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">/**</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">* CalculatePrimes -- calculate as many primes as we can in ten seconds </code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">*/ </code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">public class CalculatePrimes extends Thread {</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final int MAX_PRIMES = 1000000;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final int TEN_SECONDS = 10000;</code></div><div class=\"line number9 index8 alt2\">&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public volatile boolean finished = false;</code></div><div class=\"line number11 index10 alt2\">&nbsp;</div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int[] primes = new int[MAX_PRIMES];</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int count = 0;</code></div><div class=\"line number15 index14 alt2\">&nbsp;</div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int i=2; count&lt;MAX_PRIMES; i++) {</code></div><div class=\"line number17 index16 alt2\">&nbsp;</div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Check to see if the timer has expired</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (finished) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">break;</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number22 index21 alt1\">&nbsp;</div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean prime = true;</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int j=0; j&lt;count; j++) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (i % primes[j] == 0) {</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">prime = false;</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">break;</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number30 index29 alt1\">&nbsp;</div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (prime) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">primes[count++] = i;</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"Found prime: \" + i);</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number37 index36 alt2\">&nbsp;</div><div class=\"line number38 index37 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number39 index38 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">CalculatePrimes calculator = new CalculatePrimes();</code></div><div class=\"line number40 index39 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculator.start();</code></div><div class=\"line number41 index40 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try {</code></div><div class=\"line number42 index41 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Thread.sleep(TEN_SECONDS);</code></div><div class=\"line number43 index42 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number44 index43 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">catch (InterruptedException e) {</code></div><div class=\"line number45 index44 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// fall through</code></div><div class=\"line number46 index45 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number47 index46 alt2\">&nbsp;</div><div class=\"line number48 index47 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculator.finished = true;</code></div><div class=\"line number49 index48 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number50 index49 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N100E8\" class=\"ibm-h3\">小结</h3><p>Java 语言包含了内置在语言中的功能强大的线程工具。您可以将线程工具用于：</p><ul class=\"ibm-bullet-list\"><li>增加 GUI 应用程序的响应速度</li><li>利用多处理器系统</li><li>当程序有多个独立实体时，简化程序逻辑</li><li>在不阻塞整个程序的情况下，执行阻塞 I/O</li></ul><p>当使用多个线程时，必须谨慎，遵循在线程之间共享数据的规则，我们将在<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#\">共享对数据的访问</a>&nbsp;中讨论这些规则。所有这些规则归结为一条基本原则：<span>不要忘了同步</span>。</p><h2 id=\"N10191\" class=\"ibm-h2\">线程的生命</h2><h3 id=\"N10104\" class=\"ibm-h3\">创建线程</h3><p>在 Java 程序中创建线程有几种方法。每个 Java 程序至少包含一个线程：主线程。其它线程都是通过&nbsp;<code>Thread</code>&nbsp;构造器或实例化继承类&nbsp;<code>Thread</code>&nbsp;的类来创建的。</p><p>Java 线程可以通过直接实例化&nbsp;<code>Thread</code>&nbsp;对象或实例化继承&nbsp;<code>Thread</code>&nbsp;的对象来创建其它线程。在<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#\">线程基础</a>&nbsp;中的示例（其中，我们在十秒钟之内计算尽量多的素数）中，我们通过实例化&nbsp;<code>CalculatePrimes</code>&nbsp;类型的对象（它继承了&nbsp;<code>Thread</code>），创建了一个线程。</p><p>当我们讨论 Java 程序中的线程时，也许会提到两个相关实体：完成工作的实际线程或代表线程的&nbsp;<code>Thread</code>&nbsp;对象。正在运行的线程通常是由操作系统创建的；<code>Thread</code>&nbsp;对象是由 Java VM 创建的，作为控制相关线程的一种方式。</p><h3 id=\"N1012A\" class=\"ibm-h3\">创建线程和启动线程并不相同</h3><p>在一个线程对新线程的&nbsp;<code>Thread</code>&nbsp;对象调用&nbsp;<code>start()</code>&nbsp;方法之前，这个新线程并没有真正开始执行。<code>Thread</code>&nbsp;对象在其线程真正启动之前就已经存在了，而且其线程退出之后仍然存在。这可以让您控制或获取关于已创建的线程的信息，即使线程还没有启动或已经完成了。</p><p>通常在构造器中通过&nbsp;<code>start()</code>&nbsp;启动线程并不是好主意。这样做，会把部分构造的对象暴露给新的线程。如果对象拥有一个线程，那么它应该提供一个启动该线程的&nbsp;<code>start()</code>&nbsp;或&nbsp;<code>init()</code>&nbsp;方法，而不是从构造器中启动它。（请参阅<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#artrelatedtopics\">参考资料</a>，获取提供此概念更详细说明的文章链接。）</p><h3 id=\"N10148\" class=\"ibm-h3\">结束线程</h3><p>线程会以以下三种方式之一结束：</p><ul class=\"ibm-bullet-list\"><li>线程到达其&nbsp;<code>run()</code>&nbsp;方法的末尾。</li><li>线程抛出一个未捕获到的&nbsp;<code>Exception</code>&nbsp;或&nbsp;<code>Error</code>。</li><li>另一个线程调用一个弃用的&nbsp;<code>stop()</code>&nbsp;方法。弃用是指这些方法仍然存在，但是您不应该在新代码中使用它们，并且应该尽量从现有代码中除去它们。</li></ul><p>当 Java 程序中的所有线程都完成时，程序就退出了。</p><h3 id=\"N10163\" class=\"ibm-h3\">加入线程</h3><p>Thread API 包含了等待另一个线程完成的方法：<code>join()</code>&nbsp;方法。当调用&nbsp;<code>Thread.join()</code>&nbsp;时，调用线程将阻塞，直到目标线程完成为止。</p><p><code>Thread.join()</code>&nbsp;通常由使用线程的程序使用，以将大问题划分成许多小问题，每个小问题分配一个线程。本章结尾处的示例创建了十个线程，启动它们，然后使用&nbsp;<code>Thread.join()</code>&nbsp;等待它们全部完成。</p><h3 id=\"N10176\" class=\"ibm-h3\">调度</h3><p>除了何时使用&nbsp;<code>Thread.join()</code>&nbsp;和&nbsp;<code>Object.wait()</code>&nbsp;外，线程调度和执行的计时是不确定的。如果两个线程同时运行，而且都不等待，您必须假设在任何两个指令之间，其它线程都可以运行并修改程序变量。如果线程要访问其它线程可以看见的变量，如从静态字段（全局变量）直接或间接引用的数据，则必须使用同步以确保数据一致性。</p><p>在以下的简单示例中，我们将创建并启动两个线程，每个线程都打印两行到&nbsp;<code>System.out</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_953600\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class TwoThreads {</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static class Thread1 extends Thread {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"A\");</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"B\");</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\">&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static class Thread2 extends Thread {</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"1\");</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"2\");</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number16 index15 alt1\">&nbsp;</div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new Thread1().start();</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new Thread2().start();</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>我们并不知道这些行按什么顺序执行，只知道“1”在“2”之前打印，以及“A”在“B”之前打印。输出可能是以下结果中的任何一种：</p><ul class=\"ibm-bullet-list\"><li>1 2 A B</li><li>1 A 2 B</li><li>1 A B 2</li><li>A 1 2 B</li><li>A 1 B 2</li><li>A B 1 2</li></ul><p>不仅不同机器之间的结果可能不同，而且在同一机器上多次运行同一程序也可能生成不同结果。永远不要假设一个线程会在另一个线程之前执行某些操作，除非您已经使用了同步以强制一个特定的执行顺序。</p><h3 id=\"N1019C\" class=\"ibm-h3\">休眠</h3><p>Thread API 包含了一个&nbsp;<code>sleep()</code>&nbsp;方法，它将使当前线程进入等待状态，直到过了一段指定时间，或者直到另一个线程对当前线程的&nbsp;<code>Thread</code>&nbsp;对象调用了&nbsp;<code>Thread.interrupt()</code>，从而中断了线程。当过了指定时间后，线程又将变成可运行的，并且回到调度程序的可运行线程队列中。</p><p>如果线程是由对&nbsp;<code>Thread.interrupt()</code>&nbsp;的调用而中断的，那么休眠的线程会抛出&nbsp;<code>InterruptedException</code>，这样线程就知道它是由中断唤醒的，就不必查看计时器是否过期。</p><p><code>Thread.yield()</code>&nbsp;方法就象&nbsp;<code>Thread.sleep()</code>&nbsp;一样，但它并不引起休眠，而只是暂停当前线程片刻，这样其它线程就可以运行了。在大多数实现中，当较高优先级的线程调用&nbsp;<code>Thread.yield()</code>&nbsp;时，较低优先级的线程就不会运行。</p><p><code>CalculatePrimes</code>&nbsp;示例使用了一个后台线程计算素数，然后休眠十秒钟。当计时器过期后，它就会设置一个标志，表示已经过了十秒。</p><h3 id=\"N101C1\" class=\"ibm-h3\">守护程序线程</h3><p>我们提到过当 Java 程序的所有线程都完成时，该程序就退出，但这并不完全正确。隐藏的系统线程，如垃圾收集线程和由 JVM 创建的其它线程会怎么样？我们没有办法停止这些线程。如果那些线程正在运行，那么 Java 程序怎么退出呢？</p><p>这些系统线程称作<em>守护程序</em>线程。Java 程序实际上是在它的所有非守护程序线程完成后退出的。</p><p>任何线程都可以变成守护程序线程。可以通过调用&nbsp;<code>Thread.setDaemon()</code>&nbsp;方法来指明某个线程是守护程序线程。您也许想要使用守护程序线程作为在程序中创建的后台线程，如计时器线程或其它延迟的事件线程，只有当其它非守护程序线程正在运行时，这些线程才有用。</p><h3 id=\"N101D1\" class=\"ibm-h3\">示例：用多个线程分解大任务</h3><p>在这个示例中，<code>TenThreads</code>&nbsp;显示了一个创建了十个线程的程序，每个线程都执行一部分工作。该程序等待所有线程全部完成，然后收集结果。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_486721\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div><div class=\"line number37 index36 alt2\" style=\"text-align: right;\">37</div><div class=\"line number38 index37 alt1\" style=\"text-align: right;\">38</div><div class=\"line number39 index38 alt2\" style=\"text-align: right;\">39</div><div class=\"line number40 index39 alt1\" style=\"text-align: right;\">40</div><div class=\"line number41 index40 alt2\" style=\"text-align: right;\">41</div><div class=\"line number42 index41 alt1\" style=\"text-align: right;\">42</div><div class=\"line number43 index42 alt2\" style=\"text-align: right;\">43</div><div class=\"line number44 index43 alt1\" style=\"text-align: right;\">44</div><div class=\"line number45 index44 alt2\" style=\"text-align: right;\">45</div><div class=\"line number46 index45 alt1\" style=\"text-align: right;\">46</div><div class=\"line number47 index46 alt2\" style=\"text-align: right;\">47</div><div class=\"line number48 index47 alt1\" style=\"text-align: right;\">48</div><div class=\"line number49 index48 alt2\" style=\"text-align: right;\">49</div><div class=\"line number50 index49 alt1\" style=\"text-align: right;\">50</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">/**</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">* Creates ten threads to search for the maximum value of a large matrix.</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">* Each thread searches one portion of the matrix.</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">*/</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">public class TenThreads {</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static class WorkerThread extends Thread {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int max = Integer.MIN_VALUE;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int[] ourArray;</code></div><div class=\"line number10 index9 alt1\">&nbsp;</div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public WorkerThread(int[] ourArray) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.ourArray = ourArray;</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number14 index13 alt1\">&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Find the maximum value in our particular piece of the array</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int i = 0; i &lt; ourArray.length; i++) </code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">max = Math.max(max, ourArray[i]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\">&nbsp;</div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int getMax() {</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return max;</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number25 index24 alt2\">&nbsp;</div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">WorkerThread[] threads = new WorkerThread[10];</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int[][] bigMatrix = getBigHairyMatrix();</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int max = Integer.MIN_VALUE;</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Give each thread a slice of the matrix to work with</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int i=0; i &lt; 10; i++) {</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">threads[i] = new WorkerThread(bigMatrix[i]);</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">threads[i].start();</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number36 index35 alt1\">&nbsp;</div><div class=\"line number37 index36 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Wait for each thread to finish</code></div><div class=\"line number38 index37 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try {</code></div><div class=\"line number39 index38 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int i=0; i &lt; 10; i++) {</code></div><div class=\"line number40 index39 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">threads[i].join();</code></div><div class=\"line number41 index40 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">max = Math.max(max, threads[i].getMax());</code></div><div class=\"line number42 index41 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number43 index42 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number44 index43 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">catch (InterruptedException e) {</code></div><div class=\"line number45 index44 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// fall through</code></div><div class=\"line number46 index45 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number47 index46 alt2\">&nbsp;</div><div class=\"line number48 index47 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"Maximum value was \" + max);</code></div><div class=\"line number49 index48 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number50 index49 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N101DE\" class=\"ibm-h3\">小结</h3><p>就象程序一样，线程有生命周期：它们启动、执行，然后完成。一个程序或进程也许包含多个线程，而这些线程看来互相单独地执行。</p><p>线程是通过实例化&nbsp;<code>Thread</code>&nbsp;对象或实例化继承&nbsp;<code>Thread</code>&nbsp;的对象来创建的，但在对新的&nbsp;<code>Thread</code>&nbsp;对象调用&nbsp;<code>start()</code>&nbsp;方法之前，这个线程并没有开始执行。当线程运行到其&nbsp;<code>run()</code>&nbsp;方法的末尾或抛出未经处理的异常时，它们就结束了。</p><p><code>sleep()</code>&nbsp;方法可以用于等待一段特定时间；而&nbsp;<code>join()</code>&nbsp;方法可能用于等到另一个线程完成。</p><h2 id=\"N102BA\" class=\"ibm-h2\">无处不在的线程</h2><h3 id=\"N10200\" class=\"ibm-h3\">谁创建线程？</h3><p>即使您从未显式地创建一个新线程，您仍可能会发现自己在使用线程。线程被从各种来源中引入到我们的程序中。</p><p>有许多工具可以为您创建线程，如果要使用这些工具，应该了解线程如何交互，以及如何防止线程互相干扰。</p><h3 id=\"N10208\" class=\"ibm-h3\">AWT 和 Swing</h3><p>任何使用 AWT 或 Swing 的程序都必须处理线程。AWT 工具箱创建单个线程，用于处理 UI 事件，任何由 AWT 事件调用的事件侦听器都在 AWT 事件线程中执行。</p><p>您不仅必须关心同步对事件侦听器和其它线程之间共享的数据项的访问，而且还必须找到一种方法，让由事件侦听器触发的长时间运行任务（如在大文档中检查拼写或在文件系统中搜索一个文件） 在后台线程中运行，这样当该任务运行时，UI 就不会停滞了（这可能还会阻止用户取消操作）。这样做的一个好的框架示例是&nbsp;<code>SwingWorker</code>&nbsp;类（请参阅<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#artrelatedtopics\">参考资料</a>）。</p><p>AWT 事件线程并不是守护程序线程；这就是通常使用&nbsp;<code>System.exit()</code>&nbsp;结束 AWT 和 Swing 应用程序的原因。</p><h3 id=\"N1021C\" class=\"ibm-h3\">使用 TimerTask</h3><p>JDK 1.3 中，<code>TimerTask</code>&nbsp;工具被引入到 Java 语言。这个便利的工具让您可以稍后在某个时间执行任务（例如，即从现在起十秒后运行一次任务），或者定期执行任务（即，每隔十秒运行任务）。</p><p>实现&nbsp;<code>Timer</code>&nbsp;类非常简单：它创建一个计时器线程，并且构建一个按执行时间排序的等待事件队列。</p><p><code>TimerTask</code>&nbsp;线程被标记成守护程序线程，这样它就不会阻止程序退出。</p><p>因为计时器事件是在计时器线程中执行，所以必须确保正确同步了针对计时器任务中使用的任何数据项的访问。</p><p>在&nbsp;<code>CalculatePrimes</code>&nbsp;示例中，并没有让主线程休眠，我们可以使用&nbsp;<code>TimerTask</code>，方法如下：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_866312\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Timer timer = new Timer();</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final CalculatePrimes calculator = new CalculatePrimes();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculator.start();</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">timer.schedule(</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new TimerTask() {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run()</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">{</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculator.finished = true;</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}, TEN_SECONDS);</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N1023C\" class=\"ibm-h3\">servlet 和 JavaServer Pages 技术</h3><p>servlet 容器创建多个线程，在这些线程中执行 servlet 请求。作为 servlet 编写者，您不知道（也不应该知道）您的请求会在什么线程中执行；如果同时有多个对相同 URL 的请求入站，那么同一个 servlet 可能会同时在多个线程中是活动的。</p><p>当编写 servlet 或 JavaServer Pages (JSP) 文件时，必须始终假设可以在多个线程中并发地执行同一个 servlet 或 JSP 文件。必须适当同步 servlet 或 JSP 文件访问的任何共享数据；这包括 servlet 对象本身的字段。</p><h3 id=\"N10244\" class=\"ibm-h3\">实现 RMI 对象</h3><p>RMI 工具可以让您调用对在其它 JVM 中运行的对象进行的操作。当调用远程方法时，RMI 编译器创建的 RMI 存根会打包方法参数，并通过网络将它们发送到远程系统，然后远程系统会将它们解包并调用远程方法。</p><p>假设您创建了一个 RMI 对象，并将它注册到 RMI 注册表或者 Java 命名和目录接口（Java Naming and Directory Interface (JNDI)）名称空间。当远程客户机调用其中的一个方法时，该方法会在什么线程中执行呢？</p><p>实现 RMI 对象的常用方法是继承&nbsp;<code>UnicastRemoteObject</code>。在构造&nbsp;<code>UnicastRemoteObject</code>&nbsp;时，会初始化用于分派远程方法调用的基础结构。这包括用于接收远程调用请求的套接字侦听器，和一个或多个执行远程请求的线程。</p><p>所以，当接收到执行 RMI 方法的请求时，这些方法将在 RMI 管理的线程中执行。</p><h3 id=\"N10256\" class=\"ibm-h3\">小结</h3><p>线程通过几种机制进入 Java 程序。除了用&nbsp;<code>Thread</code>&nbsp;构造器中显式创建线程之外，还可以用许多其它机制创建线程：</p><ul class=\"ibm-bullet-list\"><li>AWT 和 Swing</li><li>RMI</li><li><code>java.util.TimerTask</code>&nbsp;工具</li><li>servlet 和 JSP 技术</li></ul><h2 id=\"N10332\" class=\"ibm-h2\">共享对数据的访问</h2><h3 id=\"N1026E\" class=\"ibm-h3\">共享变量</h3><p>要使多个线程在一个程序中有用，它们必须有某种方法可以互相通信或共享它们的结果。</p><p>让线程共享其结果的最简单方法是使用共享变量。它们还应该使用同步来确保值从一个线程正确传播到另一个线程，以及防止当一个线程正在更新一些相关数据项时，另一个线程看到不一致的中间结果。</p><p><a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#\">线程基础</a>&nbsp;中计算素数的示例使用了一个共享布尔变量，用于表示指定的时间段已经过去了。这说明了在线程间共享数据最简单的形式是：轮询共享变量以查看另一个线程是否已经完成执行某项任务。</p><h3 id=\"N1027B\" class=\"ibm-h3\">存在于同一个内存空间中的所有线程</h3><p>正如前面讨论过的，线程与进程有许多共同点，不同的是线程与同一进程中的其它线程共享相同的进程上下文，包括内存。这非常便利，但也有重大责任。只要访问共享变量（静态或实例字段），线程就可以方便地互相交换数据，但线程还必须确保它们以受控的方式访问共享变量，以免它们互相干扰对方的更改。</p><p>任何线程可以访问所有其作用域内的变量，就象主线程可以访问该变量一样。素数示例使用了一个公用实例字段，叫做&nbsp;<code>finished</code>，用于表示已经过了指定的时间。当计时器过期时，一个线程会写这个字段；另一个线程会定期读取这个字段，以检查它是否应该停止。注：这个字段被声明成&nbsp;<code>volatile</code>，这对于这个程序的正确运行非常重要。在本章的后面，我们将看到原因。</p><h3 id=\"N10289\" class=\"ibm-h3\">受控访问的同步</h3><p>为了确保可以在线程之间以受控方式共享数据，Java 语言提供了两个关键字：<code>synchronized</code>&nbsp;和&nbsp;<code>volatile</code>。</p><p><code>Synchronized</code>&nbsp;有两个重要含义：它确保了一次只有一个线程可以执行代码的受保护部分（<em>互斥，mutual exclusion 或者说 mutex</em>），而且它确保了一个线程更改的数据对于其它线程是可见的（更改的可见性）。</p><p>如果没有同步，数据很容易就处于不一致状态。例如，如果一个线程正在更新两个相关值（比如，粒子的位置和速率），而另一个线程正在读取这两个值，有可能在第一个线程只写了一个值，还没有写另一个值的时候，调度第二个线程运行，这样它就会看到一个旧值和一个新值。同步让我们可以定义必须<em>原子地</em>运行的代码块，这样对于其他线程而言，它们要么都执行，要么都不执行。</p><p>同步的原子执行或互斥方面类似于其它操作环境中的<em>临界段</em>的概念。</p><h3 id=\"N102A6\" class=\"ibm-h3\">确保共享数据更改的可见性</h3><p>同步可以让我们确保线程看到一致的内存视图。</p><p>处理器可以使用高速缓存加速对内存的访问（或者编译器可以将值存储到寄存器中以便进行更快的访问）。在一些多处理器体系结构上，如果在一个处理器的高速缓存中修改了内存位置，没有必要让其它处理器看到这一修改，直到刷新了写入器的高速缓存<em>并且</em>使读取器的高速缓存无效。</p><p>这表示在这样的系统上，对于同一变量，在两个不同处理器上执行的两个线程可能会看到两个不同的值！这听起来很吓人，但它<em>却</em>很常见。它只是表示在访问其它线程使用或修改的数据时，必须遵循某些规则。</p><p><code>Volatile</code>&nbsp;比同步更简单，只适合于控制对基本变量（整数、布尔变量等）的单个实例的访问。当一个变量被声明成&nbsp;<code>volatile</code>，任何对该变量的写操作都会绕过高速缓存，直接写入主内存，而任何对该变量的读取也都绕过高速缓存，直接取自主内存。这表示所有线程在任何时候看到的&nbsp;<code>volatile</code>&nbsp;变量值都相同。</p><p>如果没有正确的同步，线程可能会看到旧的变量值，或者引起其它形式的数据损坏。</p><h3 id=\"N102C2\" class=\"ibm-h3\">用锁保护的原子代码块</h3><p><code>Volatile</code>&nbsp;对于确保每个线程看到最新的变量值非常有用，但有时我们需要保护比较大的代码片段，如涉及更新多个变量的片段。</p><p>同步使用<em>监控器（monitor）</em>或锁的概念，以协调对特定代码块的访问。</p><p>每个 Java 对象都有一个相关的锁。同一时间只能有一个线程持有 Java 锁。当线程进入&nbsp;<code>synchronized</code>&nbsp;代码块时，线程会阻塞并等待，直到锁可用，当它可用时，就会获得这个锁，然后执行代码块。当控制退出受保护的代码块时，即到达了代码块末尾或者抛出了没有在&nbsp;<code>synchronized</code>&nbsp;块中捕获的异常时，它就会释放该锁。</p><p>这样，每次只有一个线程可以执行受给定监控器保护的代码块。从其它线程的角度看，该代码块可以看作是<em>原子的</em>，它要么全部执行，要么根本不执行。</p><h3 id=\"N102DC\" class=\"ibm-h3\">简单的同步示例</h3><p>使用&nbsp;<code>synchronized</code>&nbsp;块可以让您将一组相关更新作为一个集合来执行，而不必担心其它线程中断或看到计算的中间结果。以下示例代码将打印“1 0”或“0 1”。如果没有同步，它还会打印“1 1”（或“0 0”，随便您信不信）。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_376884\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class SyncExample { </code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static lockObject = new Object();</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static class Thread1 extends Thread { </code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() { </code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">synchronized (lockObject) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">x = y = 0;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(x);</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\">&nbsp;</div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static class Thread2 extends Thread { </code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() { </code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">synchronized (lockObject) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">x = y = 1;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(y);</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\">&nbsp;</div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new Thread1().run();</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new Thread2().run();</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在这<em>两个</em>线程中都必须使用同步，以便使这个程序正确工作。</p><h3 id=\"N102EE\" class=\"ibm-h3\">Java 锁定</h3><p>Java 锁定合并了一种互斥形式。每次只有一个线程可以持有锁。锁用于保护代码块或整个方法，必须记住是锁的身份保护了代码块，而不是代码块本身，这一点很重要。一个锁可以保护许多代码块或方法。</p><p>反之，仅仅因为代码块由锁保护并不表示两个线程不能同时执行该代码块。它只表示<em>如果两个线程正在等待相同的锁</em>，则它们不能同时执行该代码。</p><p>在以下示例中，两个线程可以同时不受限制地执行&nbsp;<code>setLastAccess()</code>&nbsp;中的&nbsp;<code>synchronized</code>&nbsp;块，因为每个线程有一个不同的&nbsp;<code>thingie</code>&nbsp;值。因此，<code>synchronized</code>&nbsp;代码块受到两个正在执行的线程中不同锁的保护。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_261639\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class SyncExample {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static class Thingie {</code></div><div class=\"line number3 index2 alt2\">&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private Date lastAccess;</code></div><div class=\"line number5 index4 alt2\">&nbsp;</div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public synchronized void setLastAccess(Date date) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.lastAccess = date;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\">&nbsp;</div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static class MyThread extends Thread { </code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private Thingie thingie;</code></div><div class=\"line number13 index12 alt2\">&nbsp;</div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public MyThread(Thingie thingie) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.thingie = thingie;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\">&nbsp;</div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">thingie.setLastAccess(new Date());</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number22 index21 alt1\">&nbsp;</div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main() { </code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Thingie thingie1 = new Thingie(), </code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">thingie2 = new Thingie();</code></div><div class=\"line number26 index25 alt1\">&nbsp;</div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new MyThread(thingie1).start();</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">new MyThread(thingie2).start();</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N1030B\" class=\"ibm-h3\">同步的方法</h3><p>创建&nbsp;<code>synchronized</code>&nbsp;块的最简单方法是将方法声明成&nbsp;<code>synchronized</code>。这表示在进入方法主体之前，调用者必须获得锁：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_931624\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Point {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public synchronized void setXY(int x, int y) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.x = x;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.y = y;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>对于普通的&nbsp;<code>synchronized</code>方法，这个锁是一个对象，将针对它调用方法。对于静态&nbsp;<code>synchronized</code>&nbsp;方法，这个锁是与&nbsp;<code>Class</code>对象相关的监控器，在该对象中声明了方法。</p><p>仅仅因为&nbsp;<code>setXY()</code>&nbsp;被声明成&nbsp;<code>synchronized</code>&nbsp;并不表示两个不同的线程不能同时执行&nbsp;<code>setXY()</code>，只要它们调用不同的&nbsp;<code>Point</code>&nbsp;实例的&nbsp;<code>setXY()</code>&nbsp;就可同时执行。对于一个&nbsp;<code>Point</code>&nbsp;实例，一次只能有一个线程执行&nbsp;<code>setXY()</code>，或&nbsp;<code>Point</code>&nbsp;的任何其它&nbsp;<code>synchronized</code>&nbsp;方法。</p><h3 id=\"N10343\" class=\"ibm-h3\">同步的块</h3><p><code>synchronized</code>&nbsp;块的语法比&nbsp;<code>synchronized</code>&nbsp;方法稍微复杂一点，因为还需要显式地指定锁要保护哪个块。<code>Point</code>&nbsp;的以下版本等价于前一页中显示的版本：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_998775\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Point {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void setXY(int x, int y) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">synchronized (this) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.x = x;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.y = y;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>使用&nbsp;<code>this</code>&nbsp;引用作为锁很常见，但这并不是必需的。这表示该代码块将与这个类中的&nbsp;<code>synchronized</code>&nbsp;方法使用同一个锁。</p><p>由于同步防止了多个线程同时执行一个代码块，因此性能上就有问题，即使是在单处理器系统上。最好在尽可能最小的需要保护的代码块上使用同步。</p><p>访问局部（基于堆栈的）变量从来不需要受到保护，因为它们只能被自己所属的线程访问。</p><h3 id=\"N10361\" class=\"ibm-h3\">大多数类并没有同步</h3><p>因为同步会带来小小的性能损失，大多数通用类，如&nbsp;<code>java.util</code>&nbsp;中的 Collection 类，不在内部使用同步。这表示在没有附加同步的情况下，不能在多个线程中使用诸如&nbsp;<code>HashMap</code>&nbsp;这样的类。</p><p>通过每次访问共享集合中的方法时使用同步，可以在多线程应用程序中使用 Collection 类。对于任何给定的集合，每次必须用同一个锁进行同步。通常可以选择集合对象本身作为锁。</p><p>下一页中的示例类&nbsp;<code>SimpleCache</code>&nbsp;显示了如何使用&nbsp;<code>HashMap</code>&nbsp;以线程安全的方式提供高速缓存。但是，通常适当的同步并不只是意味着同步每个方法。</p><p><code>Collections</code>&nbsp;类提供了一组便利的用于&nbsp;<code>List</code>、<code>Map</code>&nbsp;和&nbsp;<code>Set</code>&nbsp;接口的封装器。您可以用&nbsp;<code>Collections.synchronizedMap</code>&nbsp;封装&nbsp;<code>Map</code>，它将确保所有对该映射的访问都被正确同步。</p><p>如果类的文档没有说明它是线程安全的，那么您必须假设它不是。</p><h3 id=\"N1038C\" class=\"ibm-h3\">示例：简单的线程安全的高速缓存</h3><p>如以下代码样本所示，<code>SimpleCache.java</code>&nbsp;使用&nbsp;<code>HashMap</code>&nbsp;为对象装入器提供了一个简单的高速缓存。<code>load()</code>&nbsp;方法知道怎样按对象的键装入对象。在一次装入对象之后，该对象就被存储到高速缓存中，这样以后的访问就会从高速缓存中检索它，而不是每次都全部地装入它。对共享高速缓存的每个访问都受到&nbsp;<code>synchronized</code>&nbsp;块保护。由于它被正确同步，所以多个线程可以同时调用&nbsp;<code>getObject</code>&nbsp;和&nbsp;<code>clearCache</code>&nbsp;方法，而没有数据损坏的风险。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_958570\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class SimpleCache {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private final Map cache = new HashMap();</code></div><div class=\"line number3 index2 alt2\">&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Object load(String objectName) { </code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// load the object somehow</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\">&nbsp;</div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void clearCache() { </code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">synchronized (cache) { </code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">cache.clear();</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\">&nbsp;</div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Object getObject(String objectName) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">synchronized (cache) { </code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Object o = cache.get(objectName);</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (o == null) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">o = load(objectName);</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">cache.put(objectName, o);</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number22 index21 alt1\">&nbsp;</div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return o;</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N103A8\" class=\"ibm-h3\">小结</h3><p>由于线程执行的计时是不确定的，我们需要小心，以控制线程对共享数据的访问。否则，多个并发线程会互相干扰对方的更改，从而损坏数据，或者其它线程也许不能及时看到对共享数据的更改。</p><p>通过使用同步来保护对共享变量的访问，我们可以确保线程以可预料的方式与程序变量进行交互。</p><p>每个 Java 对象都可以充当锁，<code>synchronized</code>&nbsp;块可以确保一次只有一个线程执行由给定锁保护的&nbsp;<code>synchronized</code>&nbsp;代码。</p><h2 id=\"N104B0\" class=\"ibm-h2\">同步详细信息</h2><h3 id=\"N103BC\" class=\"ibm-h3\">互斥</h3><p>在<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#\">共享对数据的访问</a>&nbsp;中，我们讨论了&nbsp;<code>synchronized</code>&nbsp;块的特征，并在实现<em>典型互斥锁</em>（即，互斥或临界段）时说明了它们，其中每次只有一个线程可以执行受给定锁保护的代码块。</p><p>互斥是同步所做工作的重要部分，但同步还有其它几种特征，这些特征对于在多处理器系统上取得正确结果非常重要。</p><h3 id=\"N103CE\" class=\"ibm-h3\">可见性</h3><p>除了互斥，同步（如&nbsp;<code>volatile</code>）强制某些可见性约束。当对象获取锁时，它首先使自己的高速缓存无效，这样就可以保证直接从主内存中装入变量。</p><p>同样，在对象释放锁之前，它会刷新其高速缓存，强制使已做的任何更改都出现在主内存中。</p><p>这样，会保证在同一个锁上同步的两个线程看到在&nbsp;<code>synchronized</code>&nbsp;块内修改的变量的相同值。</p><h3 id=\"N103DE\" class=\"ibm-h3\">什么时候必须同步？</h3><p>要跨线程维护正确的可见性，只要在几个线程之间共享非 final 变量，就必须使用&nbsp;<code>synchronized</code>（或&nbsp;<code>volatile</code>）以确保一个线程可以看见另一个线程做的更改。</p><p>可见性同步的基本规则是在以下情况中必须同步：</p><ul class=\"ibm-bullet-list\"><li>读取上一次可能是由另一个线程写入的变量</li><li>写入下一次可能由另一个线程读取的变量</li></ul><h3 id=\"N103F1\" class=\"ibm-h3\">用于一致性的同步</h3><p>除了用于可见性的同步，从应用程序角度看，您还必须用同步来确保一致性得到了维护。当修改多个相关值时，您想要其它线程原子地看到这组更改 ― 要么看到全部更改，要么什么也看不到。这适用于相关数据项（如粒子的位置和速率）和元数据项（如链表中包含的数据值和列表自身中的数据项的链）。</p><p>考虑以下示例，它实现了一个简单（但不是线程安全的）的整数堆栈：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_42578\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class UnsafeStack {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int top = 0;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int[] values = new int[1000];</code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void push(int n) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">values[top++] = n;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\">&nbsp;</div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int pop() {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return values[--top];</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果多个线程试图同时使用这个类，会发生什么？这可能是个灾难。因为没有同步，多个线程可以同时执行&nbsp;<code>push()</code>&nbsp;和&nbsp;<code>pop()</code>。如果一个线程调用&nbsp;<code>push()</code>，而另一个线程正好在递增了&nbsp;<code>top</code>&nbsp;并要把它用作&nbsp;<code>values</code>&nbsp;的下标之间调用&nbsp;<code>push()</code>，会发生什么？结果，这两个线程会把它们的新值存储到相同的位置！当多个线程依赖于数据值之间的已知关系，但没有确保只有一个线程可以在给定时间操作那些值时，可能会发生许多形式的数据损坏，而这只是其中之一。</p><p>对于这种情况，补救办法很简单：同步&nbsp;<code>push()</code>&nbsp;和&nbsp;<code>pop()</code>&nbsp;这两者，您将防止线程执行相互干扰。</p><p>请注意，使用&nbsp;<code>volatile</code>&nbsp;还不够 ― 需要使用&nbsp;<code>synchronized</code>&nbsp;来确保&nbsp;<code>top</code>&nbsp;和&nbsp;<code>values</code>&nbsp;之间的关系保持一致。</p><h3 id=\"N10427\" class=\"ibm-h3\">递增共享计数器</h3><p>通常，如果正在保护一个基本变量（如一个整数），有时只使用&nbsp;<code>volatile</code>&nbsp;就可以侥幸过关。但是，如果变量的新值派生自以前的值，就必须使用同步。为什么？考虑这个类：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_194558\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Counter {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int counter = 0;</code></div><div class=\"line number3 index2 alt2\">&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int&nbsp; get()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; { return counter; }</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void set(int n) { counter = n; }</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void increment() {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">set(get() + 1);</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>当我们要递增计数器时，会发生什么？请看&nbsp;<code>increment()</code>&nbsp;的代码。它很清楚，但不是线程安全的。如果两个线程试图同时执行&nbsp;<code>increment()</code>，会发生什么？计数器也许会增加 1，也许增加 2。令人惊奇的是，把&nbsp;<code>counter</code>&nbsp;标记成&nbsp;<code>volatile</code>&nbsp;没有帮助，使&nbsp;<code>get()</code>&nbsp;和&nbsp;<code>set()</code>&nbsp;都变成&nbsp;<code>synchronized</code>&nbsp;也没有帮助。</p><p>设想计数器是零，而两个线程同时执行递增操作代码。这两个线程会调用&nbsp;<code>Counter.get()</code>，并且看到计数器是零。现在两个线程都对它加一，然后调用&nbsp;<code>Counter.set()</code>。如果我们的计时不太凑巧，那么这两个线程都看不到对方的更新，即使&nbsp;<code>counter</code>&nbsp;是&nbsp;<code>volatile</code>，或者&nbsp;<code>get()</code>&nbsp;和&nbsp;<code>set()</code>&nbsp;是&nbsp;<code>synchronized</code>。现在，即使计数器递增了两次，得到的值也许只是一，而不是二。</p><p>要使递增操作正确运行，不仅&nbsp;<code>get()</code>&nbsp;和&nbsp;<code>set()</code>&nbsp;必须是&nbsp;<code>synchronized</code>，而且&nbsp;<code>increment()</code>&nbsp;也必需是&nbsp;<code>synchronized</code>！否则，调用&nbsp;<code>increment()</code>&nbsp;的线程可能会中断另一个调用&nbsp;<code>increment()</code>&nbsp;的线程。如果您不走运，最终结果将会是计数器只增加了一次，不是两次。同步&nbsp;<code>increment()</code>&nbsp;防止了这种情况的发生，因为整个递增操作是原子的。</p><p>当循环遍历&nbsp;<code>Vector</code>&nbsp;的元素时，同样如此。即使同步了&nbsp;<code>Vector</code>&nbsp;的方法，但在循环遍历时，<code>Vector</code>&nbsp;的内容仍然会更改。如果要确保&nbsp;<code>Vector</code>&nbsp;的内容在循环遍历时不更改，必须同步整个代码块。</p><h3 id=\"N1048A\" class=\"ibm-h3\">不变性和 final 字段</h3><p>许多 Java 类，包括&nbsp;<code>String</code>、<code>Integer</code>&nbsp;和&nbsp;<code>BigDecimal</code>，都是不可改变的：一旦构造之后，它们的状态就永远不会更改。如果某个类的所有字段都被声明成&nbsp;<code>final</code>，那么这个类就是不可改变的。（实际上，许多不可改变的类都有非 final 字段，用于高速缓存以前计算的方法结果，如&nbsp;<code>String.hashCode()</code>，但调用者看不到这些字段。）</p><p>不可改变的类使并发编程变得非常简单。因为不能更改它们的字段，所以就不需要担心把状态的更改从一个线程传递到另一个线程。在正确构造了对象之后，可以把它看作是常量。</p><p>同样，final 字段对于线程也更友好。因为 final 字段在初始化之后，它们的值就不能更改，所以当在线程之间共享 final 字段时，不需要担心同步访问。</p><h3 id=\"N104A3\" class=\"ibm-h3\">什么时候不需要同步</h3><p>在某些情况中，您不必用同步来将数据从一个线程传递到另一个，因为 JVM 已经隐含地为您执行同步。这些情况包括：</p><ul class=\"ibm-bullet-list\"><li>由静态初始化器（在静态字段上或&nbsp;<code>static{}</code>&nbsp;块中的初始化器）初始化数据时</li><li>访问 final 字段时</li><li>在创建线程之前创建对象时</li><li>线程可以看见它将要处理的对象时</li></ul><h3 id=\"N104B5\" class=\"ibm-h3\">死锁</h3><p>只要您拥有多个进程，而且它们要争用对多个锁的独占访问，那么就有可能发生死锁。如果有一组进程或线程，其中每个都在等待一个只有其它进程或线程才可以执行的操作，那么就称它们被<em>死锁</em>了。</p><p>最常见的死锁形式是当线程 1 持有对象 A 上的锁，而且正在等待与 B 上的锁，而线程 2 持有对象 B 上的锁，却正在等待对象 A 上的锁。这两个线程永远都不会获得第二个锁，或者释放第一个锁。它们只会永远等待下去。</p><p>要避免死锁，应该确保在获取多个锁时，在所有的线程中都以相同的顺序获取锁。</p><h3 id=\"N104C2\" class=\"ibm-h3\">性能考虑事项</h3><p>关于同步的性能代价有许多说法 ― 其中有许多是错的。同步，尤其是争用的同步，确实有性能问题，但这些问题并没有象人们普遍怀疑的那么大。</p><p>许多人都使用别出心裁但不起作用的技巧以试图避免必须使用同步，但最终都陷入了麻烦。一个典型的示例是双重检查锁定模式（请参阅<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#artrelatedtopics\">参考资料</a>，其中有几篇文章讲述了这种模式有什么问题）。这种看似无害的结构据说可以避免公共代码路径上的同步，但却令人费解地失败了，而且所有试图修正它的尝试也失败了。</p><p>在编写并发代码时，除非看到性能问题的确凿证据，否则不要过多考虑性能。瓶颈往往出现在我们最不会怀疑的地方。投机性地优化一个也许最终根本不会成为性能问题的代码路径 ― 以程序正确性为代价 ― 是一桩赔本的生意。</p><h3 id=\"N104D0\" class=\"ibm-h3\">同步准则</h3><p>当编写&nbsp;<code>synchronized</code>&nbsp;块时，有几个简单的准则可以遵循，这些准则在避免死锁和性能危险的风险方面大有帮助：</p><ul class=\"ibm-bullet-list\"><li><span>使代码块保持简短。</span><code>Synchronized</code>&nbsp;块应该简短 ― 在保证相关数据操作的完整性的同时，尽量简短。把不随线程变化的预处理和后处理移出&nbsp;<code>synchronized</code>&nbsp;块。</li><li><span>不要阻塞。</span>&nbsp;不要在&nbsp;<code>synchronized</code>&nbsp;块或方法中调用可能引起阻塞的方法，如&nbsp;<code>InputStream.read()</code>。</li><li><span>在持有锁的时候，不要对其它对象调用方法。</span>这听起来可能有些极端，但它消除了最常见的死锁源头。</li></ul><h2 id=\"N10622\" class=\"ibm-h2\">其它线程 API 详细信息</h2><h3 id=\"N104F5\" class=\"ibm-h3\">wait()、notify() 和 notifyAll() 方法</h3><p>除了使用轮询（它可能消耗大量 CPU 资源，而且具有计时不精确的特征），<code>Object</code>&nbsp;类还包括一些方法，可以让线程相互通知事件的发生。</p><p><code>Object</code>&nbsp;类定义了&nbsp;<code>wait()</code>、<code>notify()</code>&nbsp;和&nbsp;<code>notifyAll()</code>&nbsp;方法。要执行这些方法，必须拥有相关对象的锁。</p><p><code>Wait()</code>&nbsp;会让调用线程休眠，直到用&nbsp;<code>Thread.interrupt()</code>&nbsp;中断它、过了指定的时间、或者另一个线程用&nbsp;<code>notify()</code>&nbsp;或&nbsp;<code>notifyAll()</code>&nbsp;唤醒它。</p><p>当对某个对象调用&nbsp;<code>notify()</code>&nbsp;时，如果有任何线程正在通过&nbsp;<code>wait()</code>&nbsp;等待该对象，那么就会唤醒其中一个线程。当对某个对象调用&nbsp;<code>notifyAll()</code>&nbsp;时，会唤醒所有正在等待该对象的线程。</p><p>这些方法是更复杂的锁定、排队和并发性代码的构件。但是，<code>notify()</code>&nbsp;和&nbsp;<code>notifyAll()</code>&nbsp;的使用很复杂。尤其是，使用&nbsp;<code>notify()</code>&nbsp;来代替&nbsp;<code>notifyAll()</code>&nbsp;是有风险的。除非您确实知道正在做什么，否则就使用&nbsp;<code>notifyAll()</code>。</p><p>与其使用&nbsp;<code>wait()</code>&nbsp;和&nbsp;<code>notify()</code>&nbsp;来编写您自己的调度程序、线程池、队列和锁，倒不如使用&nbsp;<code>util.concurrent</code>&nbsp;包（请参阅<a href=\"https://www.ibm.com/developerworks/cn/education/java/j-threads/j-threads.html#artrelatedtopics\">参考资料</a>），这是一个被广泛使用的开放源码工具箱，里面都是有用的并发性实用程序。JDK 1.5 将包括&nbsp;<code>java.util.concurrent</code>包；它的许多类都派生自&nbsp;<code>util.concurrent</code>。</p><h3 id=\"N10549\" class=\"ibm-h3\">线程优先级</h3><p>Thread API 让您可以将执行优先级与每个线程关联起来。但是，这些优先级如何映射到底层操作系统调度程序取决于实现。在某些实现中，多个 ― 甚至全部 ― 优先级可能被映射成相同的底层操作系统优先级。</p><p>在遇到诸如死锁、资源匮乏或其它意外的调度特征问题时，许多人都想要调整线程优先级。但是，通常这样只会把问题移到别的地方。大多数程序应该完全避免更改线程优先级。</p><h3 id=\"N10551\" class=\"ibm-h3\">线程组</h3><p><code>ThreadGroup</code>&nbsp;类原本旨在用于把线程集合构造成组。但是，结果证明&nbsp;<code>ThreadGroup</code>&nbsp;并没有那样有用。您最好只使用&nbsp;<code>Thread</code>&nbsp;中的等价方法。</p><p><code>ThreadGroup</code>&nbsp;确实提供了一个有用的功能部件（<code>Thread</code>&nbsp;中目前还没有）：<code>uncaughtException()</code>&nbsp;方法。线程组中的某个线程由于抛出了未捕获的异常而退出时，会调用&nbsp;<code>ThreadGroup.uncaughtException()</code>&nbsp;方法。这就让您有机会关闭系统、将一条消息写到日志文件或者重新启动失败的服务。</p><h3 id=\"N1056C\" class=\"ibm-h3\">SwingUtilities</h3><p>虽然&nbsp;<code>SwingUtilities</code>&nbsp;类不是&nbsp;<code>Thread</code>&nbsp;API 的一部分，但还是值得简单提一下。</p><p>正如前面提到的，Swing 应用程序有一个 UI 线程（有时叫称为事件线程），所有 UI 活动都必须在这个线程中发生。有时，另一个线程也许想要更新屏幕上某样东西的外观，或者触发 Swing 对象上的一个事件。</p><p><code>SwingUtilities.invokeLater()</code>&nbsp;方法可以让您将&nbsp;<code>Runnable</code>&nbsp;对象传送给它，并且在事件线程中执行指定的&nbsp;<code>Runnable</code>。它的同类&nbsp;<code>invokeAndWait()</code>&nbsp;会在事件线程中调用&nbsp;<code>Runnable</code>，但&nbsp;<code>invokeAndWait()</code>&nbsp;会阻塞，直到&nbsp;<code>Runnable</code>&nbsp;完成执行之后。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_191627\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">void showHelloThereDialog() throws Exception {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Runnable showModalDialog = new Runnable() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void run() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">JOptionPane.showMessageDialog(myMainFrame, \"Hello There\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">};</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">SwingUtilities.invokeLater(showModalDialog);</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>对于 AWT 应用程序，<code>java.awt.EventQueue</code>&nbsp;还提供了&nbsp;<code>invokeLater()</code>&nbsp;和&nbsp;<code>invokeAndWait()</code>。</p><h2 id=\"N106F8\" class=\"ibm-h2\">结束语</h2><h3 id=\"N105A3\" class=\"ibm-h3\">结束语</h3><p>每个 Java 程序都使用线程，不论您知道与否。如果您正在使用 Java UI 工具箱（AWT 或 Swing）、Java Servlet、RMI、JavaServer Pages 或 Enterprise JavaBeans 技术，您可能没有意识到您正在使用线程。</p><p>在许多情况中，您可能想要显式地使用线程以提高程序的性能、响应速度或组织。这些情况包括：</p><ul class=\"ibm-bullet-list\"><li>在执行耗时较长的任务时，使用户界面的响应速度更快</li><li>利用多处理器系统以并行处理多个任务</li><li>简化仿真或基于代理的系统的建模</li><li>执行异步或后台处理</li></ul><p>虽然线程 API 很简单，但编写线程安全的程序并不容易。在线程之间共享变量时，必须非常小心，以确保正确同步了对它们的读写访问。当写一个可能接下来由另一个线程读取的变量，或者读取可能由另一个线程写过的变量时，必须使用同步以确保对数据的更改在线程之间是可见的。</p><p>当使用同步保护共享变量时，必须确保不仅使用了同步，而且读取器和写入器在<em>同一个</em>监控器上同步。而且，如果依赖对象的状态在多个操作中保持相同，或者依赖多个变量互相保持一致（或者，与它们过去的值一致），那么必须使用同步来强制实现这一点。但简单地同步一个类中的每一个方法并不能使它变成线程安全的 ― 只会使它更容易发生死锁。</p><div class=\"ibm-alternate-rule\"></div><h4 id=\"artrelatedtopics\" class=\"ibm-h4\">相关主题</h4><p><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span></p><ul><li><p><span>下载</span></p><ul class=\"ibm-bullet-list\"><li>请研究 Doug Lea 的&nbsp;<a href=\"http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html\"><code>util.concurrent</code></a>&nbsp;包（http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html），它包含了许多用于构建有效并发应用程序的有用的类。</li></ul><p><span>文章和教程</span></p><ul class=\"ibm-bullet-list\"><li>“<a href=\"http://gee.cs.oswego.edu/dl/cpj/jmm.html\">Synchronization and the Java Memory Model</a>”（http://gee.cs.oswego.edu/dl/cpj/jmm.html）摘录自 Doug Lea 撰写的着重讨论&nbsp;<code>synchronized</code>&nbsp;实际意义的一书。</li><li>在“<a href=\"http://www.ibm.com/developerworks/java/library/j-thread.html?S_TACT=105AGX52&amp;S_CMP=cn-t-j\">Writing multithreading Java applications</a>”（<em>developerWorks</em>，2001 年 2 月，http://www.ibm.com/developerworks/library/j-thread.html）一文中，Alex Roetter 概述了 Java 多线程化中涉及的问题，并提供了常见问题的解决方案。</li><li>Brian Goetz 撰写的“<a href=\"http://www.ibm.com/developerworks/java/library/j-threads1/?S_TACT=105AGX52&amp;S_CMP=cn-t-j\">Threading lightly, Part 1: Synchronization is not the enemy</a>”（<em>developerWorks</em>，2001 年 7 月，http://www.ibm.com/developerworks/library/j-threads1/）研究了如何管理并发应用程序的性能。</li><li>Jeff Friesen 撰写的“<a href=\"http://www.javaworld.com/javaworld/jw-05-2002/jw-0503-java101.html\">Achieve strong performance with threads</a>”（<em>JavaWorld</em>，2002 年 5 月，http://www.javaworld.com/javaworld/jw-05-2002/jw-0503-java101.html）是关于使用线程的一个四部分教程。</li><li>“<a href=\"http://www.javaworld.com/jw-02-2001/jw-0209-double.html\">Double-checked locking: Clever, but broken</a>”（<em>JavaWorld</em>，2001 年 2 月，http://www.javaworld.com/jw-02-2001/jw-0209-double.html）详细研究了 Java Memory Model，以及在某些情况下同步失败的惊人后果。</li><li>线程安全性是棘手的问题。“<a href=\"http://www.ibm.com/developerworks/java/library/j-jtp0618.html?S_TACT=105AGX52&amp;S_CMP=cn-t-j\">Java theory and practice: Safe construction techniques</a>”（<em>developerWorks</em>，2002 年 6 月，http://www.ibm.com/developerworks/library/j-jtp0618.html）提供了一些安全地构造对象的提示。</li><li>在“<a href=\"http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html\">Threads and Swing</a>”（http://java.sun.com/products/jfc/tsc/articles/threads/threads1.html）中，Sun 公司的技术人员研究了安全地使用 Swing 的规则，并且引入了有用的&nbsp;<code>SwingWorker</code>&nbsp;类。</li></ul><p><span>推荐书籍</span></p><ul class=\"ibm-bullet-list\"><li>Doug Lea 的&nbsp;<a href=\"http://www.amazon.com/exec/obidos/ASIN/0201310090/none0b69\"><em>Concurrent Programming in Java，第二版</em></a>（Addison-Wesley，1999 年，http://www.amazon.com/exec/obidos/ASIN/0201310090/none0b69）是关于围绕在 Java 应用程序中多线程编程的难解问题的权威书籍。</li><li>Paul Hyde 的&nbsp;<a href=\"http://www.amazon.com/exec/obidos/ASIN/0672315858/none0b69\"><em>Java Thread Programming</em></a>（http://www.amazon.com/exec/obidos/ASIN/0672315858/none0b69）是关于许多现实世界中多线程问题的好教程和参考大全。</li><li>Allen Holub 的&nbsp;<a href=\"http://www.amazon.com/exec/obidos/ASIN/1893115100/none0b69\"><em>Taming Java Threads</em></a>（http://www.amazon.com/exec/obidos/ASIN/1893115100/none0b69）一书是 Java 线程编程难题的有趣介绍。</li></ul><p><span>其它参考资料</span></p><ul class=\"ibm-bullet-list\"><li><code>util.concurrent</code>&nbsp;包正在根据 Java Community Process&nbsp;<a href=\"http://www.jcp.org/jsr/detail/166.jsp\">JSR 166</a>（http://www.jcp.org/jsr/detail/166.jsp）进行正式化，以便包含在 JDK 的 1.5 发行版中。</li><li><a href=\"http://foxtrot.sourceforge.net/\">Foxtrot 项目</a>（http://foxtrot.sourceforge.net/）是另一个在 Swing 应用程序中使用线程的方法，它可能更简单。</li><li>在&nbsp;<em>developerWorks</em><a href=\"http://www.ibm.com/developerworks/java/?S_TACT=105AGX52&amp;S_CMP=cn-t-j\">Java 技术专区</a>（http://www.ibm.com/developerworks/java/）中，您会找到几百篇关于 Java 编程的各个方面的文章。</li><li>请访问&nbsp;<a href=\"http://www.ibm.com/developerworks/views/java/tutorials.jsp\">developerWorks Java 技术教程页面</a>，以获取 developerWorks 中免费教程的完整清单。</li></ul></li></ul>','default',0),(165,'Java 编程简介-Java语言基础','主页文章','bigmeng',NULL,1,1,28,'2018-02-08 01:56:34','2018-02-08 01:58:03',NULL,2,'Java 平台上的面向对象编程-第一话',NULL,'<p>了解有望从本文中获得哪些收获，以及如何最充分地掌握本文中的内容。</p><h3 id=\"N10052\" class=\"ibm-h3\">关于本教程</h3><p>这个分为两部分的&nbsp;<em>Java 编程简介</em>教程适用于不熟悉 Java 技术的软件开发人员。学习完这两个部分后，即可利用 Java 语言和平台，启动并运行面向对象的编程 (OOP) 和实际的应用程序开发。</p><p>第 1 部分将对使用 Java 语言的 OOP 进行分步介绍。该教程首先将概述 Java 平台和语言，随后指导您设置一个由 Java Development Kit (JDK) 和 Eclipse IDE 组成的开发环境。在了解了开发环境的组成部分之后，就可以开始着手学习基本的 Java 语法。</p><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-apachefunctor/index.html\">第 2 部分</a>将介绍更高级的语言特性，包括正则表达式、泛型、I/O 和序列化。<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-apachefunctor/index.html\">第 2 部分</a>中的编程示例使用第 1 部分中开始开发的&nbsp;<code>Person</code>&nbsp;对象作为基础。</p><h3 id=\"N1006A\" class=\"ibm-h3\">目标</h3><p>完成第 1 部分后，您将熟悉基本的 Java 语言语法，并能编写简单的 Java 程序。随后的“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html\">Java 编程简介，第 2 部分：实际应用程序的构造</a>”将以此为基础。</p><h3 id=\"N10075\" class=\"ibm-h3\">前提条件</h3><p>本教程适用于没有体验过 Java 代码或 Java 平台的软件开发人员。教程中包含 OOP 概念的概述。</p><h3 id=\"N1007C\" class=\"ibm-h3\">系统要求</h3><p>要完成本教程中的练习，需要安装并设置一个开发环境，其中包含：</p><ul class=\"ibm-bullet-list\"><li>来自 Oracle 的 JDK 8</li><li>Eclipse IDE for Java Developers</li></ul><p>教程中包含二者的下载和安装说明。</p><p>推荐的系统配置是：</p><ul class=\"ibm-bullet-list\"><li>一个支持 Java SE 8，至少拥有 2GB 内存的系统。Linux®、Windows®、Solaris® 和 Mac OS X 上都支持 Java 8。</li><li>至少 200MB 的磁盘空间，用于安装软件组件和示例。</li></ul><h2 id=\"N10097\" class=\"ibm-h2\">Java 平台概述</h2><p>Java 技术用于为各种各样的环境开发应用程序，从用户设备到异构企业系统。本节将总体概述 Java 平台和它的组件。</p><h3 id=\"N1009D\" class=\"ibm-h3\">Java 语言</h3><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>了解 Java API</span></p><p>大部分 Java 开发人员常常查阅<a href=\"http://docs.oracle.com/javase/8/docs/api/\">官方在线 Java API 文档</a>— 也称为 Javadoc。默认情况下，会在 Javadoc 中看到 3 个窗格。左上侧的窗格将显示该 API 中的所有包，左下侧的窗格将显示每个包中的类。（右侧）主窗格将显示当前选择的包或类的详细信息。例如，如果单击左上侧窗格中的<code>java.util</code>&nbsp;包，然后单击它下方列出的&nbsp;<code>ArrayList</code>&nbsp;类，就会在右侧窗格中看到&nbsp;<code>ArrayList</code>的详细信息，包括对它的用途、使用方式及其方法的描述。</p></div><p>像任何编程语言一样，Java 语言拥有自己的结构、语法规则和编程范例。Java 语言的编程范例基于 OOP 的概念，此概念受 Java 语言支持。</p><p>Java 语言是 C 语言的一种衍生语言，所以它的语法规则与 C 非常相似。例如，代码块被模块化为方法并用花括号（<code>{</code>&nbsp;和&nbsp;<code>}</code>）分隔，变量在使用之前需要进行声明。</p><p>在结构上，Java 语言以<em>包</em>作为开头。包是 Java 语言的名称空间机制。包中包含类，而类中包含方法、变量、常量等。您将在本教程中了解 Java 语言的各个部分。</p><h3 id=\"N100C6\" class=\"ibm-h3\">Java 编译器</h3><p>为 Java 平台编写程序时，需要在 .java 文件中编写源代码，然后编译它们。编译器依据语言的语法规则来检查代码，然后将<em>字节码</em>写入 .class 文件中。字节码是一组将在 Java 虚拟机 (JVM) 上运行的指令。通过添加这一抽象级别，使 Java 编译器不同于其他语言编译器，它会编写适合用来运行程序的 CPU 芯片集的指令。</p><h3 id=\"N100D0\" class=\"ibm-h3\">JVM</h3><p>在运行时，JVM 读取并解释 .class 文件，在作为 JVM 编写目标的原生硬件平台上执行程序的指令。JVM 像 CPU 解释汇编语言指令一样解释字节码。不同之处在于，JVM 是一个专为特定平台编写的软件。JVM 是 Java 语言的“编写一次、随处运行”原则的核心。您的代码可在任何拥有合适的 JVM 实现的芯片集上运行。JVM 可用于 Linux 和 Windows 等主要平台，在用于手机和 Hobbyist 芯片的 JVM 中也已实现了 Java 语言的子集。</p><h3 id=\"N100D7\" class=\"ibm-h3\">垃圾收集器</h3><p>Java 平台不会强迫您时刻关注内存分配（或使用第三方库来完成此工作），而是提供了开箱即用的内存管理功能。Java 应用程序在运行时创建了一个对象实例时，JVM 会自动从<em>堆</em>为该对象分配内存空间— 堆是一个专门为您的程序留用的内存池。Java<em>垃圾收集器</em>在后台运行，跟踪记录应用程序不再需要哪些对象，并回收它们占用的内存。这种内存处理方法称为<em>隐式内存管理</em>，因为它不要求编写任何内存处理代码。垃圾收集是 Java 平台性能的基本特征之一。</p><h3 id=\"N100E9\" class=\"ibm-h3\">Java Development Kit</h3><p>下载 Java Development Kit (JDK) 后 —除了编译器和其他工具外— 您还会获得一个包含预构建的实用程序的完整类库，该库可帮助您完成大部分常见的应用程序开发任务。了解 JDK 包和库的作用范围的最佳方式是查阅&nbsp;<a href=\"http://docs.oracle.com/javase/8/docs/api/\">JDK API 文档</a>。</p><h3 id=\"N100F8\" class=\"ibm-h3\">Java 运行时环境</h3><p>Java 运行时环境（JRE；也称为 Java 运行时）包含运行使用 Java 语言编写的程序所需的 JVM、代码库和运行用 Java 语言编写的程序所需的组件。JRE 可用于多种平台。您可以依据 JRE 许可条款，自由地将 JRE 随您的应用程序一起重新分发，为应用程序的用户提供一个运行您的软件的平台。JRE 包含在 JDK 中。</p><h2 id=\"N100FF\" class=\"ibm-h2\">设置 Java 开发环境</h2><p>在本节中，将下载并安装 JDK 和 Eclipse IDE 的最新版本，并设置 Eclipse 开发环境。</p><p>如果已经安装 JDK 和 Eclipse IDE，您可能想要跳到“<a href=\"https://www.ibm.com/developerworks/cn/views/global/libraryview.jsp?sort_by=&amp;show_abstract=true&amp;show_all=&amp;search_flag=&amp;contentarea_by=Java+technology&amp;search_by=Eclipse+%E5%85%A5%E9%97%A8&amp;topic_by=-1&amp;type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&amp;ibm-search=%E6%90%9C%E7%B4%A2\">Eclipse 入门</a>”部分或它后面的“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#N1028C\">面向对象编程概念</a>”部分。</p><h3 id=\"N1010F\" class=\"ibm-h3\">您的开发环境</h3><p>JDK 包含一组用于编译和运行 Java 代码的命令行工具，其中包括 JRE 的一个完整副本。可以使用这些工具开发应用程序，但大部分开发人员还喜欢 IDE 的其他功能、任务管理和可视界面。</p><p>Eclipse 是一个用于 Java 开发的流行的开源 IDE。Eclipse 处理代码编译和调试等基本任务，以便您可以集中精力编写和测试代码。此外，可以使用 Eclipse 将源代码文件组织到项目中，编译和测试这些项目，然后将项目文件存储在任意多个源代码存储库中。您需要一个已安装的 JDK 来使用 Eclipse 执行 Java 开发。如果下载一个 Eclipse bundle，它附带了 JDK。</p><h3 id=\"N10118\" class=\"ibm-h3\">安装 JDK</h3><p>按照以下步骤下载并安装 JDK：</p><ol><li>浏览到&nbsp;<a href=\"http://www.oracle.com/technetwork/java/javase/downloads\">Java SE Downloads</a>&nbsp;并单击&nbsp;<span>Java Platform (JDK)</span>&nbsp;框，以显示最新版 JDK 的下载页面。</li><li>同意您想要下载的版本的许可条款。</li><li>选择与您的操作系统和芯片架构匹配的下载。</li></ol><h4 id=\"N1012D\" class=\"ibm-h4\">Windows</h4><ol><li>在提示时，将文件保存到您的硬盘驱动器。</li><li>完成下载后，运行安装程序。将 JDK 安装到硬盘驱动器中容易记住的位置，比如 C:\\home\\Java\\jdk1.8.0_92。（像在本例中一样，将更新号码编码到您选择的安装目录的名称中是一个好主意。）</li></ol><h4 id=\"N10137\" class=\"ibm-h4\">OS X</h4><ol><li>完成下载后，双击它来实现挂载。</li><li>运行安装程序。不需要选择将 JDK 安装在何处。可以运行&nbsp;<code>/usr/libexec/java_home -1.8</code>&nbsp;来查看您的 Mac 上的 JDK 8 位置。显示的路径类似于 /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home。</li></ol><p>请参阅&nbsp;<a href=\"http://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html\">JDK 8 和 JRE 8 安装</a>了解更多信息，包括 Solaris 或 Linux 上的安装说明。</p><p>您的计算机上现在已有一个 Java 环境。接下来，将安装 Eclipse IDE。</p><h3 id=\"N1014C\" class=\"ibm-h3\">安装 Eclipse</h3><p>要下载并安装 Eclipse，请执行以下步骤：</p><ol><li>浏览到&nbsp;<a href=\"http://www.eclipse.org/downloads/eclipse-packages/\">Eclipse 包下载页面</a>。</li><li>单击&nbsp;<span>Eclipse IDE for Java Developers</span>。</li><li>在右侧的 Download Links 下，选择您的平台（该网站可能已检测出您的操作系统类型）。</li><li>单击想要从中下载的镜像；然后将该文件保存到您的硬盘驱动器。</li><li>完成下载后，打开该文件并运行安装程序，接受默认设置。</li></ol><h3 id=\"N10165\" class=\"ibm-h3\">设置 Eclipse</h3><p>Eclipse IDE 是一种基于 JDK 的有用抽象，但它仍需要访问 JDK 及其各种工具。使用 Eclipse 编写 Java 代码之前，必须告诉它 JDK 在何处。</p><p>要设置 Eclipse 开发环境，请执行以下操作：</p><ol><li>从本地硬盘启动 Eclipse。（我的案例中，该位置是 /Users/sperry/eclipse/java-neon。）</li><li>在询问想要打开哪个工作区时，选择默认设置。</li><li>关闭 Welcome to Eclipse 窗口。（每次进入一个新工作区时，都会显示该欢迎窗口。可通过取消选择“Always show Welcome at start up”复选框来禁用此行为。）</li><li>选择&nbsp;<span>Preferences &gt; Java &gt; Installed JREs</span>。图 1 中的 Eclipse 设置窗口中已突出显示了这个 JRE 选项。<h5 id=\"fig1\" class=\"ibm-h5\">图 1. 配置 Eclipse 使用的 JDK</h5><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure1.png\" class=\"ibm-downsize\" alt=\"Eclipse 中的正确 JDK JRE 设置的屏幕截图\" height=\"545\" width=\"969\"><p class=\"ibm-ind-link\"><a class=\"ibm-popup-link\" href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#N1017F\">点击查看大图</a></p></li><li>确保 Eclipse 指向您与 JDK 一起下载的 JRE。如果 Eclipse 没有自动检测出您安装的 JDK，可单击&nbsp;<span>Add...</span>，在下一个对话框中单击&nbsp;<span>Standard VM</span>，然后单击&nbsp;<span>Next</span>。</li><li>指定 JDK 的主目录（比如 Windows 上的 C:\\home\\jdk1.8.0_92），然后单击&nbsp;<span>Finish</span>。</li><li>确认选择了您想要使用的 JDK 并单击&nbsp;<span>OK</span>。</li></ol><p>现在已设置并准备好 Eclipse 供您创建项目，以及编译和运行 Java 代码。下一节将帮助您熟悉 Eclipse。</p><h2 id=\"N1019B\" class=\"ibm-h2\">Eclipse 入门</h2><p>Eclipse 不仅仅是一个 IDE；它还是一个完整的开发生态系统。本节将简要介绍实际使用 Eclipse 执行 Java 开发。</p><h3 id=\"eclipse\" class=\"ibm-h3\">Eclipse 开发环境</h3><p>Eclipse 开发环境有 4 个主要组件：</p><ul class=\"ibm-bullet-list\"><li>工作区</li><li>项目</li><li>透视图</li><li>视图</li></ul><p>Eclipse 中的主要组织单元是<em>工作区</em>。一个工作区包含您的所有<em>项目</em>。<em>透视图</em>是一种查看每个项目的方法（因此而得名“透视图”），一个透视图中包含一个或多个<em>视图</em>。</p><p>图 2 显示了 Java 透视图，它是 Eclipse 的默认透视图。在启动 Eclipse 时可以看到此透视图。</p><h5 id=\"fig2\" class=\"ibm-h5\">图 2. Eclipse Java 透视图</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure2.png\" class=\"ibm-downsize\" alt=\"Eclipse IDE 启动屏幕的屏幕截图，其中显示了默认的 Java 透视图。\" height=\"805\" width=\"1000\"></p><p class=\"ibm-ind-link\"><a class=\"ibm-popup-link\" href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#N101C6\">点击查看大图</a></p><p>Java 透视图包含开始编写 Java 应用程序所需的工具。图 2 中所示的每个选项卡式窗口都是 Java 透视图的一个视图。Package Explorer 和 Outline 是两个特别有用的视图。</p><p>Eclipse 环境是高度可配置的。每个视图都可停靠，所以可以在 Java 透视图中移动它们，将它们放在想要放置的位置。但就现在而言，我们将保持默认的透视图和视图设置。</p><h3 id=\"N101CF\" class=\"ibm-h3\">创建一个项目</h3><p>按照以下步骤创建一个新的 Java 项目：</p><ol><li>单击&nbsp;<span>File &gt; New &gt; Java Project...</span>&nbsp;启动 New Java Project 向导，如图 3 所示。<h5 id=\"fig3\" class=\"ibm-h5\">图 3. New Java Project 向导</h5><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure3.png\" class=\"ibm-downsize\" alt=\"New Java Project 向导的屏幕截图\" height=\"735\" width=\"600\"></li><li>输入&nbsp;<code>Tutorial</code>&nbsp;作为项目名称，并使用在打开 Eclipse 时打开的工作区位置。</li><li>验证您正在使用的 JDK。</li><li>单击&nbsp;<span>Finish</span>&nbsp;接受项目设置并创建项目。</li></ol><p>您现在已创建了一个新的 Eclipse Java 项目和源代码文件夹。您的开发环境已经准备好大显身手。但是，理解 OOP 范例（本教程中的接下来两节将会介绍）至关重要。</p><h2 id=\"N101F4\" class=\"ibm-h2\">面向对象编程的概念和原理</h2><p>Java 语言（基本上）是面向对象的。本节将介绍 OOP 语言概念，并使用结构化编程作为一个对比。</p><h3 id=\"oop-concepts\" class=\"ibm-h3\">什么是对象？</h3><p>面向对象的语言遵循的编程模式不同于结构化编程语言，比如 C 和 COBOL。结构化编程范例是高度面向数据的：您拥有数据结构，然后程序指令会处理该数据。面向对象的语言（比如 Java 语言）将数据和程序指令组合到<em>对象</em>中。</p><p>对象是一个独立的实体，它仅包含属性和行为，不含其他任何东西。在面向对象的语言中，数据和程序逻辑被组合在一起，而不是通过字段（属性）提供一个数据结构，并将该结构传递给处理它的所有程序逻辑（行为）。这种组合可能出现在完全不同的粒度级别上，从细粒度的对象（比如&nbsp;<code>Number</code>）到粗粒度的对象（比如一个大型银行应用程序中的&nbsp;<code>FundsTransfer</code>&nbsp;服务）。</p><h4 id=\"N1020C\" class=\"ibm-h4\">父对象和子对象</h4><p><em>父对象</em>用作派生更复杂的<em>子对象</em>的结构基础。子对象看起来类似于父对象，但更加特殊化。在面向对象的范例中，可以重用父对象的通用属性和行为，也可以向子对象添加不同的属性和行为。</p><h4 id=\"N10218\" class=\"ibm-h4\">对象通信和协调</h4><p>对象通过发送消息（在 Java 用语中称为<em>方法调用</em>）与其他对象进行通信。此外，在面向对象的应用程序中，程序代码会协调对象之间的活动，以便在特定应用程序域的上下文内执行任务。</p><h4 id=\"N10222\" class=\"ibm-h4\">对象总结</h4><p>一个精心编写的对象：</p><ul class=\"ibm-bullet-list\"><li>有明确定义的边界</li><li>执行一组有限的活动</li><li>只知道它的数据和它完成活动所需的其他所有对象</li></ul><p>实质上，对象是一个离散的实体，它仅在其他对象上拥有必要的依赖关系来执行其任务。</p><p>是时候看看 Java 对象看起来像什么了。</p><h3 id=\"N10234\" class=\"ibm-h3\">示例：person 对象</h3><p>第一个示例基于一种常见的应用程序开发场景：一个通过&nbsp;<code>Person</code>&nbsp;对象表示的人。</p><p>从对象的定义可以知道，一个对象有两个主要元素：属性和行为。下面将介绍这些元素如何应用到&nbsp;<code>Person</code>&nbsp;对象。</p><p>根据经验，可将对象的属性视为<span>名词</span>，将行为视为<span>动词</span>。</p><h4 id=\"N1024B\" class=\"ibm-h4\">属性（名词）</h4><p>一个人可能有哪些属性？一些常见属性包括：</p><ul class=\"ibm-bullet-list\"><li>名称</li><li>年龄</li><li>身高</li><li>体重</li><li>眼睛颜色</li><li>性别</li></ul><p>您可能会想到更多属性（而且始终可以在以后添加更多属性），但此列表是一个不错的开端。</p><h4 id=\"N10261\" class=\"ibm-h4\">行为（动词）</h4><p>一个真正的人可以做各种各样的事，但对象行为通常与某种应用程序上下文相关。例如，在业务应用程序上下文中，您可能想询问您的&nbsp;<code>Person</code>&nbsp;对象，“您的体重指数 (BMI) 是多少？”作为响应，<code>Person</code>&nbsp;将使用它的身高和体重属性的值来计算 BMI。</p><p><code>Person</code>&nbsp;对象内部可能隐藏着更复杂的逻辑，不过现在，我们假设&nbsp;<code>Person</code>&nbsp;具有以下行为：</p><ul class=\"ibm-bullet-list\"><li>计算 BMI</li><li>输出所有属性</li></ul><h4 id=\"state and string\" class=\"ibm-h4\">状态和字符串</h4><p><em>状态</em>是 OOP 中的一个重要概念。对象的状态在任何时刻都由它的属性的值来表示。</p><p>对于&nbsp;<code>Person</code>，它的状态由姓名、年龄、身高和体重等属性来定义。如果想提供多个属性的列表，可以使用&nbsp;<code>String</code>&nbsp;类来完成此任务，稍后我们会更详细地介绍该类。</p><p>结合使用状态和字符串的概念，您可以对&nbsp;<code>Person</code>&nbsp;说：“向我提供你的属性列表（或&nbsp;<code>String</code>）来告诉我你是谁”。</p><h3 id=\"N10293\" class=\"ibm-h3\">OOP 的原则</h3><p>如果您拥有结构化编程背景，您可能还不清楚 OOP 的价值主张。毕竟，一个人的属性和检索（并转换）这些值的任何逻辑都可使用 C 或 COBOL 编写。如果理解了 OOP 的定义原则，OOP 范例的优势就会更加明显：<em>封装</em>、<em>继承</em>和<em>多态性</em>。</p><h4 id=\"N102A2\" class=\"ibm-h4\">封装</h4><p>回想一下，对象是离散的（或独立的）。此特征就是<em>封装</em>的工作原理。<em>隐藏</em>是另一个有时用于表达对象的独立、受保护性质的术语。</p><p>无论使用哪个术语，重要的是对象在它的状态和行为与外部世界之间保持一个界线。像真实世界中的物体一样，计算机编程中使用的对象与使用它们的应用程序中的不同类别的对象之间有着各种各样的关系。</p><p>在 Java 平台上，可以使用<em>访问修饰符</em>（将在后面介绍）将对象关系从<em>公共</em>改为<em>私有</em>。公共访问是完全开放的，而私有访问意味着对象的属性只能在对象自身内访问。</p><p>公共/私有边界实施了面向对象的封装原则。在 Java 平台上，可以逐个对象地改变该边界的强度。封装是 Java 语言的一个强大特性。</p><h4 id=\"N102BE\" class=\"ibm-h4\">继承</h4><p>在结构化编程中，常常会复制一个结构，为它提供一个新名称，然后添加或修改属性，使新实体（比如一个&nbsp;<code>Account</code>&nbsp;记录）不同于它的原始来源。随着时间的推移，此方法会生成大量重复代码，这可能带来维护问题。</p><p>OOP 引入了<em>继承</em>的概念，特殊化的类（无需额外的代码）可“复制”它们要特殊化的来源类的属性和行为。如果需要更改其中一些属性或行为，可以重写它们。您更改的唯一的源代码是创建特殊化的类所需的代码。源对象称为<em>父对象</em>，新的特殊化对象称为<em>子对象</em>— 我们已介绍过这两个术语。</p><p>假设您正在编写一个人力资源应用程序，并想要使用&nbsp;<code>Person</code>&nbsp;类作为一个名为&nbsp;<code>Employee</code>&nbsp;的新类的基类（也称为<em>超类</em>）。作为<code>Person</code>&nbsp;的子类，<code>Employee</code>&nbsp;将拥有&nbsp;<code>Person</code>&nbsp;类的所有属性，以及更多属性，比如：</p><ul class=\"ibm-bullet-list\"><li>纳税人识别编号</li><li>员工编号</li><li>工资</li></ul><p>继承使创建新的&nbsp;<code>Employee</code>&nbsp;类变得很容易，不需要手动复制所有&nbsp;<code>Person</code>&nbsp;代码。</p><h4 id=\"N102F7\" class=\"ibm-h4\">多态性</h4><p>多态性是一个比封装和继承更难掌握的概念。事实上，多态性表示属于某个分层结构的同一个分支的对象，在发送相同的消息时（也就是说，在被告知做同一件事时）可通过不同方式表明该行为。</p><p>要了解如何将多态性应用到业务应用程序上下文中，可返回到&nbsp;<code>Person</code>&nbsp;示例。还记得告诉&nbsp;<code>Person</code>&nbsp;将它的属性格式化成一个&nbsp;<code>String</code>&nbsp;吗？多态性使&nbsp;<code>Person</code>&nbsp;可以依据它的&nbsp;<code>Person</code>&nbsp;类型，以各种不同的方式表示它的属性。</p><p>多态性是在 Java 平台上的 OOP 中将会遇到的更复杂概念之一，不属于此入门课程的讨论范围。后续小节将更深入地探索封装和继承。</p><h3 id=\"N10311\" class=\"ibm-h3\">不是纯粹的面向对象语言</h3><p>有两种性质可区分 Java 语言与纯粹的面向对象语言（比如 Smalltalk）。首先，Java 语言是对象和原语类型的&nbsp;<span data-widget=\"tooltip\" class=\"tipso_style ibm-widget-processed\">一种混合</span>。其次，可以使用 Java 编写代码，将一个对象的内部情况向其他任何使用它的对象公开。</p><p>Java 语言为您提供了必要工具来遵循合理的 OOP 原则，并生成合理的面向对象的代码。因为 Java 不是纯粹面向对象的语言，所以必须在编写代码的方式上运用一些规则—该语言不会强制要求执行正确的操作，所以您必须学会自我约束。“<a href=\"https://www.ibm.com/developerworks/cn/java/j-perry-writing-good-java-code/index.html\">编写良好的 Java 代码</a>”部分中将提供一些技巧。</p><h2 id=\"N10328\" class=\"ibm-h2\">Java 语言入门</h2><p>一篇教程不可能介绍完所有的 Java 语言语法。第 1 部分的剩余部分将重点介绍该语言的基础知识，为您提供足够的知识并练习编写简单的程序。OOP 与对象密切相关，所以本节首先会介绍两个与 Java 语言如何处理它们明确相关的主题：保留字和 Java 对象的结构。</p><h3 id=\"reserved\" class=\"ibm-h3\">保留字</h3><p>像任何编程语言一样，Java 语言指定了一些编译器认为具有特殊意义的关键字。出于该原因，您不能使用它们来命名您的 Java 构造。保留字（也称为<em>关键字</em>）非常少：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_454509\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">abstract</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">assert</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">boolean</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">break</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">byte</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">case</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">catch</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">char</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">class</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">const</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">continue</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">default</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">do</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript plain\">double</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript plain\">else</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript plain\">enum</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">extends</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript plain\">final</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript plain\">finally</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript plain\">float</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">for</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript plain\">goto</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript plain\">if</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript plain\">implements</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript plain\">import</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript plain\">instanceof</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript plain\">int</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript plain\">interface</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript plain\">long</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript plain\">native</code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript plain\">new</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript plain\">package</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript plain\">private</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript plain\">protected</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript plain\">public</code></div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript plain\">return</code></div><div class=\"line number37 index36 alt2\"><code class=\"htmlscript plain\">short</code></div><div class=\"line number38 index37 alt1\"><code class=\"htmlscript plain\">static</code></div><div class=\"line number39 index38 alt2\"><code class=\"htmlscript plain\">strictfp</code></div><div class=\"line number40 index39 alt1\"><code class=\"htmlscript plain\">super</code></div><div class=\"line number41 index40 alt2\"><code class=\"htmlscript plain\">switch</code></div><div class=\"line number42 index41 alt1\"><code class=\"htmlscript plain\">synchronized</code></div><div class=\"line number43 index42 alt2\"><code class=\"htmlscript plain\">this</code></div><div class=\"line number44 index43 alt1\"><code class=\"htmlscript plain\">throw</code></div><div class=\"line number45 index44 alt2\"><code class=\"htmlscript plain\">throws</code></div><div class=\"line number46 index45 alt1\"><code class=\"htmlscript plain\">transient</code></div><div class=\"line number47 index46 alt2\"><code class=\"htmlscript plain\">try</code></div><div class=\"line number48 index47 alt1\"><code class=\"htmlscript plain\">void</code></div><div class=\"line number49 index48 alt2\"><code class=\"htmlscript plain\">volatile</code></div><div class=\"line number50 index49 alt1\"><code class=\"htmlscript plain\">while</code></div></div></td></tr></tbody></table></div></div></div><p>您也不能使用&nbsp;<code>true</code>、<code>false</code>&nbsp;和&nbsp;<code>null</code>（严格意义上讲，它们是&nbsp;<span data-widget=\"tooltip\" class=\"tipso_style ibm-widget-processed\">字面常量</span>&nbsp;而不是关键字）来命名 Java 构造</p><p>使用 IDE 进行编程的一个优势是，它可以对保留字使用语法颜色。</p><h3 id=\"N1034F\" class=\"ibm-h3\">Java 类的结构</h3><p>类是包含属性和行为的离散实体（对象）的蓝图。类定义了对象的基本结构，在运行时，您的应用程序会创建对象的<em>实例</em>。对象拥有明确定义的边界和状态，在正确请求对象时，它们可以执行相应的操作。每种面向对象的语言都拥有关于如何定义类的规则。</p><p>在 Java 语言中，类的定义如清单 1 所示：</p><h5 id=\"listing1\" class=\"ibm-h5\">清单 1. 类定义</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_356922\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package packageName;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">import ClassNameToImport; </code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">accessSpecifier class ClassName {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier dataType variableName [= initialValue];</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier ClassName([argumentList]) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">constructorStatement(s)</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier returnType methodName ([argumentList]) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">methodStatement(s)</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// This is a comment</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">/* This is a comment too */</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">/* This is a</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">multiline</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">comment */</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>备注</span><br>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;和本节的其他一些代码示例中，方括号表示它们之中的结构不是必需的。方括号本身（不同于&nbsp;<code>{</code>&nbsp;和&nbsp;<code>}</code>）不是 Java 语法的一部分。</p></div><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;包含各种类型的构造，第 1 行是&nbsp;<code>package</code>，第 2 行是&nbsp;<code>import</code>，第 3 行是&nbsp;<code>class</code>。这 3 种构造都属于<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#reserved\">保留字</a>，所以它们必须保持清单 1 中的准确格式。我为清单 1 中的其他构造提供的名称描述了它们表示的概念。</p><p>请注意，<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;中第 11 到 15 行是注释行。在大多数编程语言中，程序员都可添加注释来帮助描述代码。Java 语法允许采用单行和多行注释。</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_477481\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// This is a comment</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">/* This is a comment too */</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">/* This is a</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">multiline</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">comment */</code></div></div></td></tr></tbody></table></div></div></div><p>单行注释必须包含在一行上，但可以使用邻近的多个单行注释来形成一个注释块。多行注释以&nbsp;<code>/*</code>&nbsp;开头，必须以&nbsp;<code>*/</code>&nbsp;终止，而且可以分布在任意数量的行上。</p><p>接下来，我们将详细介绍<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;中的构造，首先是&nbsp;<code>package</code>。</p><h3 id=\"N1039E\" class=\"ibm-h3\">打包类</h3><p>在 Java 语言中，可以为类选择名称，比如&nbsp;<code>Account</code>、<code>Person</code>&nbsp;或&nbsp;<code>LizardMan</code>。有时，可能最终使用了同一个名称来表达两个稍微不同的概念。这种情形称为<em>名称冲突</em>，经常发生。Java 语言使用<em>包</em>来解决这些冲突。</p><p>Java 包是一种提供<em>名称空间</em>的机制— 名称空间是一个区域，名称在该区域内是唯一的，但在其外部可能不是唯一的。要唯一地标识某个构造，必须包含它的名称空间来完全限定它。</p><p>包也是构造包含离散功能单元的更复杂应用程序的好方法。</p><p>要定义包，可使用&nbsp;<code>package</code>&nbsp;关键字，后跟一个合法的包名称，并以一个分号结尾。包名称通常遵循这种<em>事实</em>标准模式：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_224403\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package&nbsp; orgType.orgName.appName.compName;</code></div></div></td></tr></tbody></table></div></div></div><p>这个包定义可分解为不同的部分：</p><ul class=\"ibm-bullet-list\"><li><code><em>orgType</em></code>&nbsp;是组织类型，比如&nbsp;<code>com</code>、<code>org</code>&nbsp;或&nbsp;<code>net</code>。</li><li><code><em>orgName</em></code>&nbsp;是组织的域名称，比如&nbsp;<code>makotojava</code>、<code>oracle</code>&nbsp;或&nbsp;<code>ibm</code>。</li><li><code><em>appName</em></code>&nbsp;是应用程序的缩写名称。</li><li><code><em>compName</em></code>&nbsp;是组件的名称。</li></ul><p>本课程将使用此约定，建议坚持使用它来定义包中的所有 Java 类。（Java 语言没有强制要求您遵循这种包约定。您完全不需要指定一个包，但在这种情况下，您的所有类都必须有唯一的名称且位于默认包中。）</p><h3 id=\"N103F4\" class=\"ibm-h3\">导入语句</h3><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>Eclipse 简化了导入</span><br>在 Eclipse 编辑器中编写代码时，可以键入想要使用的类的名称，然后按 Ctrl+Shift+O。Eclipse 会确定您需要哪些导入语句并自动添加它们。如果 Eclipse 找到两个具有相同名称的类，它会询问您想为哪个类添加导入语句。</p></div><p>类定义中的下一部分（返回参考<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>）是<em>导入语句</em>。导入语句告诉 Java 编译器在何处查找您在代码中引用的类。任何非无效类都会使用其他类来实现某种功能，导入语句是您向 Java 编译器告知这些类的方式。</p><p>导入语句看起来通常类似于：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_319411\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">import ClassNameToImport;</code></div></div></td></tr></tbody></table></div></div></div><p>您指定&nbsp;<code>import</code>&nbsp;关键字，后跟想要导入的类，然后是一个分号。类名应是<em>完全限定的</em>，这意味着类名中应包含它的包。</p><p>要导入一个包中的所有类，可以将&nbsp;<code>.*</code>&nbsp;放在包名称后。例如，这条语句导入&nbsp;<code>com.makotojava</code>&nbsp;包中的每个类：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_370580\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">import com.makotojava.*;</code></div></div></td></tr></tbody></table></div></div></div><p>但是，导入整个包可能会降低代码的可读性，所以推荐使用完全限定名称来仅导入所需的类。</p><h3 id=\"N10424\" class=\"ibm-h3\">类的声明</h3><p>要在 Java 语言中定义一个对象，必须声明一个类。可以将类看作是对象的模板，就像一个饼干模子。</p><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;包含这个类的声明：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_998526\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">accessSpecifier class ClassName {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier dataType variableName [= initialValue];</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier ClassName([argumentList]) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">constructorStatement(s)</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">accessSpecifier returnType methodName([argumentList]) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">methodStatement(s)</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>类的&nbsp;<code><em>accessSpecifier</em></code>&nbsp;可拥有多个值，但该值通常是&nbsp;<code>public</code>。您很快会看到&nbsp;<code><em>accessSpecifier</em></code>&nbsp;的其他值。</p><p>您可以采用您想要的任意方式对类进行命名，但根据约定应使用<em>驼峰式大小写</em>：以一个大写字母开头，将串联的每个单词的首字母大写，将其他所有字母小写。类名应仅包含字母和数字。坚持这些准则，可确保代码更容易供其他遵循相同约定的人使用。</p><h3 id=\"N10446\" class=\"ibm-h3\">变量和方法</h3><p>类可以拥有两种类型的<em>成员</em>—<em>变量</em>和<em>方法</em>。</p><h4 id=\"N10456\" class=\"ibm-h4\">变量</h4><p>类的变量值可以区分该类的每个实例并定义它的状态。这些值通常称为<em>实例变量</em>。一个变量包含：</p><ul class=\"ibm-bullet-list\"><li>一个&nbsp;<code><em>accessSpecifier</em></code></li><li>一个&nbsp;<code><em>dataType</em></code></li><li>一个&nbsp;<code><em>variableName</em></code></li><li>一个可选的&nbsp;<code><em>initialValue</em></code></li></ul><p>可能的&nbsp;<code><em>accessSpecifier</em></code>&nbsp;值包括：</p><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>公共变量</span><br>使用公共变量绝不是一个好主意，但在极少的情况下必须这么做，所以存在这种选择。Java 平台不会限制您的用例，所以使用良好的编码约定取决于您的自律，即使您采取了别的选择。</p></div><ul class=\"ibm-bullet-list\"><li><code>public</code>：任何包中的任何对象都能看到该变量。（不要使用此值；请参阅<span>公共变量</span>侧栏。）</li><li><code>protected</code>：相同包中定义的任何对象或（在任何包中定义的）一个子类都可以看到该变量。</li><li>没有说明符（也称为<em>友好</em>或<em>包私有</em>访问）：只有在相同包中定义了其类的对象才能看到该变量。</li><li><code>private</code>：只有包含该变量的类能够看到它。</li></ul><p>变量的&nbsp;<code><em>dataType</em></code>&nbsp;取决于该变量是什么 — 它可能是一种原语类型或另一种类类型（稍后会更详细地介绍）。</p><p><code><em>variableName</em></code>&nbsp;由您自己决定，但根据约定，变量名称应使用驼峰式大小写约定，除了以小写字母开头的变量名称。（这种样式有时称为<em>小驼峰式大小写</em>。）</p><p>现在暂时不要担忧&nbsp;<code><em>initialValue</em></code>，只需知道您在声明一个实例变量时可以将其初始化。（否则，编译器会为您生成在实例化该类时设置的默认值。）</p><h4 id=\"N104AF\" class=\"ibm-h4\">示例：Person 的类定义</h4><p>下面这个示例总结了您目前所学的知识。清单 2 是&nbsp;<code>Person</code>&nbsp;的类定义。</p><h5 id=\"listing2\" class=\"ibm-h5\">清单 2.&nbsp;<code>Person</code>&nbsp;的基类定义</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_186635\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int age;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int height;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int weight;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String eyeColor;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String gender;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>Person</code>&nbsp;的这个基类定义目前不是很有用，因为它仅定义了&nbsp;<code>Person</code>&nbsp;的属性（而且还是私有属性）。要变得更完整，<code>Person</code>&nbsp;类还需要行为 — 即<em>方法</em>。</p><h4 id=\"N104D1\" class=\"ibm-h4\">方法</h4><p>类的方法定义了它的行为。</p><p>方法可分为两种主要类别：<em>构造方法</em>；以及其他所有方法，这些方法具有许多类型。构造方法仅用于创建类的实例。其他类型的方法可用于几乎任何应用程序行为。</p><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;中的类定义给出了定义方法结构的方法，该结构包括以下元素：</p><ul class=\"ibm-bullet-list\"><li><code><em>accessSpecifier</em></code></li><li><code><em>returnType</em></code></li><li><code><em>methodName</em></code></li><li><code><em>argumentList</em></code></li></ul><p>这些结构元素在方法定义中的组合也称为方法的<em>签名</em>。</p><p>现在仔细查看两种方法类别，先查看构造方法。</p><h5 id=\"N104FA\" class=\"ibm-h5\">构造方法</h5><p>可使用构造方法指定如何实例化类。<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;以抽象形式给出了构造方法的声明语法；这里再次给出了它：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_926770\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">accessSpecifier ClassName([argumentList]) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">constructorStatement(s)</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>构造方法是可选的</span><br>如果未使用构造方法，编译器会为您提供一个，该构造方法为默认构造方法，也称为<em>无参数</em>或<em>no-arg</em>）构造方法。如果您使用的构造方法不是 no-arg 构造方法，编译器不会自动为您生成一个构造方法。</p></div><p>构造方法的&nbsp;<code><em>accessSpecifier</em></code>&nbsp;与变量的 accessSpecifier 相同。构造方法的名称必须与类名匹配。因此，如果您将类命名为&nbsp;<code>Person</code>，构造方法的名称也必须也是&nbsp;<code>Person</code>。</p><p>对于任何其他非默认构造方法（参见<span>构造方法是可选的</span>侧栏），需要传递一个<code><em>argumentList</em></code>，其中包含一个或多个：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_519218\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">argumentType argumentName</code></div></div></td></tr></tbody></table></div></div></div><p><code><em>argumentList</em></code>&nbsp;中的参数用逗号分隔，而且任何两个参数不能同名。&nbsp;<code><em>argumentType</em></code>&nbsp;为原语类型或另一种类类型（与变量类型相同）。</p><h5 id=\"N10537\" class=\"ibm-h5\">包含构造方法的类定义</h5><p>现在来看看在通过两种方式添加了创建&nbsp;<code>Person</code>&nbsp;对象的能力后会发生什么：通过使用 no-arg 构造方法和通过初始化一个部分属性列表。</p><p>清单 3 展示了如何创建构造方法，以及如何使用&nbsp;<code>argumentList</code>：</p><h5 id=\"listing3\" class=\"ibm-h5\">清单 3. 包含构造方法的&nbsp;<code>Person</code>&nbsp;类定义</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_310830\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int age;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int height;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int&nbsp; weight;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String eyeColor;</code></div><div class=\"line number8 index7 alt1\">&nbsp;</div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String gender;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Nothing to do...</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\">&nbsp;</div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name, int age, int height, int weight String eyeColor, String gender) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.age = age;</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.height = height;</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.weight = weight;</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.eyeColor = eyeColor;</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.gender = gender;</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，清单 3 中使用了&nbsp;<code>this</code>&nbsp;关键字来执行变量赋值。<code>this</code>&nbsp;关键字是“this object”的 Java 简写形式，在引用两个具有相同名称的变量时必须使用它。在本例中，<code>age</code>&nbsp;既是一个构造方法参数，也是一个类变量，所以&nbsp;<code>this</code>&nbsp;关键字可帮助编译器辨别它属于哪种情况。</p><p><code>Person</code>&nbsp;对象变得越来越有趣，但它需要更多行为。为此，您需要更多方法。</p><h5 id=\"N10562\" class=\"ibm-h5\">其他方法</h5><p>构造方法是一种具有特定功能的特定方法类型。类似地，其他许多类型的方法执行 Java 程序中的特定功能。从本节开始到全教程结束，我们将探索其他方法类型。</p><p>返回到<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing1\">清单 1</a>&nbsp;中，可以看到方法的声明方式：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_890590\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">accessSpecifier returnType methodName ([argumentList]) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">methodStatement(s)</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>其他方法看起来非常像构造方法，但有两处例外。 首先，您可为其他方法提供您喜欢的任何名称（但是，肯定要遵守某些规则）。我推荐遵守以下约定：</p><ul class=\"ibm-bullet-list\"><li>以小写字母开头。</li><li>避免使用数字，除非绝对必须使用它们。</li><li>仅使用字母字符。</li></ul><p>第二，不同于构造方法，其他方法有一个可选的<em>返回类型</em>。</p><h5 id=\"N10581\" class=\"ibm-h5\">Person 的其他方法</h5><p>有了这些基本信息，就可以在清单 4 中看到在向&nbsp;<code>Person</code>&nbsp;对象添加一些方法后发生的情况。（为简洁起见，我省略了构造方法。）</p><h5 id=\"listing4\" class=\"ibm-h5\">清单 4. 包含一些新方法的&nbsp;<code>Person</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_888715\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int age;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int height;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int&nbsp; weight;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String eyeColor;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String gender;</code></div><div class=\"line number10 index9 alt1\">&nbsp;</div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public String getName() { return name; }</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void setName(String value) { name = value; }</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Other getter/setter combinations...</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意清单 4 中有关“getter/setter combinations”的注释。稍后会更多地使用 getter 和 setter。就现在而言，您只需知道&nbsp;<em>getter</em>&nbsp;是一个检索属性值的方法，<em>setter</em>&nbsp;是一个修改该值的方法。 清单 4 仅给出了一种 getter/setter 组合（针对&nbsp;<code>Name</code>&nbsp;属性），但您可用类似方式定义更多组合。</p><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing4\">清单 4</a>&nbsp;中可以注意到，如果某个方法没有返回值，则必须在该方法的签名中指定&nbsp;<code>void</code>&nbsp;返回类型来告知编译器。</p><h5 id=\"N105A8\" class=\"ibm-h5\">静态和实例方法</h5><p>通常会使用两种类型的（非构造）方法：<em>实例方法</em>和<em>静态方法</em>。实例方法依赖于特定对象实例的状态来实现其行为。静态方法有时也称为<em>类方法</em>，因为它们的行为不依赖于任何一个对象的状态。静态方法的行为是在类级别上发生的。</p><p>静态方法主要用于实用程序；您可将它们视为全局方法（类似于 C 语言），但将该方法的代码与定义它的类放在一起。</p><p>例如，在整个教程中，您都会使用 JDK&nbsp;<code>Logger</code>&nbsp;类向控制台输出信息。要创建一个&nbsp;<code>Logger</code>&nbsp;类实例，不需要实例化&nbsp;<code>Logger</code>&nbsp;类；而是应该调用一个名为&nbsp;<code>getLogger()</code>&nbsp;的静态方法。</p><p>在类上调用静态方法的语法不同于在对象上调用方法的语法。您还会使用包含该静态方法的类的名称，如这个调用中所示：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_819959\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"NewLogger\");</code></div></div></td></tr></tbody></table></div></div></div><p>在这个示例中，<code>Logger</code>&nbsp;是类名，<code>getLogger(...)</code>&nbsp;是方法名。因此，要调用静态方法，不需要对象实例，只需类名即可。</p><h2 id=\"yourfirst\" class=\"ibm-h2\">您的第一个 Java 类</h2><p>是时候将前面几节中学到的知识融会贯通，并开始编写一些代码了。本节将指导您使用 Eclipse Package Explorer 声明一个类，并向它添加变量和方法。您将学习如何使用&nbsp;<code>Logger</code>&nbsp;类密切关注应用程序的行为，以及如何使用&nbsp;<code>main()</code>&nbsp;方法作为&nbsp;<span data-widget=\"tooltip\" class=\"tipso_style ibm-widget-processed\">测试平台</span>。</p><h3 id=\"N105E8\" class=\"ibm-h3\">创建一个包</h3><p>如果未在（Java 透视图中的）Package Explorer 视图中，可在 Eclipse 中通过&nbsp;<span>Window &gt; Perspective &gt; Open Perspective</span>&nbsp;进入该视图。您将通过设置来创建您的第一个 Java 类。第一步是创建一个放置该类的位置。包是名称空间构造，而且它们可方便地直接映射到文件系统的目录结构。</p><p>您可以不使用默认包（这通常是一个坏主意），而是专门为您正在编写的代码创建一个包。单击&nbsp;<span>File &gt; New &gt; Package</span>&nbsp;启动 Java Package 向导，如图 4 所示。</p><h5 id=\"N105F8\" class=\"ibm-h5\">图 4. Eclipse Java Package 向导</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure4.png\" class=\"ibm-downsize\" alt=\"Eclipse Package 向导的屏幕截图\" height=\"433\" width=\"550\"></p><p>将&nbsp;<code>com.makotojava.intro</code>&nbsp;键入到 Name 文本框中并单击&nbsp;<span>Finish</span>。可以在 Package Explorer 中看到创建的新包。</p><h3 id=\"N10609\" class=\"ibm-h3\">声明类</h3><p>可以从 Package Explorer 中通过多种方式创建类，但最简单的方法是右键单击刚创建的包并选择&nbsp;<span>New &gt; Class...</span>。New Class 对话框将会打开。</p><p>在 Name 文本框中，键入&nbsp;<code>Person</code>，然后单击&nbsp;<span>Finish</span>。</p><p>新类将显示在编辑窗口中。建议关闭一些在您首次打开 Java 透视图时其中默认打开的视图（Problems、Javadoc 等），以便更容易查看您的源代码。（在下次打开 Eclipse 并转到 Java 透视图时，Eclipse 会记住您不想看到这些视图。）图 5 显示了一个打开了必要视图的工作区。</p><h5 id=\"fig5\" class=\"ibm-h5\">图 5. 一个井然有序的工作区</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure5.png\" class=\"ibm-downsize\" alt=\"Eclipse Package 向导的编辑窗口的屏幕截图\" height=\"793\" width=\"1024\"></p><p class=\"ibm-ind-link\"><a class=\"ibm-popup-link\" href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#N10622\">点击查看大图</a></p><p>Eclipse 为您生成了一个 shell 类，并在顶部包含&nbsp;<code>package</code>&nbsp;语句。您现在只需充实该类。可以通过&nbsp;<span>Window &gt; Preferences &gt; Java &gt; Code Style &gt; Code Templates</span>&nbsp;配置 Eclipse 如何生成新类。为了简便起见，我们使用了 Eclipse 的开箱即用的代码生成功能。</p><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#fig5\">图 5</a>中，请注意新的源代码文件名称旁边的星号 (*)，它表示我已进行了修改。另请注意，该代码尚未保存。接下来请注意我在声明&nbsp;<code>Name</code>&nbsp;属性时犯了一个错误：我将&nbsp;<code>Name</code>&nbsp;的类型声明为了&nbsp;<code>Strin</code>。编译器无法找到对这样一个类的引用，所以将它标记为一个编译错误（在&nbsp;<code>Strin</code>&nbsp;下添加了红色的波浪线）。当然，我在&nbsp;<code>Strin</code>&nbsp;的末尾添加一个&nbsp;<code>g</code>&nbsp;来修复我的错误。这是对使用 IDE 而不是使用命令行工具进行软件开发的一个小示范。可通过将类型更改为&nbsp;<code>String</code>&nbsp;来更正该错误。</p><h3 id=\"N1064A\" class=\"ibm-h3\">添加类变量</h3><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing3\">清单 3</a>&nbsp;中，已经开始充实&nbsp;<code>Person</code>&nbsp;类，但我没有过多地解释语法。现在，我将正式定义如何添加类变量。</p><p>回想一下，一个变量有一个&nbsp;<code><em>accessSpecifier</em></code>、一个&nbsp;<code><em>dataType</em></code>、一个&nbsp;<code><em>variableName</em></code>&nbsp;和一个可选的&nbsp;<code><em>initialValue</em></code>。之前，您简单了解了如何定义&nbsp;<code><em>accessSpecifier</em></code>&nbsp;和&nbsp;<code><em>variableName</em></code>。现在，您已看到一个变量可以拥有的&nbsp;<code><em>dataType</em></code>。</p><p><code><em>dataType</em></code>&nbsp;可以是原语类型或对另一个对象的引用。例如，可以注意到&nbsp;<code>Age</code>&nbsp;是一个&nbsp;<code>int</code>（原语类型），<code>Name</code>&nbsp;是一个&nbsp;<code>String</code>（一个对象）。JDK 提供了大量有用的类，比如&nbsp;<code>java.lang.String</code>，而且不需要导入&nbsp;<code>java.lang</code>&nbsp;包中的类（Java 编译器采用的一种简写形式）。但无论&nbsp;<code><em>dataType</em></code>&nbsp;是 JDK 类（比如&nbsp;<code>String</code>），还是用户定义的类，语法都基本相同。</p><p>表 1 给出了您可能经常看到的 8 种原语数据类型，包括没有显式初始化某个成员变量的值时这些原语采用的默认值。</p><h5 id=\"table1\" class=\"ibm-h5\">表 1. 原语数据类型</h5><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table layui-table\" summary=\"Primitive data types and default values.\" width=\"100%\"><thead xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><th scope=\"col\" style=\"text-align: left;\">类型</th><th scope=\"col\" style=\"text-align: left;\">大小</th><th scope=\"col\" style=\"text-align: left;\">默认值</th><th scope=\"col\" style=\"text-align: left;\">值范围</th></tr></thead><tbody xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><td><code>boolean</code></td><td>不适用</td><td>false</td><td>true 或 false</td></tr><tr><td><code>byte</code></td><td>8 位</td><td>0</td><td>-128 到 127</td></tr><tr><td><code>char</code></td><td>16 位</td><td>（无符号）</td><td>\\u0000\' \\u0000\' 到 \\uffff\' 或 0 到 65535</td></tr><tr><td><code>short</code></td><td>16 位</td><td>0</td><td>-32768 到 32767</td></tr><tr><td><code>int</code></td><td>32 位</td><td>0</td><td>-2147483648 到 2147483647</td></tr><tr><td><code>long</code></td><td>64 位</td><td>0</td><td>-9223372036854775808 到 9223372036854775807</td></tr><tr><td><code>float</code></td><td>32 位</td><td>0.0</td><td>1.17549435e-38 到 3.4028235e+38</td></tr><tr><td><code>double</code></td><td>64 位</td><td>0.0</td><td>4.9e-324 到 1.7976931348623157e+308</td></tr></tbody></table><h3 id=\"N106FF\" class=\"ibm-h3\">内置记录</h3><p>在进一步学习编码之前，需要知道您的程序如何告诉您它们在做什么。</p><p>Java 平台包含&nbsp;<code>java.util.logging</code>&nbsp;包，这是一种以可读形式收集程序信息的内置记录机制。Logger 是您通过对&nbsp;<code>Logger</code>&nbsp;类执行静态方法调用所创建的命名实体：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_354790\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">import java.util.logging.Logger;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">//...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(getClass().getName());</code></div></div></td></tr></tbody></table></div></div></div><p>在调用&nbsp;<code>getLogger()</code>&nbsp;方法时，向它传递了一个&nbsp;<code>String</code>。就现在而言，只需养成传递您正编写的代码所在类的名称的习惯。在任何常规（即非静态）方法中，前面的代码始终引用该类的名称并将它传递给&nbsp;<code>Logger</code>。</p><p>如果要在一个静态方法内调用一次&nbsp;<code>Logger</code>，可引用您所在的类的名称：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_372517\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div></div></td></tr></tbody></table></div></div></div><p>在这个示例中，您所在的类是&nbsp;<code>Person</code>&nbsp;类，所以您引用了一个称为&nbsp;<code>class</code>&nbsp;的特殊文字，它检索&nbsp;<code>Class</code>&nbsp;对象（将在以后更详细介绍）并获取其&nbsp;<code>Name</code>&nbsp;属性。</p><p>本教程的“<a href=\"https://www.ibm.com/developerworks/cn/java/j-perry-writing-good-java-code/index.html\">编写良好的 Java 代码</a>”部分包含一个如何<em>不</em>进行记录的技巧。</p><p>开始执行测试之前，首先进入&nbsp;<code>Person</code>&nbsp;的 Eclipse 源代码编辑器，并将此代码添加到<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing3\">清单 3</a>&nbsp;中的&nbsp;<code>public class Person {</code>&nbsp;后，类似于这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_274254\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int age;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int height;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int weight;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String eyeColor;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String gender;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>Eclipse 拥有一个方便的代码生成器来生成 getter 和 setter（以及其他内容）。要尝试使用代码生成器，请将鼠标光标放在<code>Person</code>&nbsp;类定义上（即放在类定义中的单词&nbsp;<code>Person</code>&nbsp;上），然后单击&nbsp;<span>Source &gt; Generate Getters and Setters...</span>。对话框打开时，单击&nbsp;<span>Select All</span>，如图 6 所示。</p><h5 id=\"N1075A\" class=\"ibm-h5\">图 6. 生成 getter 和 setter 的 Eclipse</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure6.png\" class=\"ibm-downsize\" alt=\"生成 getter 和 setter 的 Eclipse 屏幕截图\" height=\"636\" width=\"521\"></p><p>对于插入点，请选择&nbsp;<span>Last member</span>&nbsp;并单击&nbsp;<span>OK</span>。</p><p>现在，将一个构造方法添加到&nbsp;<code>Person</code>&nbsp;中，方法是将清单 5 中的代码键入到您的源代码窗口中，放在类定义顶部部分下方（<code>public class Person ()</code>&nbsp;下方紧接的一行）。</p><h5 id=\"listing5\" class=\"ibm-h5\">清单 5.&nbsp;<code>Person</code>&nbsp;构造方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_399418\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public Person(String name, int age, int height, int weight, String eyeColor, String gender) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.age = age;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.height = height;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.weight = weight;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.eyeColor = eyeColor;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.gender = gender;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>确保没有看到表示编译错误的波浪线。</p><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>使用&nbsp;<code>main()</code>&nbsp;作为测试平台</span></p><p><code>main()</code>&nbsp;是一个特殊方法，可以将它包含在任何类中，以便 JRE 可执行其代码。类不是必须拥有<code>main()</code>&nbsp;方法 — 事实上，大部分类从没拥有该方法 — 而且一个类最多可拥有一个&nbsp;<code>main()</code>&nbsp;方法。&nbsp;<code>main()</code>&nbsp;是一种值得拥有的方便方法，因为它为类提供了一个快速测试平台。在企业开发中，将会使用测试库，比如 JUnit，但使用&nbsp;<code>main()</code>&nbsp;作为测试平台可以快速直接地创建测试平台。</p></div><h4 id=\"N10798\" class=\"ibm-h4\">生成一个 JUnit 测试案例</h4><p>现在生成一个 JUnit 测试案例，在该案例中，使用了清单 5 中的构造方法来实例化一个<code>Person</code>，然后将该对象的状态输出到控制台。从这种意义上讲，“测试”可确保构造方法调用采用的属性顺序是正确的（也就是说，为它们设置了正确的属性）。</p><p>在 Package Explorer 中，右键单击您的&nbsp;<code>Person</code>&nbsp;类，然后单击&nbsp;<span>New &gt; JUnit Test Case</span>。New JUnit Test Case 向导的第一页将会打开，如图 7 所示。</p><h5 id=\"N107AB\" class=\"ibm-h5\">图 7. 创建一个 JUnit 测试案例</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure7.png\" class=\"ibm-downsize\" alt=\"创建 JUnit 测试案例的第一个对话框的屏幕截图\" height=\"625\" width=\"550\"></p><p>单击&nbsp;<span>Next</span>&nbsp;接受默认值。您会看到 Test Methods 对话框，如图 8 所示。</p><h5 id=\"N107BA\" class=\"ibm-h5\">图 8. 选择方法（向导将为其生成测试案例）</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure8.jpg\" class=\"ibm-downsize\" alt=\"创建 JUnit 测试案例的 Test Methods 对话框的屏幕截图\" height=\"625\" width=\"550\"></p><p>在这个对话框中，选择您想让向导为其构建测试的一个或多个方法。在本例中，仅选择构造方法，如图 8 所示。单击&nbsp;<span>Finish</span>，Eclipse 会生成 JUnit 测试案例。</p><p>接下来，打开&nbsp;<code>PersonTest</code>，进入&nbsp;<code>testPerson()</code>&nbsp;方法，使它看起来类似于清单 6。</p><h5 id=\"listing6\" class=\"ibm-h5\">清单 6.&nbsp;<code>testPerson()</code>&nbsp;方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_172540\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void testPerson() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+ p.getGender());</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(\"Joe Q Author\", p.getName());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(42, p.getAge());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(173, p.getHeight());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(82, p.getWeight());</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(\"Brown\", p.getEyeColor());</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(\"MALE\", p.getGender());</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>暂时不用担心&nbsp;<code>Logger</code>&nbsp;类。只需输入您在清单 6 中看到的代码即可。您现在已准备好运行您的第一个 Java 程序和 JUnit 测试案例。</p><h3 id=\"N107DD\" class=\"ibm-h3\">在 Eclipse 中运行单元测试</h3><p>在 Eclipse 中，右键单击 Package Explore 中的 PersonTest.java 并选择&nbsp;<span>Run As</span>&nbsp;&gt;&nbsp;<span>JUnit Test</span>。图 9 显示了发生的情况。</p><h5 id=\"fig9\" class=\"ibm-h5\">图 9. 查看&nbsp;<code>Person</code>&nbsp;的运行状况</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure9.png\" class=\"ibm-downsize\" alt=\"将 Person 作为 Java 应用程序运行的 Eclipse 的屏幕截图\" height=\"796\" width=\"1000\"></p><p class=\"ibm-ind-link\"><a class=\"ibm-popup-link\" href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#N107F2\">点击查看大图</a></p><p>控制台视图将会自动打开，以显示&nbsp;<code>Logger</code>&nbsp;输出，JUnit 视图表明测试运行正常。</p><h2 id=\"N107FC\" class=\"ibm-h2\">向 Java 类添加行为</h2><p><code>Person</code>&nbsp;目前看起来还不错，但可以使用一些额外的行为让它变得更有趣。创建行为意味着添加方法。本节会更详细地介绍<em>访问器方法</em>— 即您已看到过的 getter 和 setter。</p><h3 id=\"N10808\" class=\"ibm-h3\">访问器方法</h3><p>您在上一节末尾处实际看到的 getter 和 setter 称为<em>访问器方法</em>。（快速回顾：getter 是检索属性值的方法；setter 是修改该值的方法。）要封装一个类中来自其他对象的数据，可以将它的变量声明为&nbsp;<code>private</code>，然后提供访问器方法。</p><p>访问器的命名遵循称为&nbsp;<em>JavaBeans 模式</em>的严格约定。在此模式中，任何&nbsp;<code>Foo</code>&nbsp;属性都有一个称为&nbsp;<code>getFoo()</code>&nbsp;的 getter 方法和一个称为&nbsp;<code>setFoo()</code>&nbsp;的 setter 方法。JavaBeans 模式很常见，所以 Eclipse IDE 中内置了对它的支持，您在生成&nbsp;<code>Person</code>&nbsp;的 getter 和 setter 时已看到。</p><p>访问器遵循以下准则：</p><ul class=\"ibm-bullet-list\"><li>属性始终使用&nbsp;<code>private</code>&nbsp;访问级别来声明。</li><li>getter 和 setter 的访问说明符是&nbsp;<code>public</code>。</li><li>getter 不接受任何参数，而且返回一个与它访问的属性同类型的值。</li><li>setter 仅接受一个与该属性同类型的参数，而且不返回值。</li></ul><h3 id=\"N10837\" class=\"ibm-h3\">声明访问器</h3><p>目前为止，声明访问器的最简单方法是让 Eclipse 为您声明它。但您还需要知道如何手动编写一个 getter 和 setter 对。</p><p>假设我有一个属性&nbsp;<code>Foo</code>，它的类型为&nbsp;<code>java.lang.String</code>。我的完整&nbsp;<code>Foo</code>&nbsp;声明（依照访问器准则）是：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_893096\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">private String foo;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public String getFoo() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return foo;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">public void setFoo(String value) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">foo = value;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，传递给 setter 的参数值的命名方式与通过 Eclipse 生成它时所用的命名方式不同（其中参数名称与属性名称相同 —例如&nbsp;<code>public void setFoo(String&nbsp;<span>foo</span>)</code>）。在我手动编写 setter 的极少数情况下，我始终使用&nbsp;<code>value</code>&nbsp;作为 setter 的参数值名称。这个吸引眼球的词汇（我自己的规范，建议其他开发人员也这么做）提醒我，我已经手动编写了 setter。如果我没有使用 Eclipse 为我生成 getter 和 setter，那么我一定拥有合理的理由。使用&nbsp;<code>value</code>&nbsp;作为 setter 的参数值，这会提醒我这个 setter 很特殊。（代码注释可满足同样的用途。）</p><h3 id=\"N1085D\" class=\"ibm-h3\">调用方法</h3><p>调用方法很简单。例如，<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing6\">清单 6</a>&nbsp;中的&nbsp;<code>testPerson</code>&nbsp;方法调用&nbsp;<code>Person</code>&nbsp;的各种 getter 来返回它们的值。现在，我将正式介绍执行方法调用的机制。</p><h4 id=\"N1086E\" class=\"ibm-h4\">包含参数和不含参数的方法调用</h4><p>要在对象上调用某个方法，需要使用对该对象的引用。方法调用语法包含：</p><ul class=\"ibm-bullet-list\"><li>对象引用</li><li>一个句点</li><li>方法名称</li><li>所有需要传递的参数</li></ul><p>不含参数的方法调用的语法为：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_415255\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">objectReference.someMethod();</code></div></div></td></tr></tbody></table></div></div></div><p>以下是一个示例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_628745\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">p.getName();</code></div></div></td></tr></tbody></table></div></div></div><p>包含参数的方法调用的语法为：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_139449\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">objectReference.someOtherMethod(parameter1, parameter2, ..., parameterN);</code></div></div></td></tr></tbody></table></div></div></div><p>以下是一个示例（设置&nbsp;<code>Person</code>&nbsp;的&nbsp;<code>Name</code>&nbsp;属性）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_236012\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">p.setName(\"Jane Q Author\");</code></div></div></td></tr></tbody></table></div></div></div><p>请记住，构造方法也是方法。而且您可使用空格和换行符来分隔参数。Java 编译器并不关心分隔方法。下面的两个方法调用是等效的：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_594845\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div></div></td></tr></tbody></table></div></div></div><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_701168\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">new Person(\"Joe Q Author\",// Name</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">42,&nbsp;&nbsp;&nbsp;&nbsp; // Age</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">173,&nbsp;&nbsp;&nbsp; // Height in cm</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">82,&nbsp;&nbsp;&nbsp;&nbsp; // Weight in kg</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"Brown\",// Eye Color</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"MALE\");// Gender</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，第二个构造方法调用中的注释使得下一个使用此代码的人更容易理解它。该开发人员一眼就能判断出每个参数的用途。</p><h4 id=\"N108A8\" class=\"ibm-h4\">嵌套的方法调用</h4><p>方法调用也可以嵌套：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_768696\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div></div></td></tr></tbody></table></div></div></div><p>在这里，您将&nbsp;<code>Person.class.getName()</code>&nbsp;的返回值传递给&nbsp;<code>getLogger()</code>&nbsp;方法。请记住，<code>getLogger()</code>&nbsp;方法调用是一个静态方法调用，所以它的语法稍微不同。（您不需要一个&nbsp;<code>Logger</code>&nbsp;引用来执行该调用；而是可以在调用的左侧使用类的名称。）</p><p>这就是方法调用。</p><h2 id=\"N108C3\" class=\"ibm-h2\">字符串和运算符</h2><p>目前为止，教程中介绍了许多&nbsp;<code>String</code>&nbsp;类型的变量，但没有进行太多解释。您在这一节中会进一步了解字符串，还会了解何时和如何使用运算符。</p><h3 id=\"N108CC\" class=\"ibm-h3\">字符串</h3><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p>在 C 语言中，处理字符串需要花费很大精力，因为字符串是以 null 结尾的数组，其中包含必须处理的 8 位字符。（在字符串方面，与 C 语言最接近的 Java 代码是&nbsp;<code>char</code>&nbsp;原语数据类型，它可以包含单个 Unicode 字符，比如<em>a</em>。）</p></div><p>在 Java 语言中，字符串是&nbsp;<code>String</code>&nbsp;类型的一级对象，包含一些可帮助您处理它们的方法。</p><p>以下是两种创建字符串的方法，我们使用创建一个名为&nbsp;<code>greeting</code>&nbsp;且值为&nbsp;<code>hello</code>&nbsp;的&nbsp;<code>String</code>&nbsp;实例为例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_901213\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">greeting = new String(\"hello\");</code></div></div></td></tr></tbody></table></div></div></div><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_688996\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String greeting = \"hello\";</code></div></div></td></tr></tbody></table></div></div></div><p>因为&nbsp;<code>String</code>&nbsp;是一级对象，所以可使用&nbsp;<code>new</code>&nbsp;实例化它们。将一个&nbsp;<code>String</code>&nbsp;类型的变量设置为字符串字面常量具有相同的结果，因为 Java 语言会创建一个&nbsp;<code>String</code>&nbsp;对象来保存字面常量，然后将该对象分配给该实例变量。</p><h4 id=\"N10900\" class=\"ibm-h4\">串联字符串</h4><p>可以使用&nbsp;<code>String</code>&nbsp;做许多事情，该类有许多很有帮助的方法。甚至还没有使用方法，您就已经通过串联（或组合）两个<code>String</code>，在&nbsp;<code>Person</code>&nbsp;类的&nbsp;<code>testPerson()</code>&nbsp;方法中做了一些有趣的事情：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_199282\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div></div></td></tr></tbody></table></div></div></div><p>加号 (<code>+</code>) 在 Java 语言中是串联&nbsp;<code>String</code>&nbsp;的简单表示。（在循环内执行这种串联会影响性能，但目前已不需要担心这一点。）</p><h4 id=\"N1091F\" class=\"ibm-h4\">串联练习</h4><p>现在，可以尝试在&nbsp;<code>Person</code>&nbsp;类内串联两个&nbsp;<code>String</code>&nbsp;字符串。此刻您有一个&nbsp;<code>name</code>&nbsp;实例变量，但有一个&nbsp;<code>firstName</code>&nbsp;和&nbsp;<code>lastName</code>&nbsp;会让应用程序更接近真实的业务应用程序。然后，您可以在另一个对象请求&nbsp;<code>Person</code>&nbsp;的全名时串联它们。</p><p>返回到 Eclipse 项目，首先添加新实例变量（放在源代码中目前定义&nbsp;<code>name</code>&nbsp;的相同位置）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_983879\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">//private String name;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">private String firstName;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">private String lastName;</code></div></div></td></tr></tbody></table></div></div></div><p>注释掉&nbsp;<code>name</code>&nbsp;定义；您不再需要它，因为已将它替换为&nbsp;<code>firstName</code>&nbsp;和&nbsp;<code>lastName</code>。</p><h4 id=\"N1094C\" class=\"ibm-h4\">链式方法调用</h4><p>现在，告诉 Eclipse 代码生成器生成&nbsp;<code>firstName</code>&nbsp;和&nbsp;<code>lastName</code>&nbsp;的 getter 和 setter（如有必要，请参考前面的“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#yourfirst\">您的第一个 Java 类</a>”部分）。然后删除&nbsp;<code>setName()</code>&nbsp;和&nbsp;<code>getName()</code>&nbsp;方法，添加一个新的&nbsp;<code>getFullName()</code>&nbsp;方法，使代码类似于：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_203288\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public String getFullName() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return getFirstName().concat(\" \").concat(getLastName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>此代码演示了方法调用的<em>链接</em>。链接是一种经常用于不可变对象（比如&nbsp;<code>String</code>）的技术，在链接中，修改一个不可变对象总是返回修改后的对象（但不会更改原始对象）。然后，您可以在返回的已更改的值上进行操作。</p><h3 id=\"N10972\" class=\"ibm-h3\">运算符</h3><p>您已看到，Java 语言使用&nbsp;<code>=</code>&nbsp;运算符将值赋给变量。正如您可能期望的，Java 语言可执行算术运算，而且它也使用运算符实现此目的。现在，我将简要介绍一下随着您技能的提升需要掌握的一些 Java 语言运算符。</p><p>Java 语言使用两种类型的运算符：</p><ul class=\"ibm-bullet-list\"><li><em>一元</em>&nbsp;(unary)：只需一个操作数。</li><li><em>二元</em>&nbsp;(binary)：需要两个操作数。</li></ul><p>表 2 总结了 Java 语言的算术运算符：</p><h5 id=\"table2\" class=\"ibm-h5\">表 2. Java 语言的算术运算符</h5><div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table display dataTable no-footer dtr-inline ibm-widget-processed layui-table\" data-widget=\"datatable\" id=\"DataTables_Table_0\" role=\"grid\"><thead xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\"><th scope=\"col\" class=\"sorting_disabled\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">运算符</th><th scope=\"col\" class=\"sorting_disabled\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">用法</th><th scope=\"col\" class=\"sorting_disabled\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">说明</th></tr></thead><tbody xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>+</code></td><td><code>a + b</code></td><td>将&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;相加</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>+</code></td><td><code>+a</code></td><td>如果&nbsp;<code>a</code>&nbsp;为&nbsp;<code>byte</code>、<code>short</code>&nbsp;或&nbsp;<code>char</code>，则将它升级为&nbsp;<code>int</code></td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>-</code></td><td><code>a - b</code></td><td>从&nbsp;<code>a</code>&nbsp;中减去&nbsp;<code>b</code></td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>-</code></td><td><code>-a</code></td><td>求&nbsp;<code>a</code>&nbsp;的算术负数</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>*</code></td><td><code>a * b</code></td><td>将&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;相乘</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>/</code></td><td><code>a / b</code></td><td>将&nbsp;<code>a</code>&nbsp;除以&nbsp;<code>b</code></td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>%</code></td><td><code>a % b</code></td><td>返回将&nbsp;<code>a</code>&nbsp;除以&nbsp;<code>b</code>&nbsp;的余数（取模运算符）</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>++</code></td><td><code>a++</code></td><td>将&nbsp;<code>a</code>&nbsp;递增 1；计算递增之前&nbsp;<code>a</code>&nbsp;的值</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>++</code></td><td><code>++a</code></td><td>将&nbsp;<code>a</code>&nbsp;递增 1；计算递增之后&nbsp;<code>a</code>&nbsp;的值</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>--</code></td><td><code>a--</code></td><td>将&nbsp;<code>a</code>&nbsp;递减 1；计算递减之前&nbsp;<code>a</code>&nbsp;的值</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>--</code></td><td><code>--a</code></td><td>将&nbsp;<code>a</code>&nbsp;递减 1；计算递减之后&nbsp;<code>a</code>&nbsp;的值</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>+=</code></td><td><code>a += b</code></td><td><code>a = a + b</code>&nbsp;的简写</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>-=</code></td><td><code>a -= b</code></td><td><code>a = a - b</code>&nbsp;的简写</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>*=</code></td><td><code>a *= b</code></td><td><code>a = a * b</code>&nbsp;的简写</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>%=</code></td><td><code>a %= b</code></td><td><code>a = a % b</code>&nbsp;的简写</td></tr></tbody></table></div><h5 id=\"N10A72\" class=\"ibm-h5\">其他运算符</h5><p>除了表 2 中的运算符之外，还可以看到其他一些在 Java 语言中称为运算符的符号，包括：</p><ul class=\"ibm-bullet-list\"><li>句点 (<code>.</code>)，它限定了包的名称并调用方法</li><li>圆括号 (<code>()</code>)，它限定了一个方法的逗号分隔的参数列表</li><li><code>new</code>，（后跟一个构造方法名称时）它实例化了一个对象</li></ul><p>Java 语言语法也包含一些专门用于条件编程的运算符—即根据不同输入提供不同响应的程序。下一节将介绍这些运算符。</p><h2 id=\"N10A8C\" class=\"ibm-h2\">条件运算符和控制语句</h2><p>在本节中，将了解可用来告诉 Java 程序，您希望它们根据不同的输入来执行何种操作的各种语句和运算符。</p><h3 id=\"N10A92\" class=\"ibm-h3\">关系和条件运算符</h3><p>Java 语言提供了可在代码中用来制定决策的运算符和控制语句。代码中的决策常常以一个&nbsp;<em>Boolean 表达式</em>开始 — 也即一个计算为&nbsp;<code>true</code>&nbsp;或&nbsp;<code>false</code>&nbsp;的表达式。这些表达式使用<em>关系运算符</em>（将一个操作数或表达式与另一个比较）和<em>条件运算符</em>。</p><p>表 3 列出了 Java 语言的关系和条件运算符。</p><h5 id=\"table3\" class=\"ibm-h5\">表 3. 关系和条件运算符</h5><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table layui-table\"><thead xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><th scope=\"col\" style=\"text-align: left;\">运算符</th><th scope=\"col\" style=\"text-align: left;\">用法</th><th scope=\"col\" style=\"text-align: left;\">返回 true 的条件……</th></tr></thead><tbody xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><td><code>&gt;</code></td><td><code>a &gt; b</code></td><td><code>a</code>&nbsp;大于&nbsp;<code>b</code></td></tr><tr><td><code>&gt;=</code></td><td><code>a &gt;= b</code></td><td><code>a</code>&nbsp;大于或等于&nbsp;<code>b</code></td></tr><tr><td><code>&lt;</code></td><td><code>a &lt; b</code></td><td><code>a</code>&nbsp;小于&nbsp;<code>b</code></td></tr><tr><td><code>&lt;=</code></td><td><code>a &lt;= b</code></td><td><code>a</code>&nbsp;小于或等于&nbsp;<code>b</code></td></tr><tr><td><code>==</code></td><td><code>a == b</code></td><td><code>a</code>&nbsp;等于&nbsp;<code>b</code></td></tr><tr><td><code>!=</code></td><td><code>a != b</code></td><td><code>a</code>&nbsp;不等于&nbsp;<code>b</code></td></tr><tr><td><code>&amp;&amp;</code></td><td><code>a &amp;&amp; b</code></td><td>如果&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;都为 true，则有条件地计算&nbsp;<code>b</code>（如果&nbsp;<code>a</code>&nbsp;为 false，则不计算&nbsp;<code>b</code>）</td></tr><tr><td><code>||</code></td><td><code>a || b</code></td><td>如果&nbsp;<code>a</code>&nbsp;或&nbsp;<code>b</code>&nbsp;为 true，则有条件地计算&nbsp;<code>b</code>（如果&nbsp;<code>a</code>&nbsp;为 true，则不计算&nbsp;<code>b</code>）</td></tr><tr><td><code>！</code></td><td><code>!a</code></td><td><code>a</code>&nbsp;为 false</td></tr><tr><td><code>&amp;</code></td><td><code>a &amp; b</code></td><td>如果&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;都为 true，则始终计算&nbsp;<code>b</code></td></tr><tr><td><code>|</code></td><td><code>a | b</code></td><td>如果&nbsp;<code>a</code>&nbsp;或&nbsp;<code>b</code>&nbsp;为 true，则始终计算&nbsp;<code>b</code></td></tr><tr><td><code>^</code></td><td><code>a ^ b</code></td><td><code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;不同</td></tr></tbody></table><h3 id=\"N10B79\" class=\"ibm-h3\">if 语句</h3><p>有了大量运算符后，是时候使用它们了。下面这段代码展示了在将一种逻辑添加到&nbsp;<code>Person</code>&nbsp;对象的&nbsp;<code>getHeight()</code>&nbsp;访问器时发生的情况：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_249023\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public int getHeight() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int ret = height;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// If locale of the computer this code is running on is U.S.,</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (Locale.getDefault().equals(Locale.US))</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret /= 2.54;// convert from cm to inches</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果当前地区是在美国（未使用公制），将&nbsp;<code>height</code>（以厘米为单位）的内部值转换为英寸可能更有意义。这个（人为设计的）示例演示了&nbsp;<code>if</code>&nbsp;语句的使用，该语句计算圆括号中的一个 Boolean 表达式。如果该表达式计算为&nbsp;<code>true</code>，则程序执行下一个语句。</p><p>在本例中，只有在运行代码的计算机的&nbsp;<code>Locale</code>&nbsp;是&nbsp;<code>Locale.US</code>&nbsp;时，才需要执行一条语句。如果需要执行多条语句，可使用花括号来形成一条<em>复合语句</em>。复合语句将许多语句组合成一条语句 —而且复合语句也可包含其他复合语句。</p><h3 id=\"N10BA2\" class=\"ibm-h3\">变量范围</h3><p>Java 应用程序中的每个变量都拥有<em>范围</em>或本地化的名称空间，在该范围内，可以在代码中通过名称访问该变量。在该空间外，该变量就位于<em>范围之外</em>，如果尝试访问它，则会获得编译错误。Java 语言中的范围级别由声明变量的位置来定义，如清单 7 所示。</p><h5 id=\"listing7\" class=\"ibm-h5\">清单 7. 变量范围</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_661201\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class SomeClass {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String someClassVariable;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void someMethod(String someParameter) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String someLocalVariable = \"Hello\";</code></div><div class=\"line number5 index4 alt2\">&nbsp;</div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (true) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String someOtherLocalVariable = \"Howdy\";</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">someClassVariable = someParameter; // legal</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">someLocalVariable = someClassVariable; // also legal</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">someOtherLocalVariable = someLocalVariable;// Variable out of scope! </code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void someOtherMethod() {</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">someLocalVariable = \"Hello there\";// That variable is out of scope! </code></div><div class=\"line number15 index14 alt2\">&nbsp;</div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在&nbsp;<code>SomeClass</code>&nbsp;中，所有实例（即非静态）方法都可以访问&nbsp;<code>someClassVariable</code>。<code>someParameter</code>&nbsp;在&nbsp;<code>someMethod</code>&nbsp;内是可见的，但在该方法外不可见，<code>someLocalVariable</code>&nbsp;也是如此。在&nbsp;<code>if</code>&nbsp;代码块内，声明了&nbsp;<code>someOtherLocalVariable</code>，在&nbsp;<code>if</code>&nbsp;代码块外，它就超出了范围。出于这个原因，我们可以说 Java 拥有<em>代码块范围</em>，因为代码块（由&nbsp;<code>{</code>&nbsp;和&nbsp;<code>}</code>&nbsp;限定）定义了范围边界。</p><p>范围有许多规则，<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing7\">清单 7</a>&nbsp;给出了最常用的规则。请花几分钟熟悉一下它们。</p><h3 id=\"N10BDF\" class=\"ibm-h3\">else 语句</h3><p>有时在程序的控制流中，您希望仅在一个特定表达式未计算为&nbsp;<code>true</code>&nbsp;时执行操作。这时使用&nbsp;<code>else</code>&nbsp;将很方便：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_92291\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public int getHeight() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int ret;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (gender.equals(\"MALE\"))</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = height + 2;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">else {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = height;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger.getLogger(\"Person\").info(\"Being honest about height...\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>else</code>&nbsp;语句的原理与&nbsp;<code>if</code>&nbsp;相同，因为程序仅执行它遇到的下一条语句。在本例中，两条语句分组到一个复合语句中（请注意花括号），然后由程序执行。</p><p>也可以使用&nbsp;<code>else</code>&nbsp;执行一次额外的&nbsp;<code>if</code>&nbsp;检查：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_384673\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">if (conditional) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Block 1</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">} else if (conditional2) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Block 2</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">} else if (conditional3) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Block 3</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">} else {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Block 4</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">} // End</code></div></div></td></tr></tbody></table></div></div></div><p>如果&nbsp;<code><em>conditional</em></code>&nbsp;计算为&nbsp;<code>true</code>，则执行&nbsp;<code><em>Block 1</em></code>，程序跳到最后一个花括号（通过&nbsp;<code>// End</code>&nbsp;表示）之后的语句。如果&nbsp;<code><em>conditional</em></code><span>未</span>计算为&nbsp;<code>true</code>，则计算&nbsp;<code><em>conditional2</em></code>。如果&nbsp;<code><em>conditional2</em></code>&nbsp;为 true，则计算&nbsp;<code><em>Block 2</em></code>，并且程序跳到最后一个花括号之后的语句。如果&nbsp;<code><em>conditional2</em></code>&nbsp;不为 true，则程序前进到&nbsp;<code><em>conditional3</em></code>，依此类推。只有在所有 3 个条件都失败时，才执行&nbsp;<code><em>Block 4</em></code>。</p><h3 id=\"N10C34\" class=\"ibm-h3\">三元运算符</h3><p>Java 语言提供了一个方便的运算符来执行简单的&nbsp;<code>if</code>&nbsp;/&nbsp;<code>else</code>&nbsp;语句检查。这个运算符的语法是：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_815275\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">(conditional) ? statementIfTrue : statementIfFalse;</code></div></div></td></tr></tbody></table></div></div></div><p>如果&nbsp;<code><em>conditional</em></code>&nbsp;计算为&nbsp;<code>true</code>，则执行&nbsp;<code><em>statementIfTrue</em></code>；否则执行&nbsp;<code><em>statementIfFalse</em></code>。每条语句都不允许使用复合语句形式。</p><p>在获知如果条件计算为&nbsp;<code>true</code>，需要执行一条语句，如果不为 true，则执行另一条语句时，使用三元运算符很方便。三元运算符通常用于初始化一个变量（比如一个返回值），类似这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_411294\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public int getHeight() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return (gender.equals(\"MALE\")) ? (height + 2) : height;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>问号后面的圆括号不是必需的，但它们使代码变得更可容易理解。</p><h2 id=\"N10C61\" class=\"ibm-h2\">循环</h2><p>除了能够对程序应用各种条件之外，还可以根据各种&nbsp;<code>if</code>/<code>then</code>&nbsp;场景得到不同的结果，您有时还想让代码反复执行同一件事，直到作业完成。在本节中，将了解用于迭代代码或多次执行代码的构造：</p><h3 id=\"N10C6D\" class=\"ibm-h3\">什么是循环？</h3><p>循环是一种编程构造，它在满足某个特定条件（或某组条件）时反复执行。例如，您可能要求程序读取数据文件中的所有记录，或者依次处理数组中的每个元素。（下一节将介绍数组。）</p><p>3 种循环构造使迭代代码或多次执行代码成为可能：</p><ul class=\"ibm-bullet-list\"><li><code>for</code>&nbsp;循环</li><li><code>while</code>&nbsp;循环</li><li><code>do</code>...<code>while</code>&nbsp;循环</li></ul><h4 id=\"N10C86\" class=\"ibm-h4\">for 循环</h4><p>Java 语言中的基本循环构造是&nbsp;<code>for</code>&nbsp;语句。可以使用&nbsp;<code>for</code>&nbsp;语句迭代一个值范围，以确定执行多少次循环。<code>for</code>&nbsp;循环的抽象语法是：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_401132\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">for (initialization; loopWhileTrue; executeAtBottomOfEachLoop) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">statementsToExecute</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在循环的<em>开头</em>，执行初始化语句（多个初始化语句可使用逗号分开）。 只要&nbsp;<code><em>loopWhileTrue</em></code>（一个必须计算为&nbsp;<code>true</code>&nbsp;或&nbsp;<code>false</code>的 Java 条件表达式）为 true，就会执行该循环。在循环的<em>底部</em>，执行&nbsp;<code><em>executeAtBottomOfEachLoop</em></code>。</p><p>例如，如果想让清单 8 中的&nbsp;<code>main()</code>&nbsp;方法中的代码执行 3 次，可使用一个&nbsp;<code>for</code>&nbsp;循环。</p><h5 id=\"listing8\" class=\"ibm-h5\">清单 8. 一个&nbsp;<code>for</code>&nbsp;循环</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_93079\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2 highlighted\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2 highlighted\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number3 index2 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; 3; aa++) </code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number5 index4 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Loop executing iteration# \" + aa);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+ p.getGender());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在清单 8 的开头，局部变量&nbsp;<code>aa</code>&nbsp;初始化为 0。此语句仅在初始化该循环时执行一次。然后，该循环继续执行 3 次，每次都将&nbsp;<code>aa</code>递增 1。</p><p>在下一节将会看到，可使用一种替代性的&nbsp;<code>for</code>&nbsp;循环语法来循环执行实现&nbsp;<code>Iterable</code>&nbsp;接口的构造（比如数组和其他 Java 实用程序类）。就现在而言，只需注意<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing8\">清单 8</a>&nbsp;中的&nbsp;<code>for</code>&nbsp;循环语法的用法。</p><h4 id=\"N10CD9\" class=\"ibm-h4\">while 循环</h4><p><code>while</code>&nbsp;循环的语法是：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_75969\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">while (condition) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">statementsToExecute</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>您可能已经猜到，如果&nbsp;<em>condition</em>&nbsp;计算为&nbsp;<code>true</code>，则执行该循环。在每个迭代的顶部（即执行任何语句之前），计算该条件。如果该条件计算为&nbsp;<code>true</code>，则执行循环。因此，如果一个&nbsp;<code>while</code>&nbsp;循环的条件表达式至少有一次未计算为 true，则不能执行该循环。</p><p>再次看看<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing8\">清单 8</a>&nbsp;中的&nbsp;<code>for</code>&nbsp;循环。作为对比，清单 9 使用了一个&nbsp;<code>while</code>&nbsp;循环来获取同样的结果。</p><h5 id=\"listing9\" class=\"ibm-h5\">清单 9. 一个&nbsp;<code>while</code>&nbsp;循环</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_758766\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2 highlighted\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1 highlighted\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1 highlighted\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2 highlighted\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number3 index2 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int aa = 0;</code></div><div class=\"line number4 index3 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (aa &lt; 3) {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number6 index5 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Loop executing iteration# \" + aa);</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+ p.getGender());</code></div><div class=\"line number13 index12 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">aa++;</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如您所见，<code>while</code>&nbsp;循环需要做比&nbsp;<code>for</code>&nbsp;循环更多的工作。您必须初始化&nbsp;<code>aa</code>&nbsp;变量，还要记得在循环底部递增它。</p><h4 id=\"N10D15\" class=\"ibm-h4\">do...while 循环</h4><p>如果想要一个总是执行一次<em>然后</em>就检查它的条件表达式的循环，可以使用&nbsp;<code>do...while</code>&nbsp;循环，如清单 10 所示。</p><h5 id=\"listing10\" class=\"ibm-h5\">清单 10. 一个&nbsp;<code>do...while</code>&nbsp;循环</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_822364\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2 highlighted\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1 highlighted\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1 highlighted\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2 highlighted\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1 highlighted\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2 highlighted\"><code class=\"htmlscript plain\">int aa = 0;</code></div><div class=\"line number2 index1 alt1 highlighted\"><code class=\"htmlscript plain\">do {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number4 index3 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Loop executing iteration# \" + aa);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+ p.getGender());</code></div><div class=\"line number11 index10 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">aa++;</code></div><div class=\"line number12 index11 alt1 highlighted\"><code class=\"htmlscript plain\">} while (aa &lt; 3);</code></div></div></td></tr></tbody></table></div></div></div><p>条件表达式 (<code>aa &lt; 3</code>) 在循环结束前不会执行检查。</p><h3 id=\"N10D31\" class=\"ibm-h3\">循环终止</h3><p>有时，需要在条件表达式计算为&nbsp;<code>false</code>&nbsp;之前跳出（或<em>终止</em>）循环。如果在一个&nbsp;<code>String</code>&nbsp;数组中搜索某个特定值，而且只想找到它，并不关心数组的其他元素，则可能出现这种情况。对于想要跳出循环的情况，Java 语言提供了&nbsp;<code>break</code>&nbsp;语句，如清单 11 所示。</p><h5 id=\"listing11\" class=\"ibm-h5\">清单 11. 一条&nbsp;<code>break</code>&nbsp;语句</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_111330\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1 highlighted\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2 highlighted\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1 highlighted\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int aa = 0;</code></div><div class=\"line number4 index3 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (aa &lt; 3) {</code></div><div class=\"line number5 index4 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (aa == 1)</code></div><div class=\"line number6 index5 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">break;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Loop executing iteration# \" + aa);</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+ p.getGender());</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">aa++;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>break</code>&nbsp;语句跳转到它所在循环外的下一条可执行语句。</p><h3 id=\"N10D52\" class=\"ibm-h3\">循环继续</h3><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#listing11\">清单 11</a>&nbsp;中的（简化）示例中，您只想执行循环一次并跳出。也可以只跳过循环的一次迭代，但继续执行下一次循环。要实现此目标，需要使用&nbsp;<code>continue</code>&nbsp;语句，如清单 12 所示。</p><h5 id=\"listing12\" class=\"ibm-h5\">清单 12. 一条&nbsp;<code>continue</code>&nbsp;语句</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_513336\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2 highlighted\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1 highlighted\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Person.class.getName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int aa = 0;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (aa &lt; 3) {</code></div><div class=\"line number5 index4 alt2 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">aa++;</code></div><div class=\"line number6 index5 alt1 highlighted\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (aa == 2)</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">continue;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", \"MALE\");</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Loop executing iteration# \" + aa);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Name: \" + p.getName());</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Age:\"+ p.getAge());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Height (cm):\"+ p.getHeight());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Weight (kg):\"+ p.getWeight());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Eye Color:\"+ p.getEyeColor());</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Gender:\"+</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">p.getGender());</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在清单 12 中，跳过了循环的第二次迭代，但继续执行第三次迭代。例如，在处理记录并遇到一条您完全不想处理的记录时，使用&nbsp;<code>continue</code>&nbsp;就很方便。您可以跳过该记录并前进到下一条记录。</p><h2 id=\"N10D6F\" class=\"ibm-h2\">Java 集合</h2><p>大多数真实应用程序都会处理像文件、变量、来自文件的记录或数据库结果集这样的集合。Java 语言有一个复杂的集合框架，可以使用它创建和管理各种类型的对象集合。本节将介绍最常用的集合类并帮助您开始使用它们。</p><h3 id=\"N10D75\" class=\"ibm-h3\">数组</h3><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>备注</span>：本节的代码示例中的方括号是 Java 数组所需语法的一部分，<span>不是</span>可选元素的指示符。</p></div><p>大多数编程语言都包含<em>数组</em>的概念，用数组来保存一组元素，Java 语言也不例外。数组基本来讲是一个相同类型的元素的集合。</p><p>可以通过两种方式声明数组：</p><ul class=\"ibm-bullet-list\"><li>创建一个具有一定大小的数组，这个大小在数组的整个生存期中是固定的。</li><li>创建一个具有一组初始值的数组。这个集合的大小决定了数组的大小 —它的大小恰好够容纳所有这些值，而且它的大小在数组的整个生存期中是固定的。</li></ul><h4 id=\"N10D90\" class=\"ibm-h4\">声明一个数组</h4><p>一般而言，可以像这样声明一个数组：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_821973\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">new elementType [arraySize]</code></div></div></td></tr></tbody></table></div></div></div><p>可以通过两种方式创建一个整数元素数组。这条语句将创建一个拥有 5 个元素的空间的数组，但它是空的：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_787594\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// creates an empty array of 5 elements:</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">int[] integers = new int[5];</code></div></div></td></tr></tbody></table></div></div></div><p>这条语句创建该数组并一次性初始化它：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_675622\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// creates an array of 5 elements with values:</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">int[] integers = new int[] { 1, 2, 3, 4, 5 };</code></div></div></td></tr></tbody></table></div></div></div><p>或</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_477795\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// creates an array of 5 elements with values (without the new operator):</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">int[] integers = { 1, 2, 3, 4, 5 };</code></div></div></td></tr></tbody></table></div></div></div><p>初始值放在花括号内，用逗号分隔。</p><p>另一种创建数组的方法是先创建它，然后编写一个循环来初始化它：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_27244\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">int[] integers = new int[5];</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; integers.length; aa++) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">integers[aa] = aa+1;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>前面的代码声明了一个可容纳 5 个元素的整数数组。如果尝试在该数组中放入多于 5 个元素，Java 运行时将会抛出一个<em>异常</em>。您将在<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-apachefunctor/index.html\">第 2 部分</a>中了解异常和如何处理它们。</p><h4 id=\"N10DC3\" class=\"ibm-h4\">加载数组</h4><p>要加载数组，需要循环从 1 一直到数组长度的整数（可以在数组上调用&nbsp;<code>.length</code>&nbsp;来获取它的长度— 稍后会更详细地介绍相关内容）。在本例中，循环在到达 5 时停止。</p><p>加载数组后，可以像之前一样访问它：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_623854\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; integers.length; aa++) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"This little integer\'s value is: \" + integers[aa]);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>此语法也是有效的，而且（因为它更容易使用）本节将全部使用此语法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_517509\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">for (int i : integers) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"This little integer\'s value is: \" + i);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10DDD\" class=\"ibm-h4\">元素索引</h4><p>可将数组想成一系列的桶，每个桶中放入一个某种类型的元素。每个桶通过一个元素<em>索引</em>来访问：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_600150\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">element = arrayName [elementIndex];</code></div></div></td></tr></tbody></table></div></div></div><p>要访问一个元素，需要数组的引用（它的名称）和包含您想要访问的元素的索引。</p><h4 id=\"N10DEE\" class=\"ibm-h4\">length 属性</h4><p>每个数组都有一个&nbsp;<code>length</code>&nbsp;属性，该属性具有&nbsp;<code>public</code>&nbsp;可视性，可用于确定可将多少个元素放入该数组中。要访问此属性，可使用数组引用、一个句点 (.) 和关键字 length，就象这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_280568\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">int arraySize = arrayName.length;</code></div></div></td></tr></tbody></table></div></div></div><p>Java 语言中的数组<em>从 0 开始建立索引</em>。也就是说，对于所有数组，数组中的第一个元素始终位于&nbsp;<code><em>arrayName</em>[0]</code>，最后一个元素位于&nbsp;<code><em>arrayName</em>[<em>arrayName</em>.length - 1]</code>。</p><h4 id=\"N10E12\" class=\"ibm-h4\">一个对象数组</h4><p>您已看到数组如何容纳原语类型，但值得一提的是，它们也可以容纳对象。创建一个&nbsp;<code>java.lang.Integer</code>&nbsp;对象数组与创建一个原语类型数组没有太多区别，可通过两种方式来创建它：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_764292\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// creates an empty array of 5 elements: </code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Integer[] integers = new Integer[5];</code></div></div></td></tr></tbody></table></div></div></div><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_461148\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// creates an array of 5 elements with values: </code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Integer[] integers = new Integer[] {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Integer.valueOf(1),</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">Integer.valueOf(2),</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">Integer.valueOf(3),</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">Integer.valueOf(4),</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">Integer.valueOf(5)</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">};</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N10E26\" class=\"ibm-h3\">装箱和拆箱</h3><p>Java 语言中的每种原语类型都有一个对应的 JDK 类，如表 4 所示。</p><h5 id=\"table4\" class=\"ibm-h5\">表 4. 原语和对应的 JDK 类</h5><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table layui-table\"><thead xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><th scope=\"col\" style=\"text-align: left;\">原语</th><th scope=\"col\" style=\"text-align: left;\">对应的 JDK 类</th></tr></thead><tbody xmlns:dw=\"http://www.ibm.com/developerWorks/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr><td><code>boolean</code></td><td><code>java.lang.Boolean</code></td></tr><tr><td><code>byte</code></td><td><code>java.lang.Byte</code></td></tr><tr><td><code>char</code></td><td><code>java.lang.Character</code></td></tr><tr><td><code>short</code></td><td><code>java.lang.Short</code></td></tr><tr><td><code>int</code></td><td><code>java.lang.Integer</code></td></tr><tr><td><code>long</code></td><td><code>java.lang.Long</code></td></tr><tr><td><code>float</code></td><td><code>java.lang.Float</code></td></tr><tr><td><code>double</code></td><td><code>java.lang.Double</code></td></tr></tbody></table><p>每个 JDK 类都提供了相应方法来解析它的内部表示，并将其转换为相应的原语类型。例如，下面这段代码将十进制值 238 转换为一个&nbsp;<code>Integer</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_989207\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">int value = 238;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Integer boxedValue = Integer.valueOf(value);</code></div></div></td></tr></tbody></table></div></div></div><p>此技术称为<em>装箱</em>，因为您将原语放在一个包装器或箱子中。</p><p>类似地，要将&nbsp;<code>Integer</code>&nbsp;表示转换为对应的&nbsp;<code>int</code>&nbsp;类，可以对它进行<em>拆箱</em>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_243988\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Integer boxedValue = Integer.valueOf(238);</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">int intValue = boxedValue.intValue();</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10E95\" class=\"ibm-h4\">自动装箱和自动拆箱</h4><p>严格来讲，不需要显式对原语进行装箱和拆箱。 可以使用 Java 语言的自动装箱和自动拆箱特性：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_182697\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">int intValue = 238;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Integer boxedValue = intValue;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">//</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">intValue = boxedValue;</code></div></div></td></tr></tbody></table></div></div></div><p>但是，建议避免使用自动装箱和自动拆箱，因为它们可能导致代码可读性问题。装箱和拆箱代码段中的代码比自动装箱的代码更一目了然，因此更容易阅读；为此投入额外的工作是值得的。</p><h4 id=\"N10EA3\" class=\"ibm-h4\">解析和转换装箱的类型</h4><p>您已经了解了如何获取一个装箱的类型，但如何才能将一个您怀疑拥有装箱类型的数字&nbsp;<code>String</code>&nbsp;解析到它的正确箱子中呢？JDK 包装器类也拥有实现此目标的方法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_494009\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String characterNumeric = \"238\";</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Integer convertedValue = Integer.parseInt(characterNumeric);</code></div></div></td></tr></tbody></table></div></div></div><p>还可以将 JDK 包装器类型的内容转换为&nbsp;<code>String</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_858262\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Integer boxedValue = Integer.valueOf(238);</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">String characterNumeric = boxedValue.toString();</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，在&nbsp;<code>String</code>&nbsp;表达式中使用串联运算符时（您已在对&nbsp;<code>Logger</code>&nbsp;的调用中看到过），原语类型已自动装箱，而且包装器类型会自动在它们之上调用&nbsp;<code>toString()</code>。非常方便。</p><h3 id=\"N10EC7\" class=\"ibm-h3\">List</h3><p><code>List</code>&nbsp;是一种有序集合，也称为<em>序列</em>。因为&nbsp;<code>List</code>&nbsp;是有序的，所以您能够完全控制将列表项放入&nbsp;<code>List</code>&nbsp;中的何处。Java&nbsp;<code>List</code>&nbsp;集合只能包含对象（不能包含像&nbsp;<code>int</code>&nbsp;这样的原语类型），而且它为其行为方式定义了严格的契约。</p><p><code>List</code>&nbsp;是一个接口，所以不能直接将其实例化。（您将在<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-apachefunctor/index.html\">第 2 部分</a>中了解接口。）这里将使用它的最常用实现&nbsp;<code>ArrayList</code>。可通过两种方式声明它。第一种方式使用了显式语法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_979755\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; listOfStrings = new ArrayList&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt;();</code></div></div></td></tr></tbody></table></div></div></div><p>第二种方式使用了“菱形”运算符（在 JDK 7 中引入）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_393510\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; listOfStrings = new ArrayList&lt;&gt;();</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，<code>ArrayList</code>&nbsp;实例化过程中没有指定对象类型。这是因为表达式右侧的类的类型必须与左侧的类型匹配。在本教程的剩余部分中，两种类型都会用到，因为您可能在实践中看到这两种用法。</p><p>请注意，我将&nbsp;<code>ArrayList</code>&nbsp;对象赋给了一个&nbsp;<code>List</code>&nbsp;类型的变量。在 Java 编程中，可以将一种类型的变量赋给另一种类型的变量，只要被赋值的变量是赋值变量所实现的超类或接口。在后面的一节中，将进一步介绍这些变量赋值类型的约束规则。</p><h4 id=\"N10F03\" class=\"ibm-h4\">正式类型</h4><p>前面的代码段中的&nbsp;<code>&lt;Object&gt;</code>&nbsp;称为<em>正式类型</em>。<code>&lt;Object&gt;</code>&nbsp;告诉编译器，这个&nbsp;<code>List</code>&nbsp;包含一个&nbsp;<code>Object</code>&nbsp;类型的集合，这意味着您可以将喜欢的任何实体放在&nbsp;<code>List</code>&nbsp;中。</p><p>如果您想对能或不能放入&nbsp;<code>List</code>&nbsp;中的实体施加更严格的限制，可通过不同方式定义该正式类型：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_400901\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Person</code><code class=\"htmlscript plain\">&gt; listOfPersons = new ArrayList&lt;</code><code class=\"htmlscript plain\">Person</code><code class=\"htmlscript plain\">&gt;();</code></div></div></td></tr></tbody></table></div></div></div><p>现在，您的&nbsp;<code>List</code>&nbsp;只能包含&nbsp;<code>Person</code>&nbsp;实例。</p><h4 id=\"N10F2E\" class=\"ibm-h4\">使用 List</h4><p>使用&nbsp;<code>List</code>— 通常像使用 Java 集合一样— 非常容易。以下是可对&nbsp;<code>List</code>&nbsp;执行的一些操作：</p><ul class=\"ibm-bullet-list\"><li>在&nbsp;<code>List</code>&nbsp;中放入列表项。</li><li>询问&nbsp;<code>List</code>&nbsp;目前有多大。</li><li>从&nbsp;<code>List</code>&nbsp;中获取列表项。</li></ul><p>要将列表项放在&nbsp;<code>List</code>&nbsp;中，请调用&nbsp;<code>add()</code>&nbsp;方法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_163409\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">listOfIntegers.add(Integer.valueOf(238));</code></div></div></td></tr></tbody></table></div></div></div><p><code>add()</code>&nbsp;方法将元素添加到&nbsp;<code>List</code>&nbsp;的末尾。</p><p>要询问&nbsp;<code>List</code>&nbsp;有多大，请调用&nbsp;<code>size()</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_778714\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">listOfIntegers.add(Integer.valueOf(238));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">l.info(\"Current List size: \" + listOfIntegers.size());</code></div></div></td></tr></tbody></table></div></div></div><p>要从&nbsp;<code>List</code>&nbsp;中检索某个项，请调用&nbsp;<code>get()</code>&nbsp;并向它传递您想要的项的索引：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_773575\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = new ArrayList&lt;&gt;();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">listOfIntegers.add(Integer.valueOf(238));</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">l.info(\"Item at index 0 is: \" listOfIntegers.get(0));</code></div></div></td></tr></tbody></table></div></div></div><p>在真实的应用程序中，<code>List</code>&nbsp;将包含记录或业务对象，您可能想要在处理过程中查看所有这些对象。如何以通用方式实现该目标？答案：您想要<em>迭代</em>该集合，可以这么做是因为&nbsp;<code>List</code>&nbsp;实现了&nbsp;<code>java.lang.Iterable</code>&nbsp;接口。</p><h3 id=\"N10F8A\" class=\"ibm-h3\">Iterable</h3><p>如果一个集合实现了&nbsp;<code>java.lang.Iterable</code>，那么它称为<em>迭代变量集合</em>。您可从一端开始，逐项地处理集合，直到处理完所有项。</p><p>在“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#loops\">循环</a>”部分，我简要提及了对实现&nbsp;<code>Iterable</code>&nbsp;接口的集合进行迭代的特殊语法。这里将更详细地介绍该语法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_130270\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">for (objectType varName : collectionReference) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Start using objectType (via varName) right away...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>之前的代码比较抽象，这是一个更切合实际的示例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_407780\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = obtainSomehow();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">for (Integer i : listOfIntegers) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Integer value is : \" + i);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>这个小代码段所做的事情与下面这个长代码段所做事情相同：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_227988\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = obtainSomehow();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; listOfIntegers.size(); aa++) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer I = listOfIntegers.get(aa);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Integer value is : \" + i);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>第一个代码段使用了简写语法：它没有&nbsp;<code>index</code>&nbsp;变量（在本例中为&nbsp;<code>aa</code>）要初始化，也没有调用&nbsp;<code>List</code>&nbsp;的&nbsp;<code>get()</code>&nbsp;方法。</p><p>因为&nbsp;<code>List</code>&nbsp;扩展了&nbsp;<code>java.util.Collection</code>（它实现了&nbsp;<code>可迭代</code>），所以可以使用简写语法来迭代任何&nbsp;<code>List</code>。</p><h3 id=\"N10FCF\" class=\"ibm-h3\">Set</h3><p><code>Set</code>&nbsp;是一种集合构造，根据定义，它包含唯一的元素— 即没有重复项。<code>List</code>&nbsp;可包含同一个对象数百次，而&nbsp;<code>Set</code>&nbsp;只能包含某个特定实例一次。Java&nbsp;<code>Set</code>&nbsp;集合只能包含对象，而且它为其行为方式定义了严格的契约。</p><p>因为&nbsp;<code>Set</code>&nbsp;是一个接口，所以您不能直接将其实例化。我最喜欢的实现之一是&nbsp;<code>HashSet</code>，它易于使用且类似于&nbsp;<code>List</code>。</p><p>以下是可对&nbsp;<code>Set</code>&nbsp;执行的一些操作：</p><ul class=\"ibm-bullet-list\"><li>在&nbsp;<code>Set</code>&nbsp;中放入内容。</li><li>询问&nbsp;<code>Set</code>&nbsp;目前有多大。</li><li>从&nbsp;<code>Set</code>&nbsp;中获取内容。</li></ul><p><code>Set</code>&nbsp;的一个独特特征是，它可保证其元素的唯一性，但不关心元素的顺序。考虑以下代码：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_497736\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Set&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; setOfIntegers = new HashSet&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt;();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(10));</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(11));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(10));</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">for (Integer i : setOfIntegers) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Integer value is: \" + i);</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>您可能认为该&nbsp;<code>Set</code>&nbsp;中有 3 个元素，但它仅有两个，因为包含值&nbsp;<code>10</code>&nbsp;的&nbsp;<code>Integer</code>&nbsp;对象仅添加了一次。</p><p>请在迭代&nbsp;<code>Set</code>&nbsp;时注意此行为，如下所示：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_995707\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Set&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; setOfIntegers = new HashSet();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(10));</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(20));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(30));</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(40));</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">setOfIntegers.add(Integer.valueOf(50));</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">for (Integer i : setOfIntegers) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Integer value is : \" + i);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>对象的输出顺序可能与添加顺序不同，因为&nbsp;<code>Set</code>&nbsp;保证了唯一性，但不保证顺序。如果将前面的代码粘贴到&nbsp;<code>Person</code>&nbsp;类的&nbsp;<code>main()</code>方法中并运行它，将可以看到这个结果。</p><h3 id=\"N1102C\" class=\"ibm-h3\">Map</h3><p><code>Map</code>&nbsp;是一种方便的集合构造，可以使用它将一个对象（<em>键</em>）与另一个对象（<em>值</em>）相关联。可以想象到，<code>Map</code>&nbsp;的键必须是唯一的，而且可在以后使用它来检索值。Java&nbsp;<code>Map</code>&nbsp;集合只能包含对象，而且它为其行为方式定义了严格的契约。</p><p>因为&nbsp;<code>Map</code>&nbsp;是一个接口，所以不能直接将其实例化。我最喜欢的实现之一是&nbsp;<code>HashMap</code>。</p><p>可对&nbsp;<code>Map</code>&nbsp;执行的操作包括：</p><ul class=\"ibm-bullet-list\"><li>在&nbsp;<code>Map</code>&nbsp;中放入内容。</li><li>从&nbsp;<code>Map</code>&nbsp;中获取内容。</li><li>获取&nbsp;<code>Map</code>&nbsp;的键&nbsp;<code>Set</code>— 用于迭代它。</li></ul><p>要在&nbsp;<code>Map</code>&nbsp;中放入内容，需要拥有一个表示它的键的对象和一个表示它的值的对象：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_72419\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public Map&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">, Integer&gt; createMapOfIntegers() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Map&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">, Integer&gt; mapOfIntegers = new HashMap&lt;&gt;();</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">mapOfIntegers.put(\"1\", Integer.valueOf(1));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">mapOfIntegers.put(\"2\", Integer.valueOf(2));</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">mapOfIntegers.put(\"3\", Integer.valueOf(3));</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">mapOfIntegers.put(\"168\", Integer.valueOf(168));</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">return mapOfIntegers;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在这个示例中，<code>Map</code>&nbsp;包含&nbsp;<code>Integer</code>，采用一个&nbsp;<code>String</code>&nbsp;作为键，这恰好是它们的&nbsp;<code>String</code>&nbsp;表示。要检索某个特定的&nbsp;<code>Integer</code>&nbsp;值，需要它的&nbsp;<code>String</code>&nbsp;表示：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_362552\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">mapOfIntegers = createMapOfIntegers();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Integer oneHundred68 = mapOfIntegers.get(\"168\");</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N11085\" class=\"ibm-h3\">结合使用 Set 和 Map</h3><p>有时，您可能发现您拥有一个&nbsp;<code>Map</code>&nbsp;的引用，而且您想遍历它的整个内容集合。在这种情况下，需要&nbsp;<code>Map</code>&nbsp;的键的&nbsp;<code>Set</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_517257\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Set&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; keys = mapOfIntegers.keySet();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Logger l = Logger.getLogger(\"Test\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">for (String key : keys) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer&nbsp; value = mapOfIntegers.get(key);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Value keyed by \'\" + key + \"\' is \'\" + value + \"\'\");</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，在用于&nbsp;<code>Logger</code>&nbsp;调用时，会自动调用从&nbsp;<code>Map</code>&nbsp;检索的&nbsp;<code>Integer</code>&nbsp;的&nbsp;<code>toString()</code>&nbsp;方法。<code>Map</code>&nbsp;返回它的键的&nbsp;<code>Set</code>，因为&nbsp;<code>Map</code>拥有键，而且每个键是唯一的。 唯一性（而不是顺序）是&nbsp;<code>Set</code>&nbsp;的独特特征（这可以解释为什么没有&nbsp;<code>keyList()</code>&nbsp;方法）。</p><h2 id=\"N110B7\" class=\"ibm-h2\">归档 Java 代码</h2><p>现在您已经了解了如何编写 Java 应用程序，您可能想知道如何打包它们，以便其他开发人员可以使用它们，或者您想知道如何将其他开发人员的代码导入到您的应用程序中。本节将展示如何做。</p><h3 id=\"N110BD\" class=\"ibm-h3\">JAR</h3><p>JDK 附带了一个称为 JAR 的工具，它代表 Java Archive（Java 归档文件）。您可以使用此工具创建 JAR 文件。将代码打包到 JAR 文件中后，其他开发人员可将该 AJR 文件放入其项目中，并配置他们的项目来使用您的代码。</p><p>在 Eclipse 中创建 JAR 文件很简单。在您的工作区中，右键单击&nbsp;<code>com.makotojava.intro</code>&nbsp;包并单击&nbsp;<span>File &gt; Export</span>。您会看到如图 10 所示的对话框。选择&nbsp;<span>Java &gt; JAR file</span>&nbsp;并单击&nbsp;<span>Next</span>。</p><h5 id=\"fig10\" class=\"ibm-h5\">图 10. Export 对话框</h5><p><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/figure10.png\" class=\"ibm-downsize\" alt=\"Eclipse 导出对话框的屏幕截图\" height=\"551\" width=\"527\"></p><p>打开下一个对话框时，浏览到您想要存储 JAR 文件的位置，并将该文件命名为您喜欢的名称。.jar 扩展名是默认扩展名，建议使用它。单击&nbsp;<span>Finish</span>。</p><p>您会在您选择的位置上看到您的 JAR 文件。如果将该 JAR 放在 Eclipse 中的构建路径中，可以从您的代码中使用该文件中的类。接下来您会看到，这么做也很容易。</p><h4 id=\"N110E3\" class=\"ibm-h4\">使用第三方应用程序</h4><p>JDK 功能全面，但它无法满足编写良好 Java 代码的所有需求。随着越来越熟悉 Java 应用程序的编写，您可能想使用越来越多的第三方应用程序来支持您的代码。Java 开源社区提供了许多库来帮助填补这些空白。</p><p>例如，假设您想要使用&nbsp;<a href=\"https://commons.apache.org/proper/commons-lang/\">Apache Commons Lang</a>，这是一个处理核心 Java 类的 JDK 替换库。Commons Lang 提供的类可帮助处理数组，创建随机数，并执行字符串操作。</p><p>假设您已经下载了 Commons Lang，将它存储在一个 JAR 文件中。要使用这些类，第一步操作是在项目中创建一个 lib 目录并将该 JAR 文件放入其中：</p><ol><li>在 Eclipse Project Explorer 视图中右键单击 Intro 根文件夹。</li><li>单击&nbsp;<span>New &gt; Folder</span>&nbsp;并将该文件夹命名为&nbsp;<code>lib</code>。</li><li>单击&nbsp;<span>Finish</span>。</li></ol><p>新文件夹显示在与 src 相同的级别上。现在将 Commons Lang JAR 文件复制到您的新 lib 目录中。在本示例中，该文件名为 commons-lang3-3.4.jar。（我们通常会在 JAR 文件的命名中包含版本号，在本例中为 3.4。）</p><p>现在您只需告诉 Eclipse 将 commons-lang3-3.4.jar 文件中的类包含到您的项目中：</p><ol><li>在 Package Explorer 中，选择 lib 文件夹，右键单击并选择&nbsp;<span>Refresh</span>。</li><li>确认 lib 文件夹中显示了 JAR：<img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/commons-lang.png\" class=\"ibm-downsize\" alt=\"刷新后的 lib 文件夹的屏幕截图\" height=\"302\" width=\"380\"></li><li>右键单击 commons-lang3-3.4 并选择&nbsp;<span>Build Path &gt; Add to Build Path</span>。</li></ol><p>Eclipse 处理 JAR 文件中的代码（即类文件）后，就可以从您的 Java 代码引用（导入）它们。可在 Project Explorer 中注意到，您有一个名为 Referenced Libraries 的新文件夹，其中包含 commons-lang3-3.4.jar 文件。</p><h2 id=\"writing\" class=\"ibm-h2\">编写良好的 Java 代码</h2><p>您已经掌握了编写基本的 Java 程序所需的足够多的 Jave 语法，这意味着本教程的前半部分即将结束。最后一节提供了一些最佳实践，它们可帮助您编写更干净、更容易维护的 Java 代码。</p><h3 id=\"N11121\" class=\"ibm-h3\">让类保持较小</h3><p>目前您已创建了一些类。即使仅为少量（根据真实 Java 类的标准）属性生成 getter/setter 对，<code>Person</code>&nbsp;类也有 150 行代码。这么大的&nbsp;<code>Person</code>&nbsp;仍是一个小类。我们常常（而且不幸地）看到包含 50 或 100 个方法和数千行（或更多）源代码的类。一些类可能必须这么大，但很可能它们需要<em>重构</em>。重构指的是更改现有代码的设计，而不更改它的结果。建议遵循以下最佳实践。</p><p>一般而言，类表示应用程序中的某个概念实体，类的大小应只反映了执行该实体需要执行的操作的功能。它们应该高度专注于很好地执行少量的操作。</p><p>仅保留您需要的方法。如果您需要几个执行相同操作但接受不同参数的帮助器方法（比如&nbsp;<code>printAudit()</code>&nbsp;方法），这是一个不错的选择。但请确保将方法列表限制到您需要的水平，不要使用更多的方法。</p><h3 id=\"N11138\" class=\"ibm-h3\">谨慎地为方法命名</h3><p>对于方法名称，一种不错的编码模式是<em>意图揭示性</em>方法名称模式。通过一个简单的示例，就可以很容易地理解此模式。只看一眼，以下哪个方法名称更容易理解？</p><ul class=\"ibm-bullet-list\"><li><code>a()</code></li><li><code>computeInterest()</code></li></ul><p>答案应该很明显，但出于某种原因，程序员倾向于为方法（在这里还包括变量）提供简短的名称。当然，过长的名称可能不方便，但传达某个方法的用途的名称不需要过长。在编写大量代码 6 个月后，您可能已经不记得某个名为&nbsp;<code>compInt()</code>&nbsp;的方法的用途，但名为&nbsp;<code>computeInterest()</code>&nbsp;的方法的用途就很明显，该方法可能用于计算利息。</p><h3 id=\"N11151\" class=\"ibm-h3\">保持方法简短</h3><p>与小类一样，小方法更受欢迎，而且原因类似。我尝试遵循的一条原则是，将方法的大小限制为<span>一页</span>，因为我可以在我的屏幕上看到它。这种做法使应用程序类更容易维护。</p><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><p><span>跟随 Fowler 的足迹</span><br>业界最优秀的图书（我是这么认为的，而且不是我一个人这么认为）是 Martin Fowler 等合著的<em>重构：改进现有代码的设计</em>。这本书读起来很有趣。作者谈论了需要重构的“代码异味 (code smells)”，详细介绍了修复它们的各种技术。</p></div><p>如果一个方法增长到超出一页，我就会重构它。Eclipse 拥有一组非常棒的重构工具。通常，一个长方法包含一些聚集在一起的功能的子组。可将某个功能移到另一个方法中（并相应地命名它），然后根据需要传入参数。</p><p>将每个方法限制到单个作业。我发现，一个方法做好一件事通常只需不超过 30 行代码。</p><p>重构和编写测试优先代码的能力是新程序员要学习的最重要技能。如果每个人都擅长这两项技能，业界将发生革命性变化。如果您擅长这两项技能，您最终会生成比许多同行更干净的代码和功能更强的应用程序。</p><h3 id=\"N1116A\" class=\"ibm-h3\">使用注释</h3><p>请使用注释。长期关注您的人（甚至 6 个月后的您自己）会感谢您。您可能听过一句格言<em>如果代码写得好可以自述其身，谁还需要注释？</em>我会给出两个原因来解释为什么我相信此格言是错误的：</p><ul class=\"ibm-bullet-list\"><li>大多数代码都没有精心编写。</li><li>尽管我们很努力，但我们编写的代码可能并不像我们认为的那么精美。</li></ul><p>所以，请给您的代码添加注释。就这么简单。</p><h3 id=\"N1117B\" class=\"ibm-h3\">使用一致的风格</h3><p>编码风格是一种个人偏好，但我建议使用标准的 Java 括号语法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_528545\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>不要使用此风格：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_231270\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args)</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>或这种风格：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_875516\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public static void main(String[] args)</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">{</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>为什么？因为它是标准的，所以您遇到的大部分代码（比如不是您编写的，但您可能要付费维护的代码）很可能就是以这种方式编写的。Eclipse&nbsp;<span>的确</span>允许您以任何喜欢的方式定义代码风格和格式化代码。但是，如果您刚接触 Java，可能还没有形成风格。 那么，我建议从一开始就采用 Java 标准。所以我建议从一开始就采用 Java 标准。</p><h3 id=\"N11197\" class=\"ibm-h3\">使用内置记录</h3><p>在 Java 1.4 引入内置记录之前，确定程序在执行何种操作的权威方式是执行一次类似这样的系统调用：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_781546\" class=\"syntaxhighlighter nogutter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public void someMethod() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Do some stuff...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Now tell all about it</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">System.out.println(\"Telling you all about it:\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Etc...</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>Java 语言的内置记录工具（请参考前面的“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html#yourfirst\">您的第一个 Java 类</a>”部分）是一个更好的替代工具。我<span>从不</span>在我的代码中使用<code>System.out.println()</code>，建议您也不要使用它。另一种替代选择是常用的&nbsp;<a href=\"http://logging.apache.org/log4j/2.x/\">log4j</a>&nbsp;替换库，它是 Apache umbrella 项目的一部分。</p><h2 id=\"N111B2\" class=\"ibm-h2\">第 1 部分小结</h2><p>在本教程中，您学习了面向对象编程，了解了可用于创建有用对象的 Java 语法，还熟悉了一种可帮助控制开发环境的 IDE。您了解了如何创建和运行可执行大量操作的 Java 对象，包括根据不同的输入来执行不同的操作。您还了解了如何创建应用程序的 JAR，供其他开发人员在其程序中使用，并掌握了一些基本的 Java 编程最佳实践。</p><h3 id=\"N111B8\" class=\"ibm-h3\">后续计划</h3><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-apachefunctor/index.html\">本教程的后半部分</a>中，将开始学习 Java 编程中的一些更高级的构造，但整体讨论仍是介绍性的。该教程中涵盖的 Java 编程主题包括：</p><ul class=\"ibm-bullet-list\"><li>异常处理</li><li>继承和抽象</li><li>接口</li><li>嵌套类</li><li>正则表达式</li><li>泛型</li><li>枚举类型</li><li>I/O</li><li>序列化</li></ul><p>参阅“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html\"><em>Java 编程简介</em>，第 2 部分：真实应用程序的构造</a>”</p>','default',0),(166,'Java 编程简介-构建真实的应用程序','主页文章','bigmeng',NULL,1,1,28,'2018-02-08 02:03:02',NULL,NULL,1,'Java 平台上的面向对象编程-第二话',NULL,'<h2 id=\"N100E6\" class=\"ibm-h2\">开始之前</h2><p>了解有望从本文中获得哪些收获，以及如何从本教程中获得最大的收获。</p><h3 id=\"N10052\" class=\"ibm-h3\">关于本教程</h3><p>这个分两部分的&nbsp;<em>Java 编程简介</em>教程适用于不熟悉 Java 技术的软件开发人员。学习完这两个部分，掌握并使用 Java 语言和平台执行面向对象编程 (OOP) 和实际应用程序开发。</p><p><em>Java 编程简介</em>教程第 2 部分介绍的 Java 语言功能比<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>中介绍的功能更复杂。</p><h3 id=\"N10064\" class=\"ibm-h3\">目标</h3><p>Java 语言非常成熟和复杂，可帮助您完成几乎任何编程任务。本教程介绍了在处理复杂的编程场景时所需的 Java 语言特性，包括：</p><ul class=\"ibm-bullet-list\"><li>异常处理</li><li>继承和抽象</li><li>接口</li><li>嵌套类</li><li>正则表达式</li><li>泛型</li><li><code>enum</code>&nbsp;类型</li><li>I/O</li><li>序列化</li></ul><h3 id=\"N10080\" class=\"ibm-h3\">前提条件</h3><p>本教程的内容适合不熟悉 Java 语言中各种更复杂特性的初级 Java 语言程序员。本教程假设您已阅读了“<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\"><em>Java 编程简介</em>，第 1 部分：Java 语言基础</a>”并且：</p><ul class=\"ibm-bullet-list\"><li>了解了 Java 平台上的 OOP 基础知识</li><li>设置了教程示例的开发环境</li><li>开始将在第 2 部分中继续开发的编程项目</li></ul><h3 id=\"N10094\" class=\"ibm-h3\">系统要求</h3><p>要完成本教程中的练习，需要安装并设置一个开发环境，其中包含：</p><ul class=\"ibm-bullet-list\"><li>来自 Oracle 的 JDK 8</li><li>Eclipse IDE for Java Developers</li></ul><p><a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>中提供了这两个软件的下载和安装说明。</p><p>推荐的系统配置是：</p><ul class=\"ibm-bullet-list\"><li>一个支持 Java SE 8、拥有至少 2GB 内存的系统。Linux®、Windows®、Solaris® 和 Mac OS X 都支持 Java 8。</li><li>至少有 200MB 的磁盘空间来安装软件组件和示例。</li></ul><h2 id=\"N10153\" class=\"ibm-h2\">对象的后续处理</h2><p>本教程的<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>介绍了&nbsp;<code>Person</code>&nbsp;类，这个类比较有用，但尚未达到它应有的实用程度。在这里，您将开始学习用各种技术增强一个类（比如&nbsp;<code>Person</code>），首先学习以下技术：</p><ul class=\"ibm-bullet-list\"><li>重载方法</li><li>覆盖方法</li><li>将一个对象与另一个对象进行比较</li><li>让代码更易于调试</li></ul><h3 id=\"N100CB\" class=\"ibm-h3\">重载方法</h3><p>创建两个具有相同名称，但具有不同参数列表（即不同数量或类型的参数）的方法时，就拥有了一个<em>重载</em>方法。在运行时，Java 运行时环境（JRE；也称为 Java 运行时）根据传递给它的参数来决定调用哪个重载方法的变体。</p><p>假设&nbsp;<code>Person</code>&nbsp;需要两个方法来打印其当前状态的审计结果。我将这些方法命名为&nbsp;<code>printAudit()</code>。将清单 1 中的重载方法粘贴到 Eclipse 编辑器视图中的&nbsp;<code>Person</code>&nbsp;类中：</p><h5 id=\"listing1\" class=\"ibm-h5\">清单 1.&nbsp;<code>printAudit()</code>：一个重载方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_50708\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public void printAudit(StringBuilder buffer) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\"Name=\"); buffer.append(getName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"Age=\"); buffer.append(getAge());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"Height=\"); buffer.append(getHeight());</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"Weight=\"); buffer.append(getWeight());</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"EyeColor=\"); buffer.append(getEyeColor());</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"Gender=\"); buffer.append(getGender());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">public void printAudit(Logger l) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StringBuilder sb = new StringBuilder();</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">printAudit(sb);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(sb.toString());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>您有&nbsp;<code>printAudit()</code>&nbsp;的两个重载版本，并且一个版本甚至使用了另一个版本。通过提供两个版本，让调用方能够选择如何打印类的审计结果。根据所传递的参数，Java 运行时会调用正确的方法。</p><h4 id=\"N100EE\" class=\"ibm-h4\">两条方法重载规则</h4><p>使用重载方法时，记住这两条重要的规则：</p><ul class=\"ibm-bullet-list\"><li>不能仅通过更改一个方法的返回类型来重载该方法。</li><li>不能有两个名称和参数列表都相同的方法。</li></ul><p>如果违背这些规则，编译器会发出错误信息。</p><h3 id=\"N100FC\" class=\"ibm-h3\">覆盖方法</h3><p>如果一个类的另一个子类提供了父类中已定义方法的自有实现，就称为<em>方法覆盖</em>。要了解方法覆盖有何用处，需要在&nbsp;<code>Employee</code>&nbsp;类上执行一些操作。设置好之后，我将展示方法覆盖在哪些地方很有用。</p><h4 id=\"N10109\" class=\"ibm-h4\"><code>Employee</code>：<code>Person</code>&nbsp;的一个子类</h4><p>回想本教程的<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>，<code>Employee</code>&nbsp;可以是&nbsp;<code>Person</code>&nbsp;的一个子类（或<em>孩子</em>），但拥有额外的属性：</p><ul class=\"ibm-bullet-list\"><li>纳税人识别编号</li><li>员工编号</li><li>招聘日期</li><li>工资</li></ul><p>要在一个名为 Employee.java 的文件中声明这样一个类，可在 Eclipse 中右键单击&nbsp;<code>com.makotojava.intro</code>&nbsp;包。单击&nbsp;<span>New &gt; Class...</span>&nbsp;打开 New Java Class 对话框，如图 1 所示。</p><h5 id=\"fig1\" class=\"ibm-h5\">图 1. New Java Class 对话框</h5><p><span class=\"dw-code-nohighlight\"></span><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/figure1.jpg\" class=\"ibm-downsize\" alt=\"Screenshot of the New Java Class dialog box in Project Explorer\" height=\"643\" width=\"534\"></p><p>输入&nbsp;<code>Employee</code>&nbsp;作为该类的名称，<code>Person</code>&nbsp;作为它的超类，然后单击&nbsp;<span>Finish</span>。可在编辑窗口中看到&nbsp;<code>Employee</code>&nbsp;类。您没有明确要求声明一个构造函数，但仍然实现了两个构造函数。首先，确保&nbsp;<code>Employee</code>&nbsp;类编辑窗口是当前窗口，然后转到&nbsp;<span>Source &gt; Generate Constructors from Superclass...</span>。 此时会看到一个对话框，可在其中选择要实现的构造函数，如图 2 所示。</p><h5 id=\"fig2\" class=\"ibm-h5\">图 2. Generate Constructors from Superclass 对话框</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/figure2.jpg\" class=\"ibm-downsize\" alt=\"Screenshot of the project path to create a constructor\" height=\"574\" width=\"510\"></p><p>选择两个构造函数（如图 2 所示）并单击&nbsp;<span>OK</span>。Eclipse 会为您生成这些构造函数。 现在拥有一个与清单 2 类似的&nbsp;<code>Employee</code>类。</p><h5 id=\"listing2\" class=\"ibm-h5\">清单 2. 改进后的新&nbsp;<code>Employee</code>&nbsp;类</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_972566\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// TODO Auto-generated constructor stub</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee(String name, int age, int height, int weight,</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String eyeColor, String gender) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super(name, age, height, weight, eyeColor, gender);</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// TODO Auto-generated constructor stub</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\">&nbsp;</div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N1016D\" class=\"ibm-h4\"><code>Employee</code>&nbsp;继承了&nbsp;<code>Person</code></h4><p>在清单 3 中可以看到，<code>Employee</code>&nbsp;继承了它的父类&nbsp;<code>Person</code>&nbsp;的属性和行为，同时也拥有自己的一些属性和行为。</p><h5 id=\"listing3\" class=\"ibm-h5\">清单 3. 包含&nbsp;<code>Person</code>&nbsp;属性的&nbsp;<code>Employee</code>&nbsp;类</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_806442\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">import java.math.BigDecimal;</code></div><div class=\"line number4 index3 alt1\">&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String taxpayerIdentificationNumber;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String employeeNumber;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private BigDecimal salary;</code></div><div class=\"line number10 index9 alt1\">&nbsp;</div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super();</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public String getTaxpayerIdentificationNumber() {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return taxpayerIdentificationNumber;</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void setTaxpayerIdentificationNumber(String taxpayerIdentificationNumber) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.taxpayerIdentificationNumber = taxpayerIdentificationNumber;</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\">&nbsp;</div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Other getter/setters...</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>不要忘记为新属性生成 getter 和 setter。<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>中介绍了如何完成该操作。</p><h4 id=\"N10191\" class=\"ibm-h4\">方法覆盖：&nbsp;<code>printAudit()</code></h4><p>现在正如我所承诺的，可以练习覆盖方法了。 您要覆盖&nbsp;<code>printAudit()</code>&nbsp;方法（参见<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing1\">清单 1</a>），该方法可格式化&nbsp;<code>Person</code>&nbsp;实例的当前状态。<code>Employee</code>&nbsp;继承了&nbsp;<code>Person</code>&nbsp;的行为。如果实例化&nbsp;<code>Employee</code>，设置它的属性，然后调用&nbsp;<code>printAudit()</code>&nbsp;的一个重载方法，则调用会成功完成。但是，生成的审计结果不会全面代表一个&nbsp;<code>Employee</code>。问题在于，<code>printAudit()</code>&nbsp;无法格式化特定于&nbsp;<code>Employee</code>&nbsp;的属性，因为&nbsp;<code>Person</code>&nbsp;不知道这些属性。</p><p>解决方案是覆盖可将&nbsp;<code>StringBuilder</code>&nbsp;作为参数的&nbsp;<code>printAudit()</code>&nbsp;的重载方法，并添加代码来打印特定于&nbsp;<code>Employee</code>&nbsp;的属性。</p><p>要在 Eclipse IDE 中实现此解决方案，确保已在编辑器窗口中打开或已在 Project Explorer 视图中选择了&nbsp;<code>Employee</code>。然后转到<span>Source &gt; Override/Implement Methods...</span>，此时会看到一个对话框（如图 3 所示），可在其中选择要覆盖或实现哪些方法。</p><h5 id=\"fig3\" class=\"ibm-h5\">图 3. Override/Implement Methods 对话框</h5><p><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/figure3.jpg\" class=\"ibm-downsize\" alt=\"Screenshot of the Override/Implement Methods dialog box\" height=\"543\" width=\"517\"></p><p>选择&nbsp;<code>printAudit()</code>&nbsp;的&nbsp;<code>StringBuilder</code>&nbsp;重载方法，如图 3 所示，然后单击&nbsp;<span>OK</span>。Eclipse 会生成方法存根，然后您可填写剩余的部分，类似这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_995758\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void printAudit(StringBuilder buffer) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Call the superclass version of this method first to get its attribute values</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super.printAudit(buffer);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Now format this instance\'s values</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\"TaxpayerIdentificationNumber=\");</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(getTaxpayerIdentificationNumber());</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"EmployeeNumber=\");</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(getEmployeeNumber());</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(\",\"); buffer.append(\"Salary=\");</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(getSalary().setScale(2).toPlainString());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意对&nbsp;<code>super.printAudit()</code>&nbsp;的调用。您在这里所做的是要求 (<code>Person</code>) 超类向&nbsp;<code>printAudit()</code>&nbsp;显示其行为，然后使用&nbsp;<code>Employee</code>&nbsp;类型的&nbsp;<code>printAudit()</code>&nbsp;行为来扩充它。</p><p>不需要首先调用&nbsp;<code>super.printAudit()</code>，首先打印这些属性似乎是个不错的主意。事实上，您根本不需要调用<code>super.printAudit()</code>。如果不调用它，就必须在&nbsp;<code>Employee.printAudit()</code>&nbsp;方法中自行格式化来自&nbsp;<code>Person</code>&nbsp;的属性。</p><h3 id=\"N10207\" class=\"ibm-h3\">类成员</h3><p>您在&nbsp;<code>Person</code>&nbsp;和&nbsp;<code>Employee</code>&nbsp;上拥有的变量和方法是<em>实例</em>变量和方法。要使用它们，必须实例化所需要的类，或者拥有对该实例的引用。每个对象实例都拥有变量和方法，而且对于每个实例，准确的行为会有所不同，因为这些行为基于对象实例的状态。</p><p>类本身也可拥有变量和方法。可使用<a href=\"http://www.ibm.com/developerworks/java/tutorials/j-introtojava1/index.html\">第 1 部分</a>中介绍的&nbsp;<code>static</code>&nbsp;关键字来声明类变量。类变量与实例变量之间的区别在于：</p><ul class=\"ibm-bullet-list\"><li>类的每个实例共享一个类变量的单个副本。</li><li>您可在类本身上调用类方法，而无需拥有实例。</li><li>实例方法可访问类变量，但类方法无法访问实例变量。</li><li>类方法只能访问类变量。</li></ul><h4 id=\"N10229\" class=\"ibm-h4\">添加类变量和方法</h4><p>何时添加类变量和方法才有意义？最佳的经验是很少添加，这样才不会过度使用它们。尽管如此，在以下情况中使用类变量和方法仍是个不错的主意：</p><ul class=\"ibm-bullet-list\"><li>声明类的任何实例都可使用的常量（而且常量的值在开发时是固定的）</li><li>跟踪类实例的“计数器”</li><li>用在具有实用程序方法的类上，这些方法从不需要该类的实例（比如&nbsp;<code>Logger.getLogger()</code>）</li></ul><h3 id=\"N1023A\" class=\"ibm-h3\">类变量</h3><p>要创建类变量，在声明变量时请使用&nbsp;<code>static</code>&nbsp;关键字：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_630217\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">accessSpecifier static variableName [= initialValue];</code></div></div></td></tr></tbody></table></div></div></div><p><span>备注：</span>此处的方括号表示它们的常量是可选的。方括号不是声明语法的一部分。</p><p>JRE 会在内存中创建空间，为所有类实例存储每个类实例变量。相反，JRE 仅创建每个类变量的单个副本，无论有多少个实例都是如此。它在首次加载类时执行此操作（也就是在程序中首次遇到该类时）。类的所有实例共享该变量的这个副本。这使类变量成为所有实例都应该能够使用的常量的不错选择。</p><p>例如，可以将&nbsp;<code>Person</code>&nbsp;的&nbsp;<code>Gender</code>&nbsp;属性声明为&nbsp;<code>String</code>，但没有对它设置任何约束。清单 4 显示了类变量的一种常见用法。</p><h5 id=\"listing4\" class=\"ibm-h5\">清单 4. 使用类变量</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_826404\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final String GENDER_MALE = \"MALE\";</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final String GENDER_FEMALE = \"FEMALE\";</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// ...</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person p = new Person(\"Joe Q Author\", 42, 173, 82, \"Brown\", GENDER_MALE);</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// ...</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10266\" class=\"ibm-h4\">声明常量</h4><p>通常，常量命名要求如下：</p><ul class=\"ibm-bullet-list\"><li>全部用大写形式命名</li><li>使用由多个下划线分隔的单词来命名</li><li>已声明&nbsp;<code>final</code>（这样就无法修改它们的值）</li><li>使用&nbsp;<code>public</code>&nbsp;访问说明符来声明（这样其他需要按名称引用常量值的类能够访问这些常量）</li></ul><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing4\">清单 4</a>&nbsp;中，要在&nbsp;<code>Person</code>&nbsp;构造函数调用中使用&nbsp;<code>MALE</code>&nbsp;常量，可引用它的名称。要在类外使用一个常量，可将声明它的类的名称放在常量的前面：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_292908\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String genderValue = Person.GENDER_MALE;</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N1028C\" class=\"ibm-h3\">类方法</h3><p>如果您是从<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>开始学习的，那么已调用了静态&nbsp;<code>Logger.getLogger()</code>&nbsp;方法多次 — 检索&nbsp;<code>Logger</code>&nbsp;实例来将输出写到控制台时就会调用。但是请注意，并不需要一个&nbsp;<code>Logger</code>&nbsp;实例来这么做；可引用&nbsp;<code>Logger</code>&nbsp;类本身。这是执行<em>类方法</em>调用的语法。与类变量一样，<code>static</code>&nbsp;关键字将&nbsp;<code>Logger</code>（在本例中）标识为类方法。因此，有时也将类方法称为<em>静态方法</em>。</p><h4 id=\"N102B1\" class=\"ibm-h4\">使用类方法</h4><p>现在，将所学的静态变量和方法组合到一起，就可在&nbsp;<code>Employee</code>&nbsp;上创建一个静态方法。声明一个&nbsp;<code>private static final</code>&nbsp;变量来持有&nbsp;<code>Logger</code>，所有实例都共享它，而且可通过在&nbsp;<code>Employee</code>&nbsp;类上调用&nbsp;<code>getLogger()</code>&nbsp;来访问它。清单 5 显示了如何执行该操作。</p><h5 id=\"listing5\" class=\"ibm-h5\">清单 5. 创建一个类（或静态）方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_710723\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final Logger logger = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static Logger getLogger() {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return logger;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\">&nbsp;</div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>清单 5 中发生了两件重要的事：</p><ul class=\"ibm-bullet-list\"><li>声明&nbsp;<code>Logger</code>&nbsp;实例时使用了&nbsp;<code>private</code>&nbsp;访问级别，所以&nbsp;<code>Employee</code>&nbsp;外部的任何类都无法直接访问该引用。</li><li>在加载该类时初始化&nbsp;<code>Logger</code>— 因为我们使用 Java 初始化器语法来向它提供值。</li></ul><p>要检索&nbsp;<code>Employee</code>&nbsp;类的&nbsp;<code>Logger</code>&nbsp;对象，可执行以下调用：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_393420\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Logger employeeLogger = Employee.getLogger();</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N102EE\" class=\"ibm-h3\">比较对象</h3><p>Java 语言提供了两种方式来比较对象：</p><ul class=\"ibm-bullet-list\"><li><code>==</code>&nbsp;运算符</li><li><code>equals()</code>&nbsp;方法</li></ul><h4 id=\"N102FE\" class=\"ibm-h4\">使用&nbsp;<code>==</code>&nbsp;比较对象</h4><p><code>==</code>&nbsp;语法比较对象是否相等，只有在&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>&nbsp;拥有相同的值时，<code>a == b</code>&nbsp;才返回&nbsp;<code>true</code>。对于对象，需要两个对象引用同一个对象实例。对于原语，需要它们的值相等。假设为&nbsp;<code>Employee</code>&nbsp;生成一个 JUnit 测试（<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>介绍了如何操作）。清单 6 中显示了 JUnit 测试。</p><h5 id=\"listing6\" class=\"ibm-h5\">清单 6. 使用&nbsp;<code>==</code>&nbsp;比较对象</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_50835\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class EmployeeTest {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void test() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int int1 = 1;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int int2 = 1;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(EmployeeTest.class.getName());</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: int1 == int2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A:\" + (int1 == int2));</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer integer1 = Integer.valueOf(int1);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer integer2 = Integer.valueOf(int2);</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q:Integer1 == Integer2?&nbsp;&nbsp; A:\" + (integer1 == integer2));</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">integer1 = new Integer(int1);</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">integer2 = new Integer(int2);</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q:Integer1 == Integer2?&nbsp;&nbsp; A:\" + (integer1 == integer2));</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee1 = new Employee();</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee2 = new Employee();</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q:Employee1 == Employee2?A:\" + (employee1 == employee2));</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果在 Eclipse 中运行清单 6 的代码（在 Project Explorer 视图中选择&nbsp;<code>Employee</code>，然后选择&nbsp;<span>Run As &gt; JUnit Test</span>），输出应该是：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_885224\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 18, 2015 5:09:56 PM com.makotojava.intro.EmployeeTest test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">INFO:Q: int1 == int2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A: true</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Sep 18, 2015 5:09:56 PM com.makotojava.intro.EmployeeTest test</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">INFO:Q:Integer1 == Integer2?&nbsp;&nbsp; A: true</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">Sep 18, 2015 5:09:56 PM com.makotojava.intro.EmployeeTest test</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">INFO:Q:Integer1 == Integer2?&nbsp;&nbsp; A: false</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">Sep 18, 2015 5:09:56 PM com.makotojava.intro.EmployeeTest test</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">INFO:Q:Employee1 == Employee2?A: false</code></div></div></td></tr></tbody></table></div></div></div><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing6\">清单 6</a>&nbsp;中的第一种情况下，原语的值相同，所以&nbsp;<code>==</code>&nbsp;运算符返回&nbsp;<code>true</code>。在第二种情况下，<code>Integer</code>&nbsp;对象引用相同的实例，所以&nbsp;<code>==</code>&nbsp;同样返回&nbsp;<code>true</code>。在第三种情况下，尽管&nbsp;<code>Integer</code>&nbsp;对象包含相同的值，但&nbsp;<code>==</code>&nbsp;返回&nbsp;<code>false</code>，因为&nbsp;<code>integer1</code>&nbsp;和&nbsp;<code>integer2</code>&nbsp;引用了不同的对象。可将&nbsp;<code>==</code>&nbsp;视为对“相同对象”进行一种测试。</p><h4 id=\"N1035B\" class=\"ibm-h4\">使用&nbsp;<code>equals()</code>&nbsp;比较对象</h4><p><code>equals()</code>&nbsp;是每种 Java 语言对象都可自由使用的方法，因为它被定义为&nbsp;<code>java.lang.Object</code>（每个 Java 对象都继承自该对象）的一个实例方法。</p><p>可像使用其他任何方法那样调用&nbsp;<code>equals()</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_815385\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">a.equals(b);</code></div></div></td></tr></tbody></table></div></div></div><p>这条语句调用对象&nbsp;<code>a</code>&nbsp;的&nbsp;<code>equals()</code>&nbsp;方法，向它传递对象&nbsp;<code>b</code>&nbsp;的引用。默认情况下，Java 程序会使用&nbsp;<code>==</code>&nbsp;语法简单地检查两个对象是否相同。因为&nbsp;<code>equals()</code>&nbsp;是一个方法，但是可以被覆盖。将<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing6\">清单 6</a>&nbsp;中的 JUnit 测试案例与清单 7 中的测试案例（我称之为<code>anotherTest()</code>）进行比较，后者使用&nbsp;<code>equals()</code>&nbsp;来比较两个对象：</p><h5 id=\"listing7\" class=\"ibm-h5\">清单 7. 使用&nbsp;<code>equals()</code>&nbsp;比较对象</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_822642\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void anotherTest() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer integer1 = Integer.valueOf(1);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Integer integer2 = Integer.valueOf(1);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: integer1 == integer2 ?A:\" + (integer1 == integer2));</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: integer1.equals(integer2) ?A:\" + integer1.equals(integer2));</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">integer1 = new Integer(integer1);</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">integer2 = new Integer(integer2);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: integer1 == integer2 ?A:\" + (integer1 == integer2));</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: integer1.equals(integer2) ?A:\" + integer1.equals(integer2));</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee1 = new Employee();</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee2 = new Employee();</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1 == employee2 ?A:\" + (employee1 == employee2));</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1.equals(employee2) ?A :\" + employee1.equals(employee2));</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>运行清单 7 的代码会生成：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_504373\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">INFO:Q: integer1 == integer2 ?A: true</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">INFO:Q: integer1.equals(integer2) ?A: true</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">INFO:Q: integer1 == integer2 ?A: false</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">INFO:Q: integer1.equals(integer2) ?A: true</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">INFO:Q: employee1 == employee2 ?A: false</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 10:11:57 AM com.makotojava.intro.EmployeeTest anotherTest</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">INFO:Q: employee1.equals(employee2) ?A : false</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N1039F\" class=\"ibm-h4\">关于比较&nbsp;<code>Integer</code>&nbsp;的说明</h4><p>在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing7\">清单 7</a>&nbsp;中，如果&nbsp;<code>==</code>&nbsp;返回&nbsp;<code>true</code>，<code>Integer</code>&nbsp;的&nbsp;<code>equals()</code>&nbsp;方法就会返回&nbsp;<code>true</code>，对此不应感到奇怪。但请注意第二种情况中发生的事情，在其中创建了都包含值&nbsp;<code>1</code>&nbsp;的不同对象：<code>==</code>&nbsp;返回&nbsp;<code>false</code>，因为&nbsp;<code>integer1</code>&nbsp;和&nbsp;<code>integer2</code>&nbsp;引用不同的对象；但&nbsp;<code>equals()</code>&nbsp;却返回&nbsp;<code>true</code>。</p><p>JDK 的编写者认为，对于&nbsp;<code>Integer</code>，<code>equals()</code>&nbsp;的含义与默认含义不同（回想一下，默认含义是比较对象引用，看看它们是否引用同一个对象）。对于&nbsp;<code>Integer</code>，在底层的&nbsp;<code>int</code>&nbsp;值相同时，<code>equals()</code>&nbsp;返回&nbsp;<code>true</code>。</p><p>对于&nbsp;<code>Employee</code>，您没有覆盖&nbsp;<code>equals()</code>，所以（使用&nbsp;<code>==</code>&nbsp;的）默认行为返回了您期望的结果，因为&nbsp;<code>employee1</code>&nbsp;和&nbsp;<code>employee2</code>&nbsp;引用不同的对象。</p><p>然后，对于所编写的任何对象，可定义适合所编写应用程序的&nbsp;<code>equals()</code>&nbsp;含义。</p><h4 id=\"N103FB\" class=\"ibm-h4\">覆盖&nbsp;<code>equals()</code></h4><p>可通过覆盖&nbsp;<code>Object.equals()</code>&nbsp;的默认行为，定义&nbsp;<code>equals()</code>&nbsp;对于应用程序对象的含义。同样，也可使用 Eclipse 完成此任务。确保&nbsp;<code>Employee</code>&nbsp;拥有 Eclipse IDE 源代码窗口中的焦点，然后转到&nbsp;<span>Source &gt; Override/ImplementMethods</span>。此时打开图 4 中所示的对话框。</p><h5 id=\"fig4\" class=\"ibm-h5\">图 4. Override/Implement Methods 对话框</h5><p><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/figure4.jpg\" class=\"ibm-downsize\" alt=\"Screenshot of the Override/Implement Methods dialog box in Eclipse.\" height=\"426\" width=\"518\"></p><p>您之前使用过这个对话框，但在本例中，我们要实现&nbsp;<code>Object.equals()</code>&nbsp;超类方法。所以在方法列表中找到要覆盖或要实现的<code>Object</code>，选择&nbsp;<code>equals(Object)</code>&nbsp;方法，然后单击&nbsp;<span>OK</span>。Eclipse 生成正确的代码并将它放在源文件中。</p><p>如果两个&nbsp;<code>Employee</code>&nbsp;对象的状态相等，则这两个对象相等，这样就有意义了。也就是说，如果它们的值 — 姓氏、名字、年龄 — 相同，那么它们就相等。</p><h4 id=\"autogenequals\" class=\"ibm-h4\">自动生成&nbsp;<code>equals()</code></h4><p>Eclipse 可根据您为一个类所定义的实例变量（属性）来生成一个&nbsp;<code>equals()</code>&nbsp;方法。因为&nbsp;<code>Employee</code>&nbsp;是&nbsp;<code>Person</code>&nbsp;的子类，所以首先为&nbsp;<code>Person</code>&nbsp;生成&nbsp;<code>equals()</code>。在 Eclipse 的 Project Explorer 视图中，右键单击&nbsp;<code>Person</code>&nbsp;并选择&nbsp;<span>Generate hashCode() and equals()</span>，打开图 5 中所示的对话框，选择要在&nbsp;<code>hashCode()</code>&nbsp;和&nbsp;<code>equals()</code>&nbsp;方法中包含哪些属性。</p><h5 id=\"fig5\" class=\"ibm-h5\">图 5. Generate hashCode() and equals() 对话框</h5><p><img src=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/figure5.jpg\" class=\"ibm-downsize\" alt=\"Screenshot of the dialog box for autogenerating equals()\" height=\"513\" width=\"500\"></p><p>选择所有属性（如图 5 所示）后单击&nbsp;<span>OK</span>。Eclipse 生成一个与清单 8 中所示内容类似的&nbsp;<code>equals()</code>&nbsp;方法。</p><h5 id=\"listing8\" class=\"ibm-h5\">清单 8. Eclipse 生成的&nbsp;<code>equals()</code>&nbsp;方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_573459\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public boolean equals(Object obj) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (this == obj)</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return true;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (obj == null)</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (getClass() != obj.getClass())</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Person other = (Person) obj;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (age != other.age)</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (eyeColor == null) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (other.eyeColor != null)</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} else if (!eyeColor.equals(other.eyeColor))</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (gender == null) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (other.gender != null)</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} else if (!gender.equals(other.gender))</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (height != other.height)</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (name == null) {</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (other.name != null)</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} else if (!name.equals(other.name))</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (weight != other.weight)</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return false;</code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return true;</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>现在无需担心&nbsp;<code>hashCode()</code>— 您可保留或删除它。Eclipse 生成的&nbsp;<code>equals()</code>&nbsp;方法看起来很复杂，但它的操作很简单：如果传入的对象与清单 8 中的对象相同，则&nbsp;<code>equals()</code>&nbsp;返回&nbsp;<code>true</code>。如果传入的对象为 null（表示缺失），则返回&nbsp;<code>false</code>。</p><p>接下来，该方法检查&nbsp;<code>Class</code>&nbsp;对象是否相同（意味着传入的对象必须是一个&nbsp;<code>Person</code>&nbsp;对象）。如果它们相同，会检查已传入对象的每个属性值，查看它是否与给定&nbsp;<code>Person</code>&nbsp;实例的状态逐值匹配。如果属性值为 null，<code>equals()</code>&nbsp;会检查尽可能多的次数，如果这些值匹配，则认为这些对象相等。您可能不希望每个程序都具有这种行为，但它适用于大多数用途。</p><h4 id=\"N10492\" class=\"ibm-h4\">练习：为&nbsp;<code>Employee</code>&nbsp;生成一个&nbsp;<code>equals()</code></h4><p>尝试执行“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#autogenequals\">自动生成&nbsp;<code>equals()</code></a>”中的操作步骤，为&nbsp;<code>Employee</code>&nbsp;生成一个&nbsp;<code>equals()</code>。生成&nbsp;<code>equals()</code>&nbsp;后，添加下面这个 JUnit 测试案例（我将它称为&nbsp;<code>yetAnotherTest()</code>）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_156432\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void yetAnotherTest() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee1 = new Employee();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee1.setName(\"J Smith\");</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee2 = new Employee();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee2.setName(\"J Smith\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1 == employee2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A:\" + (employee1 == employee2));</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1.equals(employee2)?A:\" + employee1.equals(employee2));&nbsp;&nbsp;&nbsp; </code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果运行该代码，应该看到以下输出：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_49143\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 11:27:23 AM com.makotojava.intro.EmployeeTest yetAnotherTest</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">INFO:Q: employee1 == employee2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A: false</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 11:27:23 AM com.makotojava.intro.EmployeeTest yetAnotherTest</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">INFO:Q: employee1.equals(employee2)?A: true</code></div></div></td></tr></tbody></table></div></div></div><p>在本例中，单单&nbsp;<code>Name</code>&nbsp;上的一个匹配值就足以让&nbsp;<code>equals()</code>&nbsp;相信两个对象相等。尝试向此示例添加更多属性，看看会获得什么。</p><h4 id=\"N104C2\" class=\"ibm-h4\">练习：覆盖&nbsp;<code>toString()</code></h4><p>还记得本部分开头的&nbsp;<code>printAudit()</code>&nbsp;方法吗？如果您认为它的工作太困难了，那就对了。 将一个对象的状态格式化为&nbsp;<code>String</code>是一种常见的模式，以至于 Java 语言的设计者已在一个（意料之中的）名为&nbsp;<code>toString()</code>&nbsp;的方法中将它内置到&nbsp;<code>Object</code>&nbsp;自身中。<code>toString()</code>&nbsp;的默认实现不是很有用，但每个对象都有一个。在此练习中，您可让默认的&nbsp;<code>toString()</code>&nbsp;更有用。</p><p>如果认为 Eclipse 可为您生成一个&nbsp;<code>toString()</code>&nbsp;方法，那就对了。返回 Project Explorer 并右键单击&nbsp;<code>Person</code>&nbsp;类，然后选择&nbsp;<span>Source &gt; Generate toString()...</span>。此时会看到一个类似<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#fig5\">图 5</a>&nbsp;的对话框。选择所有属性并单击&nbsp;<span>OK</span>。现在对&nbsp;<code>Employee</code>&nbsp;执行相同的操作。 Eclipse 为&nbsp;<code>Employee</code>&nbsp;生成的代码如清单 9 所示。</p><h5 id=\"listing9\" class=\"ibm-h5\">清单 9. Eclipse 生成的&nbsp;<code>toString()</code>&nbsp;方法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_62458\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public String toString() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return \"Employee [taxpayerIdentificationNumber=\" + taxpayerIdentificationNumber + \", </code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employeeNumber=\" + employeeNumber + \", salary=\" + salary + \"]\";</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>Eclipse 为&nbsp;<code>toString</code>&nbsp;生成的代码不包含超类的&nbsp;<code>toString()</code>（<code>Employee</code>&nbsp;的超类为&nbsp;<code>Person</code>）。使用 Eclipse，可通过这个覆盖方法快速解决问题：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_786701\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public String toString() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return super.toString() + \"Employee [taxpayerIdentificationNumber=\" + taxpayerIdentificationNumber + </code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\", employeeNumber=\" + employeeNumber + \", salary=\" + salary + \"]\";</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>添加&nbsp;<code>toString()</code>&nbsp;使&nbsp;<code>printAudit()</code>&nbsp;大大简化：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_709016\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void printAudit(StringBuilder buffer) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">buffer.append(toString());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>toString()</code>&nbsp;现在执行了主要的对象当前状态格式化工作，您只需将它返回的值放入&nbsp;<code>StringBuilder</code>&nbsp;并返回。</p><p>如果仅用于支持用途，我推荐您始终在类中实现&nbsp;<code>toString()</code>。几乎不可避免的是，在某个时刻，您想在应用程序运行时查看一个对象的状态是什么，<code>toString()</code>&nbsp;是一个实现此目的很好的挂钩。</p><h2 id=\"N10685\" class=\"ibm-h2\">异常</h2><p>任何程序都无法始终正常运行，Java 语言的设计者完全了解这一点。在本节中，我会介绍 Java 平台的各种内置机制，处理代码未准确地按计划运行的情况。</p><h3 id=\"N10533\" class=\"ibm-h3\">异常处理基础</h3><p><em>异常</em>是在程序执行期间发生的、可破坏正常程序指令流的事件。异常处理是 Java 编程的一项基础技术。其基本机制是，您将代码包装在一个&nbsp;<code>try</code>&nbsp;代码块中（这表示“尝试此代码并让我知道它是否导致了异常”），并使用它&nbsp;<code>catch</code>&nbsp;各种类型的异常。</p><p>要想开始执行异常处理，可查看清单 10 中的代码。</p><h5 id=\"listing10\" class=\"ibm-h5\">清单 10. 您发现错误了吗？</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_473679\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void yetAnotherTest() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">//&nbsp;&nbsp;&nbsp; Employee employee1 = new Employee();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee1 = null;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee1.setName(\"J Smith\");</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee2 = new Employee();</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee2.setName(\"J Smith\");</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1 == employee2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A:\" + (employee1 == employee2));</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1.equals(employee2)?A:\" + employee1.equals(employee2));&nbsp;&nbsp;&nbsp; </code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意，<code>Employee</code>&nbsp;引用被设置为&nbsp;<code>null</code>。运行此代码会获得以下输出：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_966120\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">java.lang.NullPointerException</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">at com.makotojava.intro.EmployeeTest.yetAnotherTest(EmployeeTest.java:49)</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">.</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">.</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">.</code></div></div></td></tr></tbody></table></div></div></div><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><h5>IDE 警告</h5><p>运行<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing10\">清单 10</a>&nbsp;的代码时可能会注意到，Eclipse 通过下面这条消息提醒潜在的错误：&nbsp;<code>Null pointer access:The variable employee1 can only be null at this location</code>.</p><p>Eclipse 会提醒许多潜在的开发错误 — 这是使用 IDE 执行 Java 开发的另一个优势。</p></div><p>此输出告诉您，您正在尝试通过一个&nbsp;<code>null</code>&nbsp;引用（指针）来引用一个对象，这是一个非常严重的开发错误。</p><p>幸运的是，可使用&nbsp;<code>try</code>&nbsp;和&nbsp;<code>catch</code>&nbsp;代码块捕获它（还有来自&nbsp;<code>finally</code>&nbsp;的一些帮助）。</p><h4 id=\"N10579\" class=\"ibm-h4\"><code>try</code>、<code>catch</code>&nbsp;和&nbsp;<code>finally</code></h4><p>清单 11 显示了使用标准异常处理代码块从<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing10\">清单 10</a>&nbsp;中清除的错误代码：&nbsp;<code>try</code>、<code>catch</code>&nbsp;和&nbsp;<code>finally</code>。</p><h5 id=\"listing11\" class=\"ibm-h5\">清单 11. 捕获一个异常</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_205233\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void yetAnotherTest() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//&nbsp;&nbsp;&nbsp; Employee employee1 = new Employee();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee1 = null;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee1.setName(\"J Smith\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee2 = new Employee();</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee2.setName(\"J Smith\");</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1 == employee2?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A:\" + (employee1 == employee2));</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.info(\"Q: employee1.equals(employee2)?A:\" + employee1.equals(employee2));</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (Exception e) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.severe(\"Caught exception:\" + e.getMessage());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} finally {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Always executes</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>try</code>、<code>catch</code>&nbsp;和&nbsp;<code>finally</code>&nbsp;代码块一同构成了一张捕获异常的大网。首先，<code>try</code>&nbsp;语句包装可能抛出异常的代码。在该例子中，异常直接放在&nbsp;<code>catch</code>&nbsp;代码块或<em>异常处理函数</em>中。在所有 try 和 catch 都完成后，会继续执行&nbsp;<code>finally</code>&nbsp;代码块，无论是否抛出了异常都是如此。捕获到一个异常时，您可尝试优雅地从异常中恢复，或者退出程序（或方法）。</p><p>在清单 11 中，程序从错误中恢复，然后打印出异常的消息：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_279120\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 2:01:22 PM com.makotojava.intro.EmployeeTest yetAnotherTest</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">SEVERE:Caught exception: null</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N105B8\" class=\"ibm-h3\">异常分层结构</h3><p>Java 语言包含一个完整的异常分层结构，它由多种类型的异常组成，这些异常主要分为两类：</p><ul class=\"ibm-bullet-list\"><li><span>已检查的异常</span>&nbsp;已由编译器检查（表示编译器确定已在代码中的某处处理过这些异常）。</li><li><span>未检查的异常</span>（也称为<em>运行时异常</em>）未由编译器检查。</li></ul><p>程序导致异常时，您可以说它<em>抛出了</em>异常。任何方法都可在方法签名中包含&nbsp;<code>throws</code>&nbsp;关键字，从而向编译器声明已检查的异常。接下来是一个该方法可能在执行期间抛出的各种异常的逗号分隔列表。如果代码所调用的一个方法指定它抛出一种或多种类型的异常，就必须对它进行一定的处理，或者向方法签名中添加一个&nbsp;<code>throws</code>&nbsp;来传递该异常类型。</p><p>发生异常时，Java 运行时在堆栈中向上搜索异常处理函数。如果到达堆栈顶部时仍未找到异常处理函数，它会立即终止程序，就像在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing10\">清单 10</a>&nbsp;中看到的一样。</p><h4 id=\"N105DC\" class=\"ibm-h4\">多个&nbsp;<code>catch</code>&nbsp;代码块</h4><p>您可拥有多个&nbsp;<code>catch</code>代码块，但必须以特定的方式来搭建它们。如果任何异常是其他异常的子类，那么子类按&nbsp;<code>catch</code>&nbsp;代码块的顺序放在父类前面。清单 12 显示了按正确的分层结构顺序搭建的不同异常类型示例。</p><h5 id=\"listing12\" class=\"ibm-h5\">清单 12. 异常分层结构示例</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_968469\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void exceptionTest() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(\"file.txt\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">BufferedReader bufferedReader = null;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">bufferedReader = new BufferedReader(new FileReader(file));</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String line = bufferedReader.readLine();</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (line != null) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Read the file</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.severe(e.getMessage());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.severe(e.getMessage());</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (Exception e) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.severe(e.getMessage());</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} finally {</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Close the reader</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在这个示例中，<code>FileNotFoundException</code>&nbsp;是&nbsp;<code>IOException</code>&nbsp;的子类，所以必须将它放在&nbsp;<code>IOException catch</code>&nbsp;代码块的前面。<code>IOException</code>&nbsp;是&nbsp;<code>Exception</code>&nbsp;的子类，所以必须将它放在&nbsp;<code>Exception catch</code>&nbsp;代码块的前面。</p><h4 id=\"N10608\" class=\"ibm-h4\"><code>try-with-resources</code>&nbsp;代码块</h4><p>从 JDK 7 开始，资源管理工作变得简单多了。随着所使用的文件和&nbsp;<code>java.io</code>&nbsp;包越来越多，就越会认识到新语法的好处。<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing12\">清单 12</a>&nbsp;中的代码必须声明一个变量来持有&nbsp;<code>bufferedReader</code>&nbsp;引用，然后在&nbsp;<code>finally</code>&nbsp;中必须关闭&nbsp;<code>BufferedReader</code>。</p><p>新的&nbsp;<code>try-with-resources</code>&nbsp;语法会在&nbsp;<code>try</code>&nbsp;代码块超出范围时自动关闭资源。清单 13 显示了更紧凑的语法。</p><h5 id=\"listing13\" class=\"ibm-h5\">清单 13. 资源管理语法</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_130401\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void exceptionTestTryWithResources() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger l = Logger.getLogger(Employee.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(\"file.txt\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String line = bufferedReader.readLine();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (line != null) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">// Read the file</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (Exception e) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">l.severe(e.getMessage());</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>从本质上来说，要在&nbsp;<code>try</code>&nbsp;后面的圆括号内分配资源变量，在&nbsp;<code>try</code>&nbsp;代码块超出范围时，系统会自动关闭这些资源。这些资源必须实现&nbsp;<code>java.lang.AutoCloseable</code>&nbsp;接口；如果尝试在一个没有实现该接口的资源类上实现此语法，Eclipse 会提醒您。</p><h2 id=\"N1075B\" class=\"ibm-h2\">构建 Java 应用程序</h2><p>在本节中，我们继续将&nbsp;<code>Person</code>&nbsp;构建为 Java 应用程序。在此过程中，您可更好地了解一个对象或对象集合如何演变成应用程序。</p><h3 id=\"N10645\" class=\"ibm-h3\">Java 应用程序的元素</h3><p>所有 Java 应用程序都需要一个入口点，这样 Java 运行时才能知道从这里开始执行代码。这个入口点就是&nbsp;<code>main()</code>&nbsp;方法。 域对象通常没有&nbsp;<code>main()</code>&nbsp;方法，但每个应用程序至少有一个类拥有该方法。</p><p>您从<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>开始就一直在开发一个人力资源应用程序示例，其中包括&nbsp;<code>Person</code>&nbsp;及其&nbsp;<code>Employee</code>&nbsp;子类。现在看看将一个新类添加到应用程序时会发生什么。</p><h4 id=\"N1065E\" class=\"ibm-h4\">创建一个 Driver 类</h4><p>顾名思义，<em>Driver 类</em>的用途是“驱动”一个应用程序。请注意，人力资源应用程序的这个简单 Driver 包含一个&nbsp;<code>main()</code>&nbsp;方法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_856368\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public class HumanResourcesApplication {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在 Eclipse 中创建 Driver 类的过程与创建&nbsp;<code>Person</code>&nbsp;和&nbsp;<code>Employee</code>&nbsp;的过程相同。将该类命名为&nbsp;<code>HumanResourcesApplication</code>，确保选择了相关的选项，向该类添加一个&nbsp;<code>main()</code>&nbsp;方法。Eclipse 将为您生成该类。</p><p>将一些代码添加到新的&nbsp;<code>main()</code>&nbsp;方法中，使其类似于下面这段代码：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_601470\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">import java.util.logging.Logger;</code></div><div class=\"line number3 index2 alt2\">&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">public class HumanResourcesApplication {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final Logger log = Logger.getLogger(HumanResourcesApplication.class.getName());</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee e = new Employee();</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e.setName(\"J Smith\");</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e.setEmployeeNumber(\"0001\");</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e.setTaxpayerIdentificationNumber(\"123-45-6789\");</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e.setSalary(BigDecimal.valueOf(45000.0));</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e.printAudit(log);</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>现在，启动&nbsp;<code>HumanResourcesApplication</code>&nbsp;类并观察它的运行情况。您应看到此输出（反斜杠表示一个连续行）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_335689\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 19, 2015 7:59:37 PM com.makotojava.intro.Person printAudit</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">INFO:Name=J Smith,Age=0,Height=0,Weight=0,EyeColor=null,Gender=null\\</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">TaxpayerIdentificationNumber=123-45-6789,EmployeeNumber=0001,Salary=45000.00</code></div></div></td></tr></tbody></table></div></div></div><p>这就是创建一个简单 Java 应用程序的全部过程。在下一部分中，将介绍一些可帮助您开发更复杂应用程序的语法和库。</p><h2 id=\"inheritance\" class=\"ibm-h2\">继承</h2><p>您在本教程中已遇到过多个继承示例。本节复习<a href=\"http://www.ibm.com/developerworks/cn/java/j-introtojava1/index.html\">第 1 部分</a>中有关继承的一些内容，并更详细地解释继承的工作原理 — 包括继承分层结构、构造函数和继承，以及继承抽象。</p><h3 id=\"N1069D\" class=\"ibm-h3\">继承的工作原理</h3><p>Java 代码中的各个类位于分层结构中。分层结构中一个给定类上方的类是该类的<em>超类</em>。这个特定的类是该分层结构更高层中每个类的<em>子类</em>。子类继承其超类的属性和行为。<code>java.lang.Object</code>&nbsp;类位于类分层结构的顶部，意味着每个 Java 类都是&nbsp;<code>Object</code>的子类并继承其属性和行为。</p><p>例如，假设有一个与清单 14 的内容类似的&nbsp;<code>Person</code>&nbsp;类。</p><h5 id=\"listing14\" class=\"ibm-h5\">清单 14. 公共&nbsp;<code>Person</code>&nbsp;类</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_621180\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final String STATE_DELIMITER = \"~\";</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Default constructor</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public enum Gender {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">MALE,</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">FEMALE,</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">UNKNOWN</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name, int age, int height, int weight, String eyeColor, Gender gender) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.age = age;</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.height = height;</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.weight = weight;</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.eyeColor = eyeColor;</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.gender = gender;</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number23 index22 alt2\">&nbsp;</div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int age;</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int height;</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private int weight;</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String eyeColor;</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private Gender gender;</code></div></div></td></tr></tbody></table></div></div></div><p>清单 14 中的&nbsp;<code>Person</code>&nbsp;类隐式地继承了&nbsp;<code>Object</code>。因为我们会假定每个类都继承&nbsp;<code>Object</code>，所以不需要为您定义的每个类键入&nbsp;<code>extends Object</code>。但说一个类继承它的超类是什么意思？它表示&nbsp;<code>Person</code>&nbsp;能够访问其超类中已公开的变量和方法。在本例中，<code>Person</code>&nbsp;可查看和使用&nbsp;<code>Object</code>&nbsp;的公共方法和变量，以及&nbsp;<code>Object</code>&nbsp;的受保护方法和变量。</p><h3 id=\"N106DA\" class=\"ibm-h3\">定义一个类分层结构</h3><p>现在假设有一个继承&nbsp;<code>Person</code>&nbsp;的&nbsp;<code>Employee</code>&nbsp;类。<code>Employee</code>&nbsp;的类定义（或<em>继承图</em>）类似于这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_839055\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String taxpayerIdentificationNumber;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String employeeNumber;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private BigDecimal salary;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// ...</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><div class=\"dw-article-sidebar ibm-background-cool-white-20\"><h5>多重继承与单一继承</h5><p>C++ 等语言支持<em>多重继承</em>&nbsp;概念：在分层结构中的任一点，一个类都可继承一个或多个类。Java 语言仅支持<em>单一继承</em>— 意味着只能为一个类使用&nbsp;<code>extends</code>&nbsp;关键字。所以任何 Java 类的类分层结构始终包含一条一直到<code>java.lang.Object</code>&nbsp;的直线。但是，您在本教程后面会了解到，Java 语言支持在单个类中实现多个接口，因此为单一继承提供了一种规避方法。</p></div><p><code>Employee</code>&nbsp;继承图暗示，<code>Employee</code>&nbsp;能够访问&nbsp;<code>Person</code>&nbsp;中的所有公共和受保护变量和方法（因为&nbsp;<code>Employee</code>&nbsp;直接扩展&nbsp;<code>Person</code>），以及&nbsp;<code>Object</code>&nbsp;中的公共和受保护变量和方法（因为&nbsp;<code>Employee</code>实际上也扩展了&nbsp;<code>Object</code>，尽管是间接扩展）。但是，因为&nbsp;<code>Employee</code>&nbsp;和&nbsp;<code>Person</code>&nbsp;都位于同一个包中，所以&nbsp;<code>Employee</code>&nbsp;也能访问&nbsp;<code>Person</code>&nbsp;中的&nbsp;<em>package-private</em>（有时称为<em>友好</em>）变量。</p><p>要想深入了解类分层结构，可创建第三个扩展&nbsp;<code>Employee</code>&nbsp;的类：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_582860\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// ...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在 Java 语言中，任何类可拥有最多 1 个超类，但一个类可拥有任意个子类。这是 Java 语言继承分层结构方面要记住的最重要一点。</p><h3 id=\"N1073B\" class=\"ibm-h3\">构造函数和继承</h3><p>构造函数不是完整的面向对象成员，所以它们不是继承的；您必须在子类中明确地实现它们。 介绍该主题之前，我要回顾一下有关如何定义和调用构造函数的一些基本规则。</p><h4 id=\"N10742\" class=\"ibm-h4\">构造函数基础知识</h4><p>请记住，一个构造函数的名称始终与它用于构造的类相同，而且它没有返回类型。例如：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_234941\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>每个类至少拥有一个构造函数，而且如果没有明确地为类定义构造函数，那么编译器会生成一个（称为<em>默认构造函数</em>）。前面的类定义和这个类定义具有相同的功能：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_463602\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10756\" class=\"ibm-h4\">调用一个超类构造函数</h4><p>要调用一个超类构造函数，而不是默认的构造函数，也必须明确地这么做。例如，假设&nbsp;<code>Person</code>&nbsp;拥有一个构造函数，该函数仅接受所创建的&nbsp;<code>Person</code>&nbsp;对象的名称。通过&nbsp;<code>Employee</code>&nbsp;的默认构造函数，您可调用&nbsp;<code>Person</code>&nbsp;构造函数，如清单 15 所示：</p><h5 id=\"listing15\" class=\"ibm-h5\">清单 15. 初始化一个新的&nbsp;<code>Employee</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_576389\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\">&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">// Meanwhile, in Employee.java</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super(\"Elmer J Fudd\");</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>但是，您可能绝对不想以这种方式初始化一个新的&nbsp;<code>Employee</code>&nbsp;对象。更熟悉面向对象的概念和一般性的 Java 语法之前，如果认为需要超类构造函数，一个不错的想法是在子类中实现它们。清单 16 在&nbsp;<code>Employee</code>&nbsp;中定义了一个与&nbsp;<code>Person</code>&nbsp;中的构造函数相似的构造函数，以便它们匹配。从维护的角度讲，这种方法要清楚易懂得多。</p><h5 id=\"listing16\" class=\"ibm-h5\">清单 16. 调用一个超类</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_969791\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in Employee.java</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee(String name) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super(name);</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10786\" class=\"ibm-h4\">声明一个构造函数</h4><p>构造函数所做的第一件事就是调用其直接超类的默认构造函数，除非您 — 在该构造函数的第一行代码中 — 调用了一个不同的构造函数。例如，这两种声明具有相同的功能，所以可挑选一个：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_800799\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in Employee.java</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>或者：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_26948\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in Employee.java</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">super();</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N1079B\" class=\"ibm-h4\">无参数构造函数</h4><p>如果您提供了一个替代的构造函数，就必须明确地提供默认构造函数；否则后者将不可用。例如，以下代码会出现编译错误：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_637463\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in Employee.java</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">public class Employee extends Person {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Employee() {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>此示例中的&nbsp;<code>Person</code>&nbsp;类没有默认构造函数，因为它提供了一个替代性的构造函数，但没有明确地包含默认构造函数。</p><h4 id=\"N107AB\" class=\"ibm-h4\">构造函数如何调用构造函数</h4><p>一个构造函数可通过&nbsp;<code>this</code>&nbsp;关键字和一个参数列表来调用另一个类中的构造函数。像&nbsp;<code>super()</code>&nbsp;一样，<code>this()</code>&nbsp;调用必须是构造函数中的第一行代码。例如：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_325685\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String name;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this(\"Some reasonable default?\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Person(String name) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.name = name;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>您会经常看到此用法，其中一个构造函数委托给另一个构造函数，如果调用后者，则传入一个默认构造函数。向一个类添加一个新构造函数，同时最大限度减少对已使用旧构造函数的代码的影响，这也是一种不错的方式。</p><h4 id=\"N107C1\" class=\"ibm-h4\">构造函数访问级别</h4><p>构造函数可拥有您想要的任何访问级别，并且会应用一些可见性规则。表 1 总结了构造函数访问规则。</p><h5 id=\"table1\" class=\"ibm-h5\">表 1. 构造函数访问规则</h5><div id=\"DataTables_Table_0_wrapper\" class=\"dataTables_wrapper no-footer\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table display dataTable no-footer dtr-inline ibm-widget-processed layui-table\" data-widget=\"datatable\" summary=\"Table summarizing the rules of constructor access.\" width=\"100%\" id=\"DataTables_Table_0\" role=\"grid\"><thead xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\"><th class=\"ibm-background-neutral-white-30 sorting_disabled\" scope=\"col\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">构造函数访问修饰符</th><th class=\"ibm-background-neutral-white-30 sorting_disabled\" scope=\"col\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">描述</th></tr></thead><tbody xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>public</code></td><td>任何类都可调用构造函数。</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>protected</code></td><td>只能由同一个包或任何子类中的类调用构造函数。</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\">无修饰符（<em>package-private</em>）</td><td>同一个包中的任何类都可调用构造函数。</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>private</code></td><td>只能由定义构造函数的类调用该构造函数。</td></tr></tbody></table></div><p>您可能想到了将构造函数声明为&nbsp;<code>protected</code>&nbsp;甚至是 package-private 的用例，不过&nbsp;<code>private</code>&nbsp;构造函数有何用处？比如说在实现<a href=\"https://en.wikipedia.org/wiki/Factory_%28object-oriented_programming%29\">工厂模式</a>时，我不允许通过&nbsp;<code>new</code>&nbsp;关键字直接创建对象，此时就使用了私有构造函数。在这种情况下，我会使用一个静态方法来创建类的实例，而且该方法 — 包含在该类中 — 将允许调用这个私有构造函数。</p><h3 id=\"N1080B\" class=\"ibm-h3\">继承和抽象</h3><p>如果一个子类覆盖了超类中的一个方法，该方法在本质上是隐藏的，因为通过对子类的引用来调用它时，会调用该方法的子类版本，而不是超类版本。这并不是说，无法再访问超类方法。子类可在方法名称前添加&nbsp;<code>super</code>&nbsp;关键字来调用超类方法（与构造函数规则不同，这可从子类方法的任何行中执行，甚至可在一个不同的方法内执行）。默认情况下，如果通过对子类的引用来调用子类方法，那么 Java 程序会调用它。</p><p>这同样适用于变量，前提是调用方能够访问该变量（也就是变量对尝试访问它的代码是可见的）。随着您逐渐精通 Java 编程，此细节可能会让您非常伤心。但是，Eclipse 提供了大量的警告来提示您正在隐藏来自超类的变量，或者方法调用没有调用您认为它应调用的实体。</p><p>在 OOP 上下文中，<em>抽象</em>是指将数据和行为一般化为某种类型，这种类型在继承分层结构中比当前类具有更高的层级。将变量或方法从一个子类移动到一个超类时，就可以说是在<em>抽象化</em>这些成员。这么做的主要目的是，通过将通用的代码推送到分层结构中尽可能高的层级，从而重用这些代码。将通用的代码放在一个位置也更容易维护。</p><h4 id=\"N1081F\" class=\"ibm-h4\">抽象类和方法</h4><p>有时，您希望创建一些仅用作抽象，而不是必需实例化的类。这些类称为<em>抽象类</em>。出于同样的原因，有时需要以不同的方式为每个实现超类的子类实现某些方法。这些方法是<em>抽象方法</em>。以下是抽象类和抽象方法的一些基本规则：</p><ul class=\"ibm-bullet-list\"><li>可将任何类声明为&nbsp;<code>abstract</code>。</li><li>无法实例化抽象类。</li><li>抽象方法不能包含一个方法主体。</li><li>任何包含抽象方法的类都必须声明为&nbsp;<code>abstract</code>。</li></ul><h4 id=\"N1083B\" class=\"ibm-h4\">使用抽象</h4><p>假设您不允许直接实例化&nbsp;<code>Employee</code>&nbsp;类。使用&nbsp;<code>abstract</code>&nbsp;关键字声明它即可：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_932066\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public abstract class Employee extends Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// etc.</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果尝试运行此代码，会出现一个编译错误：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_723934\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public void someMethodSomwhere() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee p = new Employee();// compile error!!</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>编译器抱怨&nbsp;<code>Employee</code>&nbsp;是抽象的，因此无法实例化。</p><h4 id=\"N10857\" class=\"ibm-h4\">抽象的力量</h4><p>假设您需要一个方法来检查&nbsp;<code>Employee</code>&nbsp;对象的状态并确保该对象是有效的。此需求似乎在所有&nbsp;<code>Employee</code>&nbsp;对象中很常见，但它的行为在所有完全无法重用它的潜在子类中具有巨大的差别。在这种情况下，可将&nbsp;<code>validate()</code>&nbsp;方法声明为&nbsp;<code>abstract</code>（强制所有子类实现它）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_594065\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public abstract class Employee extends Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public abstract boolean validate();</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>Employee</code>&nbsp;的每个直接子类（比如&nbsp;<code>Manager</code>）现在必须实现&nbsp;<code>validate()</code>&nbsp;方法。但是，一旦一个子类实现了&nbsp;<code>validate()</code>&nbsp;方法，该子类的所有子类都不需要实现它了。</p><p>例如，假设您拥有一个扩展了&nbsp;<code>Manager</code>&nbsp;的&nbsp;<code>Executive</code>&nbsp;对象。此定义是有效的：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_838038\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Executive extends Manager {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Executive() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10887\" class=\"ibm-h4\">何时（不）抽象化：两条规则</h4><p>首个经验规则是，不要在初始设计中抽象化。在设计工作的早期使用抽象类会迫使您进入某条路径，而且这可能对应用程序造成限制。请记住，始终可在继承图中的更高层级上重构共有的行为（这是拥有抽象类的唯一理由）。发现您的确需要重构时，最好进行重构。Eclipse 对重构提供了极好的支持。</p><p>第二，尽管抽象类很强大，但一定要抵制住诱惑。除非超类包含大量相同的行为，而且该行为本身没有意义，否则要保持它们非抽象化。层次较深的继承图可能使代码维护工作变得很困难。要在超级大类与可维护的代码之间实现一种平衡。</p><h3 id=\"N10890\" class=\"ibm-h3\">赋值：类</h3><p>您可将一个引用从一个类赋给某个类型的变量（属于另一个类），但要遵守一些规则。看看这个示例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_481594\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Manager m = new Manager();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Employee e = new Employee();</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Person p = m; // okay</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">p = e; // still okay</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">Employee e2 = e; // yep, okay</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">e = m; // still okay</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">e2 = p; // wrong!</code></div></div></td></tr></tbody></table></div></div></div><p>目标变量必须是属于来源引用的类的超类型，否则编译器会报错。基本来讲，赋值等式的右侧必须是左侧实体的子类或同一个类。如果不是，可将具有不同继承图的对象（比如&nbsp;<code>Manager</code>&nbsp;和&nbsp;<code>Employee</code>）的赋值赋给错误类型的变量。 现在考虑这个示例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_943235\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Manager m = new Manager();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Person p = m; // so far so good</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Employee e = m; // okay</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">Employee e = p; // wrong!</code></div></div></td></tr></tbody></table></div></div></div><p>尽管&nbsp;<code>Employee</code>&nbsp;是一个&nbsp;<code>Person</code>，但它几乎肯定不是&nbsp;<code>Manager</code>，而且编译器会保持这种差别。</p><h2 id=\"N10A02\" class=\"ibm-h2\">接口</h2><p>在本节中，您开始学习接口，并开始在 Java 代码中使用它们。</p><h3 id=\"N108B8\" class=\"ibm-h3\">定义一个接口</h3><p><em>接口</em>是实现者必须提供其代码的一组指定的行为（或常量数据元素）。接口指定该实现所提供的行为，而不是如何完成该行为。</p><p>定义接口非常简单：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_673567\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public interfaceinterfaceName {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">returnType methodName(argumentList);</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>接口声明看起来很像类声明，不过要使用&nbsp;<code>interface</code>&nbsp;关键字。可将接口命名为想要的任何（符合语言规则的）名称，但根据约定，接口名称要与类名称类似。</p><p>接口中定义的方法没有方法主体。接口的实现者负责提供方法主体（与抽象方法一样）。</p><p>定义接口的分层结构时也与类一样，但一个类可实现任意多个想要的接口。（请记住，一个类只能扩展一个类。）如果一个类扩展了另一个类并实现了一个或多个接口，这些接口会在扩展的类后面列出，类似这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_305282\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee implements BonusEligible, StockOptionRecipient {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Etc...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N108DC\" class=\"ibm-h4\">标记接口</h4><p>接口完全不需要拥有任何主体。举例而言，完全可以接受下面的定义：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_914355\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public interface BonusEligible {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>一般而言，这些接口称为<em>标记接口</em>，因为它们将一个类标记为实现该接口，但未提供任何特殊的显式行为。</p><p>了解这一点后，实际定义接口就很轻松了：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_657831\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public interface StockOptionRecipient {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">void processStockOptions(int numberOfOptions, BigDecimal price);</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N108F2\" class=\"ibm-h3\">实现接口</h3><p>要使用一个接口，需要<em>实现</em>它，这意味着要提供一个方法主体来进一步提供可履行接口契约的行为。可使用&nbsp;<code>implements</code>&nbsp;关键字来实现接口：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_483557\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">className</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">extends</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">superclassName</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">implements</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">interfaceName {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Class Body</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>假设您在&nbsp;<code>Manager</code>&nbsp;类上实现&nbsp;<code>StockOptionRecipient</code>&nbsp;接口，如清单 17 所示：</p><h5 id=\"listing17\" class=\"ibm-h5\">清单 17. 实现一个接口</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_512880\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee implements StockOptionRecipient {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Manager() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void processStockOptions (int numberOfOptions, BigDecimal price) {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"I can\'t believe I got \" + number + \" options at $\" +</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">price.toPlainString() + \"!\"); </code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>实现该接口时，需要提供该接口上的一个或多个方法的行为。必须使用与接口上的签名相匹配的签名来实现这些方法，还需要添加&nbsp;<code>public</code>&nbsp;访问修饰符。</p><h4 id=\"N1091E\" class=\"ibm-h4\">在 Eclipse 中生成接口</h4><p>如果您确定您的一个类应该实现一个接口，Eclipse 可轻松地为您生成正确的方法签名。只需更改类签名来实现该接口。Eclipse 在该类下面添加了一条红色的波浪线，将它标记为错误，因为该类没有提供接口上的方法。单击类名，按 Ctrl + 1，Eclipse 会提供“快速修复”建议。在这些建议中，选择&nbsp;<span>Add Unimplemented Methods</span>，Eclipse 就会生成这些方法，将它们放在源文件的底部。</p><p>抽象类可以声明它实现了一个特定的接口，但不需要您实现该接口上的所有方法。 不需要抽象类提供它们声称要实现的所有方法的实现。但是，第一个具体的类（也就是第一个可实例化的类）必须实现分层结构没有实现的所有方法。</p><h3 id=\"N1092A\" class=\"ibm-h3\">使用接口</h3><p>接口定义了一种全新的<em>引用</em>数据类型，在您要引用类的任何地方，可使用该类型引用接口。声明一个引用变量或从一种类型转换为另一种类型时可使用该功能，如清单 18 所示。</p><h5 id=\"listing18\" class=\"ibm-h5\">清单 18. 将一个新&nbsp;<code>Manager</code>&nbsp;实例赋给&nbsp;<code>StockOptionEligible</code>&nbsp;引用</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_879184\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">import java.math.BigDecimal;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">import org.junit.Test;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">public class ManagerTest {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void testCalculateAndAwardStockOptions() {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StockOptionEligible soe = new Manager();// perfectly valid</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculateAndAwardStockOptions(soe);</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">calculateAndAwardStockOptions(new Manager());// works too</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static void calculateAndAwardStockOptions(StockOptionEligible soe) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">BigDecimal reallyCheapPrice = BigDecimal.valueOf(0.01);</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int numberOfOptions = 10000;</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">soe.awardStockOptions(numberOfOptions, reallyCheapPrice);</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如您所见，可以有效地将一个新的&nbsp;<code>Manager</code>&nbsp;实例赋给一个&nbsp;<code>StockOptionEligible</code>&nbsp;引用，以及将一个新的&nbsp;<code>Manager</code>&nbsp;实例传递给一个想要&nbsp;<code>StockOptionEligible</code>&nbsp;引用的方法。</p><h3 id=\"N10950\" class=\"ibm-h3\">赋值：接口</h3><p>可以将来自一个类（实现了一个接口的）的引用赋给一个接口类型的变量，但要遵守一些规则。从<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing18\">清单 18</a>&nbsp;中可以看到，将一个&nbsp;<code>Manager</code>&nbsp;实例赋给&nbsp;<code>StockOptionEligible</code>&nbsp;变量引用是有效的。原因是&nbsp;<code>Manager</code>&nbsp;类实现了该接口。但是，以下赋值无效：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_114456\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Manager m = new Manager();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">StockOptionEligible soe = m; //okay</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;</code><code class=\"htmlscript plain\">Employee e = soe; // Wrong!</code></div></div></td></tr></tbody></table></div></div></div><p>因为&nbsp;<code>Employee</code>&nbsp;是&nbsp;<code>Manager</code>&nbsp;的超类型，所以此代码最初看起来没有问题，但其实不然。因为&nbsp;<code>Manager</code>&nbsp;是一个特殊化的&nbsp;<code>Employee</code>，所以它是不同的，而且在这个特定的例子中实现了一个&nbsp;<code>Employee</code>&nbsp;没有的接口。</p><p>像这样的赋值应遵守您在“<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#inheritance\">继承</a>”节中看到的赋值规则。而且与类一样，只能将一个接口引用赋给一个具有相同类型或超接口类型的变量。</p><h2 id=\"N10AEB\" class=\"ibm-h2\">嵌套类</h2><p>在本节中，您将学习嵌套类，在何处以及如何使用它们。</p><h3 id=\"N10984\" class=\"ibm-h3\">在何处使用嵌套类</h3><p>顾名思义，<em>嵌套类</em>是在一个类中定义的另一个类。这是一个嵌套类：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_877497\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class EnclosingClass {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public class NestedClass {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number5 index4 alt2\">&nbsp;</div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>与成员变量和方法一样，也可在任何范围内定义 Java 类，包括&nbsp;<code>public</code>、<code>private</code>&nbsp;或&nbsp;<code>protected</code>。如果希望以一种面向对象的方式执行类中的内部处理，嵌套类可能很有用，但此功能仅限于需要它的类。</p><p>通常，需要一个与定义它的类紧密耦合的类时，可使用嵌套类。嵌套类能够访问包含它的类中的私有数据，但此结构会带来一些负面影响，开始使用嵌套（或内部）类时这些影响并不明显。</p><h3 id=\"N1099F\" class=\"ibm-h3\">嵌套类中的范围</h3><p>因为嵌套类具有范围，所以它受范围规则的约束。例如，只能通过该类的实例（对象）访问一个成员变量。嵌套类也是如此。</p><p>假设在&nbsp;<code>Manager</code>&nbsp;和一个名为&nbsp;<code>DirectReports</code>&nbsp;的嵌套类之间具有以下关系，后者是一个向&nbsp;<code>Manager</code>&nbsp;报告工作情况的&nbsp;<code>Employee</code>集合：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_894521\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private DirectReports directReports;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Manager() {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.directReports = new DirectReports();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private class DirectReports {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>就像每个&nbsp;<code>Manager</code>&nbsp;对象表示一个唯一的人一样，<code>DirectReports</code>&nbsp;对象表示一组向经理报告工作情况的真实的人（员工）。在不同的&nbsp;<code>Manager</code>&nbsp;之间&nbsp;<code>DirectReports</code>&nbsp;是不同的。在本例中，仅在包含&nbsp;<code>DirectReports</code>&nbsp;嵌套类的&nbsp;<code>Manager</code>&nbsp;实例中引用该类是合理的，所以我将它声明为&nbsp;<code>private</code>。</p><h4 id=\"N109CF\" class=\"ibm-h4\">公共嵌套类</h4><p>因为 DirectReports 是&nbsp;<code>private</code>，所以只有&nbsp;<code>Manager</code>&nbsp;可创建&nbsp;<code>DirectReports</code>&nbsp;实例。但是假设您想为一个外部实体提供创建&nbsp;<code>DirectReports</code>&nbsp;实例的能力。在这种情况下，似乎可以为&nbsp;<code>DirectReports</code>&nbsp;类提供&nbsp;<code>public</code>&nbsp;范围，然后任何外部代码即可创建<code>DirectReports</code>&nbsp;实例，如清单 19 所示。</p><h5 id=\"listing19\" class=\"ibm-h5\">清单 19. 创建&nbsp;<code>DirectReports</code>&nbsp;实例：第一次尝试</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_757885\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Manager() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public class DirectReports {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">//</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Manager.DirectReports dr = new Manager.DirectReports();// This won\'t work!</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing19\">清单 19</a>&nbsp;中的代码无法工作，而且您可能知道原因是什么。 问题（和它的解决方案）依赖于在&nbsp;<code>Manager</code>&nbsp;中定义&nbsp;<code>DirectReports</code>的方式，以及范围规则。</p><h4 id=\"N10A01\" class=\"ibm-h4\">再讲讲范围规则</h4><p>如果有一个&nbsp;<code>Manager</code>&nbsp;的成员变量，您会认为编译器会要求您拥有&nbsp;<code>Manager</code>&nbsp;对象的引用，然后才能引用它，对吧？<code>DirectReports</code>&nbsp;也是如此，至少您在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing19\">清单 19</a>&nbsp;中定义它时是这样。</p><p>要创建一个公共嵌套类的实例，需要使用&nbsp;<code>new</code>&nbsp;运算符的一个特殊版本。结合使用对一个外部类的封闭实例的引用，<code>new</code>&nbsp;允许创建嵌套类的实例：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_326611\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public Manager() {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public class DirectReports {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in another method somewhere...</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Manager manager = new Manager();</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Manager.DirectReports dr = manager.new DirectReports();</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>请注意封闭实例引用的语法调用：加上一个点和&nbsp;<code>new</code>&nbsp;关键字，后跟想要创建的类。</p><h3 id=\"N10A28\" class=\"ibm-h3\">静态内部类</h3><p>有时，您想创建一个（在概念上）与另一个类紧密耦合的类，但范围规则比较宽松，不需要封闭实例的引用。这时就需要静态内部类发挥作用了。一个常见的示例是实现一个&nbsp;<code>Comparator</code>，用于比较同一个类的两个实例，通常用于对类进行排序（或分类）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_459917\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Manager extends Employee {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static class ManagerComparator implements Comparator&lt;</code><code class=\"htmlscript plain\">Manager</code><code class=\"htmlscript plain\">&gt; {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">// Meanwhile, in another method somewhere...</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">public static void main(String[] args) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Manager.ManagerComparator mc = new Manager.ManagerComparator();</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">...</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在本例中，您不需要封闭实例。静态内部类的行为与它们的对应常规 Java 类类似，而且仅在需要将一个类与它的定义紧密耦合时才使用静态内部类。显然，对于像&nbsp;<code>ManagerComparator</code>&nbsp;这样的实用程序类，创建外部类没有必要，而且可能让代码库变的很乱。将这些类定义为静态内部类是一种解决办法。</p><h3 id=\"N10A3B\" class=\"ibm-h3\">匿名内部类</h3><p>使用 Java 语言时，您可在任何地方声明类，如有必要，甚至可在一个方法内声明，而且甚至无需为类提供名称。此功能基本来讲是一种编译器窍门，但有时拥有匿名内部类很方便。</p><p>清单 20 构建于<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing17\">清单 17</a>&nbsp;中的示例之上，添加了一个默认方法来处理不属于&nbsp;<code>StockOptionEligible</code>&nbsp;的&nbsp;<code>Employee</code>&nbsp;类型。该清单首先显示&nbsp;<code>HumanResourcesApplication</code>&nbsp;中一个处理库存选项的方法，然后是一个驱动该方法的 JUnit 测试：</p><h5 id=\"listing20\" class=\"ibm-h5\">清单 20. 处理不属于&nbsp;<code>StockOptionEligible</code>&nbsp;的&nbsp;<code>Employee</code>&nbsp;类型</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_963650\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div><div class=\"line number37 index36 alt2\" style=\"text-align: right;\">37</div><div class=\"line number38 index37 alt1\" style=\"text-align: right;\">38</div><div class=\"line number39 index38 alt2\" style=\"text-align: right;\">39</div><div class=\"line number40 index39 alt1\" style=\"text-align: right;\">40</div><div class=\"line number41 index40 alt2\" style=\"text-align: right;\">41</div><div class=\"line number42 index41 alt1\" style=\"text-align: right;\">42</div><div class=\"line number43 index42 alt2\" style=\"text-align: right;\">43</div><div class=\"line number44 index43 alt1\" style=\"text-align: right;\">44</div><div class=\"line number45 index44 alt2\" style=\"text-align: right;\">45</div><div class=\"line number46 index45 alt1\" style=\"text-align: right;\">46</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">// From HumanResourcesApplication.java</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public void handleStockOptions(final Person person, StockOptionProcessingCallback callback) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (person instanceof StockOptionEligible) {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Eligible Person, invoke the callback straight up</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">callback.process((StockOptionEligible)person);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} else if (person instanceof Employee) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Not eligible, but still an Employee.Let\'s cobble up a</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">/// anonymous inner class implementation for this</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">callback.process(new StockOptionEligible() {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void awardStockOptions(int number, BigDecimal price) {</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// This employee is not eligible</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.warning(\"It would be nice to award \" + number + \" of shares at $\" +</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">price.setScale(2, RoundingMode.HALF_UP).toPlainString() +</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\", but unfortunately, Employee \" + person.getName() + </code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\" is not eligible for Stock Options!\");</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">});</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} else {</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">callback.process(new StockOptionEligible() {</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void awardStockOptions(int number, BigDecimal price) {</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.severe(\"Cannot consider awarding \" + number + \" of shares at $\" +</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">price.setScale(2, RoundingMode.HALF_UP).toPlainString() +</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\", because \" + person.getName() + </code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\" does not even work here!\");</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">});</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript plain\">// JUnit test to drive it (in HumanResourcesApplicationTest.java):</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript plain\">public void testHandleStockOptions() {</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Person</code><code class=\"htmlscript plain\">&gt; people = HumanResourcesApplication.createPeople();</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StockOptionProcessingCallback callback = new StockOptionProcessingCallback() {</code></div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number37 index36 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void process(StockOptionEligible stockOptionEligible) {</code></div><div class=\"line number38 index37 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">BigDecimal reallyCheapPrice = BigDecimal.valueOf(0.01);</code></div><div class=\"line number39 index38 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int numberOfOptions = 10000;</code></div><div class=\"line number40 index39 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">stockOptionEligible.awardStockOptions(numberOfOptions, reallyCheapPrice);</code></div><div class=\"line number41 index40 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number42 index41 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">};</code></div><div class=\"line number43 index42 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (Person person : people) {</code></div><div class=\"line number44 index43 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">classUnderTest.handleStockOptions(person, callback);</code></div><div class=\"line number45 index44 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number46 index45 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>在这个示例中，我提供了两个使用匿名内部类的接口实现。首先是&nbsp;<code>StockOptionEligible</code>&nbsp;的两个不同实现 — 一个用于<code>Employee</code>，另一个用于&nbsp;<code>Person</code>（以便符合接口要求）。然后是一个&nbsp;<code>StockOptionProcessingCallback</code>&nbsp;实现，用于处理&nbsp;<code>Manager</code>&nbsp;实例的库存选项。</p><p>需要一定的时间才能掌握匿名内部类，但它们使用起来非常方便。我一直在 Java 代码中使用它们。而且随着您作为 Java 开发人员不断进步，我相信您也会这么做。</p><h2 id=\"N10BF9\" class=\"ibm-h2\">正则表达式</h2><p><em>正则表达式</em>基本来讲是一种模式，描述一组具有该共同模式的字符串。如果您是 Perl 程序员，应该非常熟悉 Java 语言中的正则表达式 (regex) 模式语法。但是，如果您不习惯使用正则表达式语法，它可能看起来很怪异。本节指导您在 Java 程序中使用正则表达式。</p><h3 id=\"N10A7C\" class=\"ibm-h3\">Regular Expressions API</h3><p>下面是一组具有某些共性的字符串：</p><ul class=\"ibm-bullet-list\"><li>A string</li><li>A longer string</li><li>A much longer string</li></ul><p>请注意，这些字符串中的每一个都以&nbsp;<em>a</em>&nbsp;开头，以&nbsp;<em>string</em>&nbsp;结尾。<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/package-summary.html\">Java Regular Expressions API</a>&nbsp;可帮助您将这些元素提取出来，查看它们之间的模式，然后使用已收集的信息做有趣的工作。</p><p>Regular Expressions API 有 3 个您几乎总是在使用的核心类：</p><ul class=\"ibm-bullet-list\"><li><code>Pattern</code>&nbsp;描述一种字符串模式。</li><li><code>Matcher</code>&nbsp;测试一个字符串，查看它是否与模式匹配。</li><li><code>PatternSyntaxException</code>&nbsp;告诉您，无法接受您尝试定义的模式的某个方面。</li></ul><p>很快您就会开始使用简单的正则表达式模式，该模式使用了这些类。但是在这么做之前，看看 regex 模式语法。</p><h3 id=\"N10AA7\" class=\"ibm-h3\">regex 模式语法</h3><p><em>regex 模式</em>描述字符串的结构，表达式会尝试在输入字符串中查找该结构。这是正则表达式可能看起来有点奇怪的地方。但是，一旦您理解了该语法，就可以更轻松地解释它。表 2 列出了在模式字符串中使用的一些最常见的 regex 构造：</p><h5 id=\"table2\" class=\"ibm-h5\">表 2. 常见 regex 构造</h5><div id=\"DataTables_Table_1_wrapper\" class=\"dataTables_wrapper no-footer\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"ibm-data-table display dataTable no-footer dtr-inline ibm-widget-processed layui-table\" data-widget=\"datatable\" summary=\"A listing of the most common regular expressions pattern syntax.\" width=\"100%\" id=\"DataTables_Table_1\" role=\"grid\"><thead xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\"><th class=\"ibm-background-neutral-white-30 sorting_disabled\" scope=\"col\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">Regex 构造</th><th class=\"ibm-background-neutral-white-30 sorting_disabled\" scope=\"col\" rowspan=\"1\" colspan=\"1\" style=\"text-align: left;\">符合匹配条件的内容</th></tr></thead><tbody xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><tr role=\"row\" class=\"odd\"><td tabindex=\"0\">.</td><td>任何字符</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>?</code></td><td>前面的零 (0) 或一 (1) 个字符或数字</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>*</code></td><td>前面的零 (0) 或更多个字符或数字</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>+</code></td><td>前面的一 (1) 或更多个字符或数字</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>[]</code></td><td>一个字符或数字范围</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>^</code></td><td>后面的条件的否定（即“非<em>后面的条件</em>”）</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>\\d</code></td><td>任何数字（也可表示为&nbsp;<code>[0-9]</code>）</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>\\D</code></td><td>任何非数字（也可表示为&nbsp;<code>[^0-9]</code>）</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>\\s</code></td><td>任何空格字符（也可表示为&nbsp;<code>[\\n\\t\\f\\r]</code>）</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>\\S</code></td><td>任何非空格字符（也可表示为&nbsp;<code>[^\\n\\t\\f\\r]</code>）</td></tr><tr role=\"row\" class=\"odd\"><td tabindex=\"0\"><code>\\w</code></td><td>任何单词字符（也可表示为&nbsp;<code>[a-zA-Z_0-9]</code>）</td></tr><tr role=\"row\" class=\"even\"><td tabindex=\"0\"><code>\\W</code></td><td>任何非单词字符（也可表示为&nbsp;<code>[^\\w]</code>）</td></tr></tbody></table></div><p>前几种构造称为<em>量词</em>，因为它们对之前的内容进行量化。<code>\\d</code>&nbsp;等构造是预定义的字符类。任何在一种模式中没有特殊含义的字符都是文字并与自身匹配。</p><h4 id=\"N10B2A\" class=\"ibm-h4\">模式匹配</h4><p>掌握<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#table2\">表 2</a>&nbsp;中的模式语法后，就能理解清单 21 中的简单示例了，这个示例使用了 Java Regular Expressions API 中的类。</p><h5 id=\"listing21\" class=\"ibm-h5\">清单 21. 使用 regex 进行模式匹配</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_136984\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Pattern pattern = Pattern.compile(\"a.*string\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Matcher matcher = pattern.matcher(\"a string\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean didMatch = matcher.matches();</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info (didMatch);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int patternStartIndex = matcher.start();</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info (patternStartIndex);</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int patternEndIndex = matcher.end();</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info (patternEndIndex);</code></div></div></td></tr></tbody></table></div></div></div><p>首先，<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing21\">清单 21</a>&nbsp;调用&nbsp;<code>compile()</code>（<code>Pattern</code>&nbsp;上的一个静态方法）来创建一个&nbsp;<code>Pattern</code>&nbsp;类，并使用一个字符串文字来表示想要匹配的模式。该文字使用了 regex 模式语法。在本例中，该模式的中文翻译为：</p><p><em>找到一个具有以下形式的字符串：<code>a</code>&nbsp;后跟零或更多个字符，然后是&nbsp;<code>string</code></em>。</p><h4 id=\"N10B55\" class=\"ibm-h4\">匹配方法</h4><p>接下来，<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing21\">清单 21</a>&nbsp;在&nbsp;<code>Pattern</code>&nbsp;上调用&nbsp;<code>matcher()</code>。该调用创建一个&nbsp;<code>Matcher</code>&nbsp;实例。 然后&nbsp;<code>Matcher</code>&nbsp;搜索您传入的字符串，寻找与您在创建&nbsp;<code>Pattern</code>&nbsp;时使用的模式字符串相匹配的结果。</p><p>每个 Java 语言字符串都是一个带索引的字符集合，索引从 0 开始，到字符串长度减 1 结束。<code>Matcher</code>&nbsp;从 0 开始解析该字符串，寻找与它匹配的结果。处理完成后，<code>Matcher</code>&nbsp;包含有关在输入字符串中找到（或未找到）匹配结果的信息。可在&nbsp;<code>Matcher</code>上调用各种方法来访问该信息：</p><ul class=\"ibm-bullet-list\"><li><code>matches()</code>&nbsp;告诉您整个输入序列是否与该模式准确匹配。</li><li><code>start()</code>&nbsp;告诉您匹配的字符串在输入字符串中开始处的索引值。</li><li><code>end()</code>&nbsp;告诉您匹配的字符串在输入字符串中结束处的索引值加 1 的结果。</li></ul><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing21\">清单 21</a>&nbsp;找到了一个从 0 开始，到 7 结束的匹配结果。因此，调用&nbsp;<code>matches()</code>&nbsp;会返回&nbsp;<code>true</code>，调用&nbsp;<code>start()</code>&nbsp;会返回&nbsp;<code>0</code>，调用&nbsp;<code>end()</code>&nbsp;会返回&nbsp;<code>8</code>。</p><h4 id=\"N10B9E\" class=\"ibm-h4\"><code>lookingAt()</code>&nbsp;与&nbsp;<code>matches()</code></h4><p>如果字符串中的元素比搜索模式中的字符要多，可使用&nbsp;<code>lookingAt()</code>&nbsp;代替&nbsp;<code>matches()</code>。<code>lookingAt()</code>&nbsp;搜索与给定模式匹配的子字符串。例如，考虑下面这个字符串：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_950967\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Here is a string with more than just the pattern.</code></div></div></td></tr></tbody></table></div></div></div><p>您可在此字符串中搜索&nbsp;<code>a.*string</code>，而且如果使用&nbsp;<code>lookingAt()</code>，就会获得一个匹配结果。但是如果使用&nbsp;<code>matches()</code>，就会返回&nbsp;<code>false</code>，因为字符串中包含的内容比模式中的多。</p><h3 id=\"N10BC4\" class=\"ibm-h3\">regex 中的复杂模式</h3><p>可使用 regex 类轻松完成简单的搜索，同时也可使用 Regular Expressions API 执行非常复杂的操作。</p><p><em>Wiki</em>（允许用户修改页面的、基于 Web 的系统）几乎完全基于正则表达式。Wiki 内容基于用户的字符串输入，并且使用正则表达式来解析和格式化该输入。 任何用户都可输入一个 wiki 词组，从而在 wiki 中创建另一个主题的链接，这个词组通常是一系列串联的单词，每个单词以一个大写字母开头，类似这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_928761\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">MyWikiWord</code></div></div></td></tr></tbody></table></div></div></div><p>假设一个用户输入下面这个字符串：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_946085\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Here is a WikiWord followed by AnotherWikiWord, then YetAnotherWikiWord.</code></div></div></td></tr></tbody></table></div></div></div><p>您可使用 regex 模式在这个字符串中搜索 wiki 单词，类似这样：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_62827\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">[A-Z][a-z]*([A-Z][a-z]*)+</code></div></div></td></tr></tbody></table></div></div></div><p>下面是搜索 wiki 单词的代码：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_740812\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String input = \"Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.\";</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Pattern pattern = Pattern.compile(\"[A-Z][a-z]*([A-Z][a-z]*)+\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Matcher matcher = pattern.matcher(input);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">while (matcher.find()) {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"Found this wiki word:\" + matcher.group());</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>运行此代码，应在控制台中看到 3 个 wiki 单词。</p><h4 id=\"N10BE7\" class=\"ibm-h4\">替换字符串</h4><p>搜索匹配内容很有用，但也可在找到匹配字符串后操作它们。您可将匹配的字符串替换为其他字符串，就像在文字处理程序中搜索一些文本并将它替换为其他文本一样。&nbsp;<code>Matcher</code>&nbsp;有两个替换字符串元素的方法：</p><ul class=\"ibm-bullet-list\"><li><code>replaceAll()</code>&nbsp;将所有匹配值替换为一个指定的字符串。</li><li><code>replaceFirst()</code>&nbsp;仅将第一个匹配值替换为一个指定的字符串。</li></ul><p>使用&nbsp;<code>Matcher</code>&nbsp;的&nbsp;<code>replace</code>&nbsp;方法很简单：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_517969\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String input = \"Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.\";</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Pattern pattern = Pattern.compile(\"[A-Z][a-z]*([A-Z][a-z]*)+\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Matcher matcher = pattern.matcher(input);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"Before:\" + input);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">String result = matcher.replaceAll(\"replacement\");</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"After:\" + result);</code></div></div></td></tr></tbody></table></div></div></div><p>与之前一样，此代码会查找 wiki 单词。<code>Matcher</code>&nbsp;找到一个匹配值时，它会将该 wiki 单词文本替换为相应的替换值。运行该代码时，可在控制台上看到以下消息：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_902223\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Before:Here is WikiWord followed by AnotherWikiWord, then SomeWikiWord.</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">After:Here is replacement followed by replacement, then replacement.</code></div></div></td></tr></tbody></table></div></div></div><p>如果使用&nbsp;<code>replaceFirst()</code>，则会看到此消息：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_179763\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Before:Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">After:Here is a replacement followed by AnotherWikiWord, then SomeWikiWord.</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N10C18\" class=\"ibm-h3\">匹配和操作分组</h3><p>搜索一个 regex 模式的匹配结果时，可获得有关找到的结果的信息。您已在&nbsp;<code>Matcher</code>&nbsp;的&nbsp;<code>start()</code>&nbsp;和&nbsp;<code>end()</code>&nbsp;方法上看到过该功能。但也可以通过捕获<em>分组</em>来引用匹配值。</p><p>在每种模式中，通常通过将模式的各部分放在圆括号中来创建分组。分组从左向右编号，从 1 开始编号（分组 0 表示完整的匹配结果）。清单 22 中的代码将每个 wiki 单词替换为一个“包含”该单词的字符串：</p><h5 id=\"listing22\" class=\"ibm-h5\">清单 22. 匹配分组</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_987917\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">String input = \"Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.\";</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">Pattern pattern = Pattern.compile(\"[A-Z][a-z]*([A-Z][a-z]*)+\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">Matcher matcher = pattern.matcher(input);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"Before:\" + input);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">String result = matcher.replaceAll(\"blah$0blah\");</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"After:\" + result);</code></div></div></td></tr></tbody></table></div></div></div><p>运行<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing22\">清单 22</a>&nbsp;代码，应获得以下控制台输出：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_558427\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Before:Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">After:Here is a blahWikiWordblah followed by blahAnotherWikiWordblah,</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">then blahSomeWikiWordblah.</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10C3F\" class=\"ibm-h4\">另一种匹配分组的方法</h4><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing22\">清单 22</a>&nbsp;通过在替换字符串中包含&nbsp;<code>$0</code>&nbsp;来引用整个匹配结果。<code>$&nbsp;<em>int</em></code>&nbsp;格式的替换字符串的任何部分引用该整数所标识的分组（所以&nbsp;<code>$1</code>&nbsp;引用分组 1，依此类推）。换句话说，<code>$0</code>&nbsp;等效于&nbsp;<code>matcher.group(0);</code>。</p><p>也可使用其他方法实现同样的替换目标。无需调用&nbsp;<code>replaceAll()</code>，可以这样做：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_93497\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">StringBuffer buffer = new StringBuffer();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">while (matcher.find()) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">matcher.appendReplacement(buffer, \"blah$0blah\");</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">matcher.appendTail(buffer);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">Logger.getAnonymousLogger().info(\"After:\" + buffer.toString());</code></div></div></td></tr></tbody></table></div></div></div><p>也会获得同样的结果：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_833244\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Before:Here is a WikiWord followed by AnotherWikiWord, then SomeWikiWord.</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">After:Here is a blahWikiWordblah followed by blahAnotherWikiWordblah,</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">then blahSomeWikiWordblah.</code></div></div></td></tr></tbody></table></div></div></div><h2 id=\"N10E30\" class=\"ibm-h2\">泛型</h2><p>JDK 5 中引入的泛型标志着 Java 语言的一次巨大进步。如果使用过 C++ 模板，会发现 Java 语言中的泛型与其很相似，但并非完全相同。如果未使用过 C++ 模板，不要担心：本节将概括介绍 Java 语言中的泛型。</p><h3 id=\"N10C6F\" class=\"ibm-h3\">什么是泛型？</h3><p>随着 JDK 5 的发布，Java 语言中突然出现了陌生且令人兴奋的新语法。基本来讲，一些熟悉的 JDK 类被替换为了等效的泛型。</p><p><em>泛型</em>是一种编译器机制，您可获取通用的代码并<em>参数化</em>（或<em>模板化</em>）剩余部分，从而以一种一般化的方式创建（和使用）一些实体类型（比如类或接口）。</p><h4 id=\"N10C80\" class=\"ibm-h4\">泛型实战</h4><p>要了解泛型有何作用，可考虑一个在 JDK 中存在已久的类示例：&nbsp;<code>java.util.ArrayList</code>，它是一个由数组支持的&nbsp;<code>Object</code>&nbsp;的&nbsp;<code>List</code>。</p><p>清单 23 展示了如何实例化&nbsp;<code>java.util.ArrayList</code>。</p><h5 id=\"listing23\" class=\"ibm-h5\">清单 23. 实例化&nbsp;<code>ArrayList</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_942802\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">ArrayList arrayList = new ArrayList();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"A String\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">arrayList.add(new Integer(10));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"Another String\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">// So far, so good.</code></div></div></td></tr></tbody></table></div></div></div><p>可以看到，<code>ArrayList</code>&nbsp;具有不同的形式：它包含两个&nbsp;<code>String</code>&nbsp;类型和一个&nbsp;<code>Integer</code>&nbsp;类型。在 JDK 5 之前，Java 语言对此行为没有任何约束，这导致了许多编码错误。举例而言，在<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing23\">清单 23</a>&nbsp;中，目前为止看起来一切正常。但要访问&nbsp;<code>ArrayList</code>&nbsp;中的元素怎么办，清单 24 尝试采用哪种方法？</p><h5 id=\"listing24\" class=\"ibm-h5\">清单 24. 尝试访问&nbsp;<code>ArrayList</code>&nbsp;中的元素</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_298075\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">ArrayList arrayList = new ArrayList();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"A String\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">arrayList.add(new Integer(10));</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"Another String\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">// So far, so good.</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">*processArrayList(arrayList);</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">*// In some later part of the code...</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">private void processArrayList(ArrayList theList) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; theList.size(); aa++) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// At some point, this will fail...</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String s = (String)theList.get(aa);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>如果以前不知道&nbsp;<code>ArrayList</code>&nbsp;中包含的内容，就必须检查要访问的元素，看看您是否能处理其类型，否则可能遇到<code>ClassCastException</code>。</p><p>借助泛型，可指定将哪些类型的内容放入&nbsp;<code>ArrayList</code>。清单 25 展示了如何执行该操作。</p><h5 id=\"listing25\" class=\"ibm-h5\">清单 25. 第二次尝试使用泛型</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_355520\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">ArrayList&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; arrayList = new ArrayList&lt;&gt;();</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"A String\");</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">arrayList.add(new Integer(10));// compiler error!</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">arrayList.add(\"Another String\");</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">// So far, so good.</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript plain\">*processArrayList(arrayList);</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">*// In some later part of the code...</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript plain\">private void processArrayList(ArrayList&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; theList) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (int aa = 0; aa &lt; theList.size(); aa++) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// No cast necessary...</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String s = theList.get(aa);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10CD1\" class=\"ibm-h4\">迭代泛型</h4><p>通过用特殊的语法来处理您常常希望逐个元素处理的实体（比如&nbsp;<code>List</code>），泛型让 Java 语言变得更强大。举例而言，如果想迭代&nbsp;<code>ArrayList</code>，可将<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing25\">清单 25</a>&nbsp;中的代码重写为：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_297802\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">private void processArrayList(ArrayList&lt;</code><code class=\"htmlscript plain\">String</code><code class=\"htmlscript plain\">&gt; theList) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (String s : theList) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String s = theList.get(aa);</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>此语法适用于任何&nbsp;<code>Iterable</code>（也就是实现了&nbsp;<code>Iterable</code>&nbsp;接口）的对象类型。</p><h3 id=\"N10CEE\" class=\"ibm-h3\">参数化的类</h3><p>参数化的类对于集合非常有用，所以使用集合时可考虑使用这种类。考虑（真实的）<code>List</code>&nbsp;接口，它表示一个有序的对象集合。在最常见的用例中，您向&nbsp;<code>List</code>&nbsp;中添加项，然后按索引或通过迭代&nbsp;<code>List</code>&nbsp;来访问这些项。</p><p>如果考虑参数化一个类，可考虑是否满足以下条件：</p><ul class=\"ibm-bullet-list\"><li>一个核心类位于某种包装器的中心。也就是位于类中心的“东西”可能应用很广泛，并且其特性（例如属性）是相同的。</li><li>相同的行为：无论类中心的“事务”是什么，您都会执行完全相同的操作。</li></ul><p>根据这两个条件，显然集合满足要求：</p><ul class=\"ibm-bullet-list\"><li>这个“事务”就是组成集合的类。</li><li>操作（比如&nbsp;<code>add</code>、<code>remove</code>、<code>size</code>&nbsp;和&nbsp;<code>clear</code>）完全相同，无论集合由哪些对象组成都是如此。</li></ul><h4 id=\"N10D18\" class=\"ibm-h4\">一个参数化的&nbsp;<code>List</code></h4><p>在泛型语法中，创建&nbsp;<code>List</code>&nbsp;的代码类似于：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_552591\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">E</code><code class=\"htmlscript plain\">&gt; listReference = new concreteListClass&lt;</code><code class=\"htmlscript plain\">E</code><code class=\"htmlscript plain\">&gt;();</code></div></div></td></tr></tbody></table></div></div></div><p><code>E</code>（代表元素）是我之前提到的“事务”。<code>concreteListClass</code>&nbsp;是您正在实例化的 JDK 的类。该 JDK 包含多个&nbsp;<code>List&lt;E&gt;</code>&nbsp;实现，但您使用&nbsp;<code>ArrayList&lt;E&gt;</code>。您可能看到的泛型类的另一种形式为&nbsp;<code>Class&lt;T&gt;</code>，其中&nbsp;<code>T</code>&nbsp;代表类型。在 Java 代码中看到&nbsp;<code>E</code>&nbsp;时，它通常是指一个某种类型的集合。看到&nbsp;<code>T</code>&nbsp;时，它表示一个参数化的类。</p><p>所以，要创建一个由&nbsp;<code>java.lang.Integer</code>&nbsp;组成的&nbsp;<code>ArrayList</code>，可以这么做：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_803118\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt; listOfIntegers = new ArrayList&lt;</code><code class=\"htmlscript plain\">Integer</code><code class=\"htmlscript plain\">&gt;();</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10D4D\" class=\"ibm-h4\"><code>SimpleList</code>：一个参数化的类</h4><p>现在假设您想创建自己的参数化类&nbsp;<code>SimpleList</code>，该类包含 3 个方法：</p><ul class=\"ibm-bullet-list\"><li><code>add()</code>&nbsp;将一个元素添加到&nbsp;<code>SimpleList</code>&nbsp;的末尾。</li><li><code>size()</code>&nbsp;返回&nbsp;<code>SimpleList</code>&nbsp;中当前的元素数量。</li><li><code>clear()</code>&nbsp;完全清除&nbsp;<code>SimpleList</code>&nbsp;的内容。</li></ul><p>清单 26 给出了参数化&nbsp;<code>SimpleList</code>&nbsp;的语法：</p><h5 id=\"listing26\" class=\"ibm-h5\">清单 26. 参数化&nbsp;<code>SimpleList</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_972200\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">import java.util.ArrayList;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">import java.util.List;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">public class SimpleList&lt;</code><code class=\"htmlscript plain\">E</code><code class=\"htmlscript plain\">&gt; {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private List&lt;</code><code class=\"htmlscript plain\">E</code><code class=\"htmlscript plain\">&gt; backingStore;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public SimpleList() {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">backingStore = new ArrayList&lt;</code><code class=\"htmlscript plain\">E</code><code class=\"htmlscript plain\">&gt;();</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public E add(E e) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">if (backingStore.add(e))</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return e;</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">else</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return null;</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public int size() {</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return backingStore.size();</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void clear() {</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">backingStore.clear();</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>可使用任何&nbsp;<code>Object</code>&nbsp;子类来参数化&nbsp;<code>SimpleList</code>。要创建并使用一个由&nbsp;<code>java.math.BigDecimal</code>&nbsp;对象组成的&nbsp;<code>SimpleList</code>，可以这样做：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_363811\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">import java.math.BigDecimal;</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">import java.util.logging.Logger;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">import org.junit.Test;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">public class SimpleListTest {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void testAdd() {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Logger log = Logger.getLogger(SimpleListTest.class.getName());</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">SimpleList&lt;</code><code class=\"htmlscript plain\">BigDecimal</code><code class=\"htmlscript plain\">&gt; sl = new SimpleList&lt;&gt;();</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">sl.add(BigDecimal.ONE);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"SimpleList size is :\" + sl.size());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">sl.add(BigDecimal.ZERO);</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"SimpleList size is :\" + sl.size());</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">sl.clear();</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"SimpleList size is :\" + sl.size());</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>而且会得到此输出：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_520030\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">Sep 20, 2015 10:24:33 AM com.makotojava.intro.SimpleListTest testAdd </code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">INFO:SimpleList size is:1 Sep 20, 2015 10:24:33 AM com.makotojava.intro.SimpleListTest testAdd </code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">INFO:SimpleList size is:2 Sep 20, </code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">2015 10:24:33 AM com.makotojava.intro.SimpleListTest testAdd </code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">INFO:SimpleList size is:0</code></div></div></td></tr></tbody></table></div></div></div><h3 id=\"N10D96\" class=\"ibm-h3\"><code>enum</code>&nbsp;类型</h3><p>在 JDK 5 中，Java 语言新添了一种名为&nbsp;<code>enum</code>&nbsp;的数据类型。不要与&nbsp;<code>java.util.Enumeration</code>&nbsp;混淆，<code>enum</code>&nbsp;表示一组与某个特定概念相关的常量对象，每个对象表示该集合中一个不同的常量值。将&nbsp;<code>enum</code>&nbsp;引入 Java 语言之前，必须按如下方式为一个概念（比如性别）定义一组常量值：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_449583\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class Person {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final String MALE = \"male\";</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static final String FEMALE = \"female\";</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>引用该常量值所需的代码可以像这样编写：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_806697\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public void myMethod() {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String genderMale = Person.MALE;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//...</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10DB5\" class=\"ibm-h4\">使用&nbsp;<code>enum</code>&nbsp;定义常量</h4><p>使用&nbsp;<code>enum</code>&nbsp;类型让常量的定义更加正式，而且更强大。这是&nbsp;<code>Gender</code>&nbsp;的&nbsp;<code>enum</code>&nbsp;定义：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_272356\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public enum Gender {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">MALE,</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">FEMALE</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>此示例仅简单介绍了&nbsp;<code>enum</code>&nbsp;用途的一点皮毛。事实上，<code>enum</code>&nbsp;非常像类，所以它们可拥有构造函数、属性和方法：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_721628\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public enum Gender {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">MALE(\"male\"),</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">FEMALE(\"female\");</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String displayName;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private Gender(String displayName) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.displayName = displayName;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\">&nbsp;</div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public String getDisplayName() {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return this.displayName;</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>类与&nbsp;<code>enum</code>&nbsp;的一个区别在于，<code>enum</code>&nbsp;的构造函数必须声明为&nbsp;<code>private</code>，而且它无法扩展（或继承自）其他&nbsp;<code>enum</code>。但是，一个&nbsp;<code>enum</code><em>可</em>实现一个接口。</p><h4 id=\"N10DEB\" class=\"ibm-h4\"><code>enum</code>&nbsp;实现一个接口</h4><p>假设您定义了一个接口&nbsp;<code>Displayable</code>：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_166721\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public interface Displayable {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public String getDisplayName();</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>Gender enum</code>&nbsp;可像这样实现这个接口（以及生成一个友好显式名称所需的其他任何&nbsp;<code>enum</code>）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_845869\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">package com.makotojava.intro;</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript plain\">public enum Gender implements Displayable {</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">MALE(\"male\"),</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">FEMALE(\"female\");</code></div><div class=\"line number6 index5 alt1\">&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private String displayName;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private Gender(String displayName) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">this.displayName = displayName;</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Override</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public String getDisplayName() {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return this.displayName;</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h2 id=\"N11010\" class=\"ibm-h2\">I/O</h2><p>本节将概述&nbsp;<code>java.io</code>&nbsp;包。您将学习如何使用它的一些工具来收集和操作各种不同来源的数据。</p><h3 id=\"N10E0F\" class=\"ibm-h3\">处理外部数据</h3><p>在 Java 程序中使用的数据常常来自外部数据源，比如数据库、通过套接字进行的直接字节传输或文件存储。Java 语言提供了许多工具从这些来源获取信息，其中大部分工具都位于&nbsp;<code>java.io</code>&nbsp;包中。</p><h3 id=\"N10E19\" class=\"ibm-h3\">文件</h3><p>在所有 Java 应用程序可用的数据源中，文件是最常见的，常常也是最方便的。如果想在 Java 应用程序中读取一个文件，必须使用<em>流</em>将传入的字节解析为 Java 语言类型。</p><p><code>java.io.File</code>&nbsp;是一个类，它在您的文件系统上定义资源并以一种抽象的方式表示该资源。创建&nbsp;<code>File</code>&nbsp;对象很容易：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_21976\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">File f = new File(\"temp.txt\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">File f2 = new File(\"/home/steve/testFile.txt\");</code></div></div></td></tr></tbody></table></div></div></div><p><code>File</code>&nbsp;构造函数接受它所创建的文件的名称。第一个调用在指定的目录中创建一个名为 temp.txt 的文件。第二个调用在我的 Linux 系统上的具体位置创建一个文件。您可将任何&nbsp;<code>String</code>&nbsp;传递至&nbsp;<code>File</code>&nbsp;的构造函数，只要文件名对 OS 而言是有效的，无论它引用的文件是否存在都是如此。</p><p>此代码向新创建的&nbsp;<code>File</code>&nbsp;对象询问该文件是否存在：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_448403\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">File f2 = new File(\"/home/steve/testFile.txt\");</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">if (f2.exists()) {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// File exists.Process it...</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">} else {</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// File doesn\'t exist.Create it...</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">f2.createNewFile();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>java.io.File</code>&nbsp;拥有其他方便的方法来删除文件；创建目录（通过将一个目录名称作为参数传递至&nbsp;<code>File</code>&nbsp;的构造函数）；确定一个资源是文件、目录还是符号链接；等等。</p><p>Java I/O 的实际操作是写入和读取数据源，这时就需要使用流。</p><h3 id=\"N10E4A\" class=\"ibm-h3\">在 Java I/O 中使用流</h3><p>可以使用流来访问文件系统上的文件。在最低限度上，流允许程序从来源接收字节或将输出发送至目标。一些流可处理所有类型的 16 位字符（<code>Reader</code>&nbsp;和&nbsp;<code>Writer</code>&nbsp;类型）。其他流只能处理 8 位字节（<code>InputStream</code>&nbsp;和&nbsp;<code>OutputStream</code>&nbsp;类型）。这些分层结构中包含多种风格的流，它们都可在&nbsp;<code>java.io</code>&nbsp;包中找到。在最高的抽象级别上是<em>字符流</em>和<em>字节流</em>。</p><p>字节流读（<code>InputStream</code>&nbsp;和子类）和写（<code>OutputStream</code>&nbsp;和子类）8 位字节。换句话说，可将字节流看作一种更加原始的流类型。下面总结了两种常见的字节流及其用法：</p><ul class=\"ibm-bullet-list\"><li><span>FileInputStream</span>&nbsp;/&nbsp;<span>FileOutputStream</span>： 从文件读取字节，将字节写入文件</li><li><span>ByteArrayInputStream</span>&nbsp;/&nbsp;<span>ByteArrayOutputStream</span>：从内存型数组读取字节，将字节写入内存型数组</li></ul><h4 id=\"N10E7D\" class=\"ibm-h4\">字符流</h4><p>字符流读（<code>Reader</code>&nbsp;和它的子类）和写（<code>Writer</code>&nbsp;和它的子类）16 位字符。下面是一个字符流清单及其用法：</p><ul class=\"ibm-bullet-list\"><li><code><span>StringReader</span></code>&nbsp;/&nbsp;<code><span>StringWriter</span></code>：在内存中的&nbsp;<code>String</code>&nbsp;中读取以及向其中写入字符。</li><li><code><span>InputStreamReader</span></code>&nbsp;/&nbsp;<code><span>InputStreamWriter</span></code>（和子类&nbsp;<code><span>FileReader</span></code>&nbsp;/&nbsp;<code><span>FileWriter</span></code>）：衔接字节流和字符流：<code>Reader</code>&nbsp;喜欢从字节流读取字节并将其转换为字符。<code>Writer</code>&nbsp;喜欢将字符转换为字节，从而将它们放在字节流上。</li><li><span>BufferedReader</span>&nbsp;/&nbsp;<span>BufferedWriter</span>： 在读取或写入另一个流时缓冲数据，使读写操作更高效。</li></ul><p>我不会介绍所有流，而是主要介绍读写文件时推荐使用的流。在大多数情况下，这些都是字符流。</p><h4 id=\"N10EB7\" class=\"ibm-h4\">从&nbsp;<code>File</code>&nbsp;读取数据</h4><p>可通过多种方式从&nbsp;<code>File</code>&nbsp;读取数据。无疑最简单的方法是：</p><ol><li>在想要从中读取数据的&nbsp;<code>File</code>&nbsp;上创建一个&nbsp;<code>InputStreamReader</code>。</li><li>调用&nbsp;<code>read()</code>&nbsp;可一次读取一个字符，直至到达文件末尾。</li></ol><p>清单 27 是一个从&nbsp;<code>File</code>&nbsp;读取数据的示例：</p><h5 id=\"listing27\" class=\"ibm-h5\">清单 27. 从&nbsp;<code>File</code>&nbsp;读取数据</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_327364\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div><div class=\"line number37 index36 alt2\" style=\"text-align: right;\">37</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; readFromDisk(String filename) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"readFromDisk(String filename)\";</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; ret = new ArrayList&lt;&gt;();</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (InputStreamReader reader = new InputStreamReader(new FileInputStream(file))) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StringBuilder sb = new StringBuilder();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int numberOfEmployees = 0;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int character = reader.read();</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (character != -1) {</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">sb.append((char)character);</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">character = reader.read();</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read file:\\n\" + sb.toString());</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int index = 0;</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (index &lt; sb.length()-1) {</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StringBuilder line = new StringBuilder();</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while ((char)sb.charAt(index) != \'\\n\') {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">line.append(sb.charAt(index++));</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StringTokenizer strtok = new StringTokenizer(line.toString(), Person.STATE_DELIMITER);</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee = new Employee();</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee.setState(strtok);</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read Employee:\" + employee.toString());</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(employee);</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">numberOfEmployees++;</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">index++;</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read \" + numberOfEmployees + \" employees from disk.\");</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"IOException occurred, </code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number37 index36 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10EE2\" class=\"ibm-h4\">写入&nbsp;<code>File</code></h4><p>与从&nbsp;<code>File</code>&nbsp;读取一样，可通过多种方式将数据写入&nbsp;<code>File</code>。我会再次介绍一下最简单的方法：</p><ol><li>在想要写入数据的&nbsp;<code>File</code>&nbsp;上创建一个&nbsp;<code>FileOutputStream</code>。</li><li>调用&nbsp;<code>write()</code>&nbsp;写入字符序列。</li></ol><p>清单 28 是一个将数据写入&nbsp;<code>File</code>&nbsp;的示例：</p><h5 id=\"listing28\" class=\"ibm-h5\">清单 28. 写入&nbsp;<code>File</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_775378\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public boolean saveToDisk(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"saveToDisk(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees)\";</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean ret = false;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file))) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Writing \" + employees.size() + \" employees to disk (as String)...\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (Employee employee : employees) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">writer.write(employee.getState()+\"\\n\");</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = true;</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Done.\");</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"IOException occurred, </code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10F0E\" class=\"ibm-h4\">缓冲流</h4><p>逐个字符地读和写字符流并不是高效的，所以在大部分情况下，您可能希望使用缓冲的 I/O。要使用缓冲的 I/O 从文件读取数据，代码与<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing27\">清单 27</a>&nbsp;中所示的类似，但要将&nbsp;<code>InputStreamReader</code>&nbsp;包装在一个&nbsp;<code>BufferedReader</code>&nbsp;中，如清单 29 所示。</p><h5 id=\"listing29\" class=\"ibm-h5\">清单 29. 使用缓冲的 I/O 从&nbsp;<code>File</code>&nbsp;读取数据</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_599992\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; readFromDiskBuffered(String filename) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"readFromDisk(String filename)\";</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; ret = new ArrayList&lt;&gt;();</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))) {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String line = reader.readLine();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int numberOfEmployees = 0;</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">while (line != null) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">StringTokenizer strtok = new StringTokenizer(line, Person.STATE_DELIMITER);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee employee = new Employee();</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">employee.setState(strtok);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read Employee:\" + employee.toString());</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(employee);</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">numberOfEmployees++;</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Read next line</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">line = reader.readLine();</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read \" + numberOfEmployees + \" employees from disk.\");</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"IOException occurred, </code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>使用缓冲的 I/O 将数据写入文件的过程相同：将&nbsp;<code>OutputStreamWriter</code>&nbsp;包装在一个&nbsp;<code>BufferedWriter</code>&nbsp;中，如清单 30 所示。</p><h5 id=\"listing30\" class=\"ibm-h5\">清单 30. 使用缓冲的 I/O 将数据写入&nbsp;<code>File</code></h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_863607\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public boolean saveToDiskBuffered(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees) {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"saveToDisk(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees)\";</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean ret = false;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file)))) {</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Writing \" + employees.size() + \" employees to disk (as String)...\");</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (Employee employee : employees) {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">writer.write(employee.getState()+\"\\n\");</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = true;</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Done.\");</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"IOException occurred, </code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>我仅简单介绍了这个基础 Java 库大量用途的一点皮毛。您可自行将所学的相关文件知识应用到其他数据源。</p><h2 id=\"N11181\" class=\"ibm-h2\">Java 序列化</h2><p>Java 序列化是 Java 平台的另一个基础库。 序列化主要用于对象持久化和对象远程传输，在这两种用例中，都需要能够获取对象状态的快照，这样在以后能重新构成它们。本节大体介绍 Java Serialization API，展示如何在程序中使用它。</p><h3 id=\"N10F44\" class=\"ibm-h3\">什么是对象序列化？</h3><p>在<em>序列化</em>过程中，会以一种特殊的二进制格式存储一个对象及其元数据（比如对象的类名称及其属性名称）的状态。将对象存储为此格式 —<em>序列化</em>它 — 可保留在需要时重新构成（或<em>反序列化</em>）该对象所必需的全部信息。</p><p>对象序列化有两种主要用例：</p><ul class=\"ibm-bullet-list\"><li><em>对象持久化</em>— 将对象的状态存储在一种永久的持久性机制中，比如数据库</li><li><em>对象远程传输</em>— 将对象发送至另一个计算机或系统</li></ul><h3 id=\"N10F64\" class=\"ibm-h3\"><code>java.io.Serializable</code></h3><p>实现序列化的第一步是让对象能够使用该机制。希望能够序列化的每个对象都必须实现一个名为&nbsp;<code>java.io.Serializable</code>&nbsp;的接口：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_19221\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">import java.io.Serializable;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript plain\">public class Person implements Serializable {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// etc...</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p><code>Serializable</code>&nbsp;接口将&nbsp;<code>Person</code>&nbsp;类 — 和&nbsp;<code>Person</code>&nbsp;的每个子类 — 向运行时标记为&nbsp;<em>serializable</em>。</p><p>如果 Java 运行时尝试序列化对象，无法序列化的对象的每个属性都会导致运行时抛出&nbsp;<code>NotSerializableException</code>。可使用<code>transient</code>&nbsp;关键字来管理此行为，告诉运行时不要尝试序列化某些属性。在此情况下，您要负责确保这些属性能被恢复，以便对象能正常运行。</p><h4 id=\"N10F8C\" class=\"ibm-h4\">序列化一个对象</h4><p>现在我们通过一个示例，尝试将刚学到的 Java I/O 知识与现在学习的序列化知识结合起来。</p><p>假设您创建并填充一个包含&nbsp;<code>Employee</code>&nbsp;对象的&nbsp;<code>List</code>，然后希望将该&nbsp;<code>List</code>&nbsp;序列化为一个&nbsp;<code>OutputStream</code>，在本例中是序列化为一个文件。 该过程如清单 31 所示。</p><h5 id=\"listing31\" class=\"ibm-h5\">清单 31. 序列化一个对象</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_65070\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div><div class=\"line number37 index36 alt2\" style=\"text-align: right;\">37</div><div class=\"line number38 index37 alt1\" style=\"text-align: right;\">38</div><div class=\"line number39 index38 alt2\" style=\"text-align: right;\">39</div><div class=\"line number40 index39 alt1\" style=\"text-align: right;\">40</div><div class=\"line number41 index40 alt2\" style=\"text-align: right;\">41</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class HumanResourcesApplication {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final Logger log = Logger.getLogger(HumanResourcesApplication.class.getName());</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final String SOURCE_CLASS = HumanResourcesApplication.class.getName();</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public static List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; createEmployees() {</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; ret = new ArrayList&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt;();</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">Employee e = new Employee(\"Jon Smith\", 45, 175, 75, \"BLUE\", Gender.MALE, </code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"123-45-9999\", \"0001\", BigDecimal.valueOf(100000.0));</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(e);</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e = new Employee(\"Jon Jones\", 40, 185, 85, \"BROWN\", Gender.MALE, \"223-45-9999\", </code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"0002\", BigDecimal.valueOf(110000.0));</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(e);</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e = new Employee(\"Mary Smith\", 35, 155, 55, \"GREEN\", Gender.FEMALE, \"323-45-9999\", </code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"0003\", BigDecimal.valueOf(120000.0));</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(e);</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">//</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">e = new Employee(\"Chris Johnson\", 38, 165, 65, \"HAZEL\", Gender.UNKNOWN, </code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\"423-45-9999\", \"0004\", BigDecimal.valueOf(90000.0));</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret.add(e);</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// Return list of Employees</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public boolean serializeToDisk(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees) {</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"serializeToDisk(String filename, List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees)\";</code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean ret = false;// default: failed</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(file))) {</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Writing \" + employees.size() + \" employees to disk (using Serializable)...\");</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">outputStream.writeObject(employees);</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = true;</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Done.\");</code></div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number37 index36 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number38 index37 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number39 index38 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number40 index39 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number41 index40 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>第一步是创建这些对象，在&nbsp;<code>createEmployees()</code>&nbsp;中使用&nbsp;<code>Employee</code>&nbsp;的特殊化构造函数和一些属性值来完成该工作。接下来创建一个&nbsp;<code>OutputStream</code>（在本例中为&nbsp;<code>FileOutputStream</code>），然后在该流上调用&nbsp;<code>writeObject()</code>。&nbsp;<code>writeObject()</code>&nbsp;是一个方法，它使用 Java 序列化将一个对象序列化为流。</p><p>在此示例中，您将&nbsp;<code>List</code>&nbsp;对象（以及它包含的&nbsp;<code>Employee</code>&nbsp;对象）存储在一个文件中，但同样的技术可用于任何类型的序列化。</p><p>要成功运行<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing31\">清单 31</a>&nbsp;中的代码，可使用 JUnit 测试，如下所示（来自 HumanResourcesApplicationTest.java）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_605774\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class HumanResourcesApplicationTest {</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private HumanResourcesApplication classUnderTest;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; testData;</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Before</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void setUp() {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">classUnderTest = new HumanResourcesApplication();</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">testData = HumanResourcesApplication.createEmployees();</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void testSerializeToDisk() {</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String filename = \"employees-Junit-\" + System.currentTimeMillis() + \".ser\";</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">boolean status = classUnderTest.serializeToDisk(filename, testData);</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertTrue(status);</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><h4 id=\"N10FCF\" class=\"ibm-h4\">反序列化对象</h4><p>序列化对象的唯一目的就是为了能够重新构成或反序列化它。清单 32 读取刚序列化的文件并对其内容反序列化，然后恢复&nbsp;<code>Employee</code>&nbsp;对象的&nbsp;<code>List</code>&nbsp;的状态。</p><h5 id=\"listing32\" class=\"ibm-h5\">清单 32. 反序列化对象</h5><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_309059\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div><div class=\"line number22 index21 alt1\" style=\"text-align: right;\">22</div><div class=\"line number23 index22 alt2\" style=\"text-align: right;\">23</div><div class=\"line number24 index23 alt1\" style=\"text-align: right;\">24</div><div class=\"line number25 index24 alt2\" style=\"text-align: right;\">25</div><div class=\"line number26 index25 alt1\" style=\"text-align: right;\">26</div><div class=\"line number27 index26 alt2\" style=\"text-align: right;\">27</div><div class=\"line number28 index27 alt1\" style=\"text-align: right;\">28</div><div class=\"line number29 index28 alt2\" style=\"text-align: right;\">29</div><div class=\"line number30 index29 alt1\" style=\"text-align: right;\">30</div><div class=\"line number31 index30 alt2\" style=\"text-align: right;\">31</div><div class=\"line number32 index31 alt1\" style=\"text-align: right;\">32</div><div class=\"line number33 index32 alt2\" style=\"text-align: right;\">33</div><div class=\"line number34 index33 alt1\" style=\"text-align: right;\">34</div><div class=\"line number35 index34 alt2\" style=\"text-align: right;\">35</div><div class=\"line number36 index35 alt1\" style=\"text-align: right;\">36</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class HumanResourcesApplication {</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final Logger log = Logger.getLogger(HumanResourcesApplication.class.getName());</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final String SOURCE_CLASS = HumanResourcesApplication.class.getName();</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@SuppressWarnings(\"unchecked\")</code></div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; deserializeFromDisk(String filename) {</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">final String METHOD_NAME = \"deserializeFromDisk(String filename)\";</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; ret = new ArrayList&lt;&gt;();</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">File file = new File(filename);</code></div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int numberOfEmployees = 0;</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">try (ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file))) {</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees = (List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt;)inputStream.readObject();</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Deserialized List says it contains \" + employees.size() + </code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">\" objects...\");</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">for (Employee employee : employees) {</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read Employee:\" + employee.toString());</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">numberOfEmployees++;</code></div><div class=\"line number20 index19 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">ret = employees;</code></div><div class=\"line number22 index21 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.info(\"Read \" + numberOfEmployees + \" employees from disk.\");</code></div><div class=\"line number23 index22 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (FileNotFoundException e) {</code></div><div class=\"line number24 index23 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"Cannot find file \" + </code></div><div class=\"line number25 index24 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">file.getName() + \", message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number26 index25 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (IOException e) {</code></div><div class=\"line number27 index26 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"IOException occurred, </code></div><div class=\"line number28 index27 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number29 index28 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">} catch (ClassNotFoundException e) {</code></div><div class=\"line number30 index29 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">log.logp(Level.SEVERE, SOURCE_CLASS, METHOD_NAME, \"ClassNotFoundException, </code></div><div class=\"line number31 index30 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">message = \" + e.getLocalizedMessage(), e);</code></div><div class=\"line number32 index31 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number33 index32 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">return ret;</code></div><div class=\"line number34 index33 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number35 index34 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number36 index35 alt1\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>同样，要想成功运行<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing32\">清单 32</a>&nbsp;中的代码，可使用一个类似这样的 JUnit 测试（来自 HumanResourcesApplicationTest.java）：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_700960\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div><div class=\"line number6 index5 alt1\" style=\"text-align: right;\">6</div><div class=\"line number7 index6 alt2\" style=\"text-align: right;\">7</div><div class=\"line number8 index7 alt1\" style=\"text-align: right;\">8</div><div class=\"line number9 index8 alt2\" style=\"text-align: right;\">9</div><div class=\"line number10 index9 alt1\" style=\"text-align: right;\">10</div><div class=\"line number11 index10 alt2\" style=\"text-align: right;\">11</div><div class=\"line number12 index11 alt1\" style=\"text-align: right;\">12</div><div class=\"line number13 index12 alt2\" style=\"text-align: right;\">13</div><div class=\"line number14 index13 alt1\" style=\"text-align: right;\">14</div><div class=\"line number15 index14 alt2\" style=\"text-align: right;\">15</div><div class=\"line number16 index15 alt1\" style=\"text-align: right;\">16</div><div class=\"line number17 index16 alt2\" style=\"text-align: right;\">17</div><div class=\"line number18 index17 alt1\" style=\"text-align: right;\">18</div><div class=\"line number19 index18 alt2\" style=\"text-align: right;\">19</div><div class=\"line number20 index19 alt1\" style=\"text-align: right;\">20</div><div class=\"line number21 index20 alt2\" style=\"text-align: right;\">21</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">public class HumanResourcesApplicationTest {</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private HumanResourcesApplication classUnderTest;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; testData;</code></div><div class=\"line number6 index5 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number7 index6 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Before</code></div><div class=\"line number8 index7 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void setUp() {</code></div><div class=\"line number9 index8 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">classUnderTest = new HumanResourcesApplication();</code></div><div class=\"line number10 index9 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number11 index10 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code>&nbsp;</div><div class=\"line number12 index11 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">@Test</code></div><div class=\"line number13 index12 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public void testDeserializeFromDisk() {</code></div><div class=\"line number14 index13 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">String filename = \"employees-Junit-\" + System.currentTimeMillis() + \".ser\";</code></div><div class=\"line number15 index14 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">int expectedNumberOfObjects = testData.size();</code></div><div class=\"line number16 index15 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">classUnderTest.serializeToDisk(filename, testData);</code></div><div class=\"line number17 index16 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">List&lt;</code><code class=\"htmlscript plain\">Employee</code><code class=\"htmlscript plain\">&gt; employees = classUnderTest.deserializeFromDisk(filename);</code></div><div class=\"line number18 index17 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"htmlscript plain\">assertEquals(expectedNumberOfObjects, employees.size());</code></div><div class=\"line number19 index18 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div><div class=\"line number20 index19 alt1\">&nbsp;</div><div class=\"line number21 index20 alt2\"><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>对于大多数应用程序的用途，将对象标记为&nbsp;<code>serializable</code>&nbsp;是执行序列化工作时唯一需要担心的问题。需要明确地序列化和反序列化对象时，可使用<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing31\">清单 31</a>&nbsp;和<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#listing32\">清单 32</a>&nbsp;中所示的技术。但是，随着应用程序对象不断演变，以及在它们之中添加和删除属性，序列化会变得更加复杂。</p><h3 id=\"N10FFB\" class=\"ibm-h3\"><code>serialVersionUID</code></h3><p>回想中间件和远程对象通信的发展初期，开发人员主要负责控制其对象的“连接格式”，随着技术开始演变，这引发了大量头疼的问题。</p><p>假设您向一个对象添加了一个属性，重新编译了它，然后将该代码重新分发到一个应用程序集群中的每个计算机上。该对象存储在一个具有某种代码版本的计算机中，但其他可能具有不同代码版本的计算机访问该对象。这些计算机尝试反序列化该对象时，常常会发生糟糕的事情。</p><p>Java 序列化元数据 — 所包含的二进制序列化格式的信息 — 很复杂，而且解决了困扰早期中间件开发人员的许多问题。但它并非能解决所有问题。</p><p>Java 序列化使用一个名为&nbsp;<code>serialVersionUID</code>&nbsp;的特性来帮助您处理序列化场景中的不同对象版本问题。不需要在对象上声明此特性；默认情况下，Java 平台会使用一种算法并根据类的属性、它的类名称以及在庞大的本地集群中的位置来计算值。在大多数情况下，该算法都能正常运行。但是，如果添加或删除一个属性，这个动态生成的值就会发生变化，而且 Java 运行时会抛出&nbsp;<code>InvalidClassException</code>。</p><p>要想避免这种情况，可养成明确声明&nbsp;<code>serialVersionUID</code>&nbsp;的习惯：</p><div class=\"ibm-syntax-container\"><div><div id=\"highlighter_743644\" class=\"syntaxhighlighter  htmlscript\"><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" role=\"none\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div><div class=\"line number4 index3 alt1\" style=\"text-align: right;\">4</div><div class=\"line number5 index4 alt2\" style=\"text-align: right;\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"htmlscript plain\">import java.io.Serializable;</code></div><div class=\"line number2 index1 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">public class Person implements Serializable {</code></div><div class=\"line number3 index2 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">private static final long serialVersionUID = 20100515;</code></div><div class=\"line number4 index3 alt1\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">// etc...</code></div><div class=\"line number5 index4 alt2\"><code class=\"htmlscript spaces\">&nbsp;&nbsp;</code><code class=\"htmlscript plain\">}</code></div></div></td></tr></tbody></table></div></div></div><p>我建议您为&nbsp;<code>serialVersionUID</code>&nbsp;版本号使用某种模式（我在前面的示例中使用了当前日期）。而且应将&nbsp;<code>serialVersionUID</code>&nbsp;声明为&nbsp;<code>private static final</code>&nbsp;和&nbsp;<code>long</code>&nbsp;类型。</p><p>您可能想知道何时应更改此特性。简单的答案是，只要对类执行了不兼容的更改（这通常意味着删除了一个属性），就应该更改它。如果在一台计算机上拥有该对象的一个已删除了某个属性的版本，而且将该对象远程传输至一台计算机，其中包含的对象版本需要该属性，此时就会发生怪异的事情。这时就可以使用 Java 平台的内置&nbsp;<code>serialVersionUID</code>&nbsp;进行检查。</p><p>作为一条经验规则，任何时候添加或删除一个类特性（也就是属性和方法），都需要更改它的&nbsp;<code>serialVersionUID</code>。在连接的另一端获得一个&nbsp;<code>InvalidClassException</code>，比由不兼容的类更改导致应用程序错误要更好一些。</p><h2 id=\"N1126A\" class=\"ibm-h2\">第 2 部分的小结</h2><p><em>Java 编程简介</em>教程介绍了 Java 语言的大量知识，但该语言博大精深。一部教程无法涵盖所有内容。</p><p>随着您继续学习 Java 语言和平台，您可能希望进一步研究正则表达式、泛型和 Java 序列化等主题。最终，您可能还想探索这部介绍性教程中未涵盖的主题，如并发性和持久化。参见<a href=\"https://www.ibm.com/developerworks/cn/java/j-introtojava2/index.html?ca=drs-#artrelatedtopics\">参考资料</a>，可以了解有关学习 Java 编程概念的一些入门知识，包括太高级而无法在本介绍性教程中探讨的概念。</p><div class=\"ibm-alternate-rule\"></div><h4 id=\"artrelatedtopics\" class=\"ibm-h4\">相关主题</h4><p><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span><span class=\"dw-code-nohighlight\"></span></p><ul><li><a href=\"http://www.oracle.com/technetwork/java/index.html\">Java 技术主页</a>：Java 官方网站包含与 Java 平台相关的所有资源的链接，包括 Java 语言规范和&nbsp;<a href=\"http://docs.oracle.com/javase/8/docs/api/\">Java API 文档</a>。</li><li><a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\">Java 8</a>：进一步了解 JDK 8 和它附带的工具。</li><li><a href=\"http://my.safaribooksonline.com/0201485672\"><em>重构：改进现有代码的设计</em></a>（Martin Fowler 等，Addison-Wesley，1999 年）：这本书是学习如何编写更干净、更容易维护的代码的优秀资源。</li><li><a href=\"http://docs.oracle.com/javase/tutorial/\">Java 教程</a>：获取 Java 语言的综合介绍。</li><li><a href=\"http://shop.oreilly.com/product/9780596805326.do\"><em>Log4J</em></a>（J. Steven Perry，O\'Reilly Media，2009 年）：进一步了解 Log4j，这是一个 JDK 替换日志记录库。</li><li><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">JDK 8</a>：从 Oracle 下载 JDK 8。</li><li><a href=\"http://www.eclipse.org/\">Eclipse</a>：下载 Eclipse IDE for Java Developers。</li><li><a href=\"http://www.ibm.com/developerworks/java/jdk/index.html\">IBM 开发人员工具包</a>：IBM 提供了多种可用于流行平台的 Java 开发人员工具包。</li><li><a href=\"http://commons.apache.org/proper/commons-lang/download_lang.cgi\">Apache Commons Lang</a>：从 Apache 下载 Commons Lang。</li><li><a href=\"http://logging.apache.org/log4j/2.x/download.html\">Apache log4j 2</a>：从 Apache 下载 log4j 2。</li><li><a href=\"http://www.ibm.com/developerworks/cn/java/\">developerWorks Java 技术专区</a>：这里有数百篇关于 Java 编程各个方面的文章</li></ul>','default',0),(167,'十年·肖申克的救赎','普通文章','bigmeng',NULL,1,1,30,'2018-02-08 02:25:54',NULL,'/pic/108b38b2-043a-49a3-a08d-b109b12306ad.jpg',3,'导演:\r\n弗兰克·德拉邦特<br>\r\n主演:\r\n蒂姆·罗宾斯 / 摩根·弗里曼 / 鲍勃·冈顿\r\n<br>类型:\r\n犯罪 / 剧情\r\n<br>地区:\r\n美国\r\n<br>上映:\r\n1994-09-10(多伦多电影节) / 1994-10-14(美国)',NULL,'<p>版权归作者所有，任何形式转载请联系作者。</p><p>作者：大头绿豆（来自豆瓣）</p><p>来源：https://movie.douban.com/review/1000369/</p><p><br></p><p><br></p><p>距离斯蒂芬·金（Stephen King）和德拉邦特（Frank Darabont）们缔造这部伟大的作品已经有十年了。我知道美好的东西想必大家都能感受，但是很抱歉，我的聒噪仍将一如既往。</p><p><br></p><p>在我眼里，肖申克的救赎与信念、自由和友谊有关。</p><p><br></p><p>［1］信 念</p><p><br></p><p>瑞德（Red）说，希望是危险的东西，是精神苦闷的根源。重重挤压之下的牢狱里呆了三十年的他的确有资格这么说。因为从进来的那一天起，狱长就说过，「把灵魂交给上帝，把身体交给我。」除了他能弄来的香烟和印着裸女的扑克牌，任何其他异动在这个黑暗的高墙之内似乎都无法生长。</p><p><br></p><p>然而安迪（Andy）告诉他，「记住，希望是好事——甚至也许是人间至善。而美好的事永不消失。」</p><p><br></p><p>所以安迪能够用二十年挖开瑞德认为六百年都无法凿穿的隧洞。当他终于爬出五百码恶臭的污水管道，站在瓢泼大雨中情不自禁的时候，我们仿佛看到信念刺穿重重黑幕，在暗夜中打了一道夺目霹雳。亮光之下，我们懦弱的灵魂纷纷在安迪张开的双臂下现形，并且颤抖。</p><p><br></p><p>庸常生活里的我们，似乎已经习惯了按部就班，习惯了先说「那不可能」，习惯了没有奇迹，习惯了，习惯了。可是正如《飞越疯人院》（One Flew over the Cuckcoo’s Nest）中说的那样，「不试试，怎么知道呢？」</p><p><br></p><p>试着留住一些信念，在它们丧失殆尽之前。它们也许无法最终实现，也许无法让我们更有意义的活着——甚至对于我自己而言，它们只会愈加带给我来更多的虚无感。然而我知道我有多需要这样的虚伪与自欺，因为你可以说我在做梦，但我不会是仅有的一个。</p><p><br></p><p>——我们已经看到监狱长打开藏有安迪凿石锤的《圣经》时，翻至那页正是《出埃及记》。这个章节详细描述了犹太教徒逃离埃及的过程。</p><p><br></p><p>［2］自 由</p><p><br></p><p>我到今天也始终不明白，这两个意大利女人在唱什么。事实上，我也不想去明白。有些东西不说更好。我想，那是非笔墨可形容的美境。然而却令你如此心伤。</p><p><br></p><p>那声音飞扬，高远入云，超过任何在禁锢中的囚犯们所梦，仿佛一只美丽的小鸟，飞入这灰色的鸟笼，让那些围墙消失，令铁窗中的所有犯人，感到一刻的自由。</p><p><br></p><p>当安迪不顾一切地在监狱的喇叭里放《费加罗的婚礼》（Le Nozze di Figaro）时，镜头缓缓划过正在广场上放风的犯人们和狱警们。他们叫人感动地静立当地，抛却所有愤懑、狠毒和怨怼，沐浴着我从未觉得如此自由的阳光。莫扎特的乐声铺洒在这些人们身上，来自俗世的美妙音符似乎将他们都濯洗得纯净无比。</p><p><br></p><p>强者自救，圣者渡人。我这才明白安迪的用意。修屋顶的时候，他为大家争取来啤酒，事实上是为大家争取到那种像在修缮自家的屋顶一般自在的感觉，所以他不喝酒，微笑却带着巨大的幸福；放费加罗的婚礼，也是要唤醒他们已丧失殆尽的自由感。</p><p><br></p><p>然而强者终究是少数。自由面前，更多的人们纷纷选择禁锢。在监狱图书馆呆了五十年的布鲁克斯（Brooks），为了不被假释，竟然想通过伤害狱友来达到留在监狱的目的。很奇怪吗？自由本来应该是人们向往和追求的东西。可是布鲁克斯们却早已经被监狱的规则之下规则了自己，他们需要规则，需要秩序，如果没有它们，甚至无法生存。</p><p><br></p><p>「监狱里的高墙实在是很有趣。刚入狱的时候，你痛恨周围的高墙；慢慢地，你习惯了生活在其中；最终你会发现自己不得不依靠它而生存。这就是体制化。」假瑞德之口，斯蒂芬·金直指卑微。</p><p><br></p><p>布鲁克斯得到了身体的自由，灵魂却已经被无可挽回地体制化。他终于没有能够摆脱对自由无法适应的困境，悬梁自尽。而睿智如瑞德，在出狱之后也悲哀地发现，自己竟然连撒尿都要向经理报告，否则一滴尿都挤不出来。他也考虑如何违规以便回到监狱，甚至考虑与 布鲁克斯一样离开。</p><p><br></p><p>要么忙着生活，要么忙着等死（Busy for living,&nbsp; or busy for death）。步履匆匆的人们也许应该偶尔驻足，跳出来看看自己的模样。我们终会知道，习惯于服从规则的人们将付出巨大代价来习惯本来属于每一个个体的自由。&nbsp;</p><p><br></p><p>［3］友 谊</p><p><br></p><p>此片无关爱情，除了背叛。有的只是监狱中的男人间的友谊。瑞德和安迪的那种友谊置放在高墙之下，似乎比我们纷繁俗世中的友情来得更加纯粹和干净。他们都是内敛的人，然而洞悉一切，心意契合。我喜欢这种感情。所以在他们终于相会在太平洋小岛的阳光沙滩之上的时候，忍不住一人笑了。</p><p><br></p><p>如果我在肖申克，我会是谁？如果你在肖申克，你又会是谁？</p>','default',0),(168,'电影发展综述','普通文章','bigmeng',NULL,1,1,30,'2018-02-08 02:35:19',NULL,NULL,0,'综合的现代科技与艺术',NULL,'<div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">基本介绍</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"1\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\">电影最早是因为19世纪美国国家生活水平上升，紧接着大众需要的娱乐产物。</div><div class=\"para\" label-module=\"para\">电影根据<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A7%86%E8%A7%89%E6%9A%82%E7%95%99\">视觉暂留</a>原理，运用照相（以及录音）手段把外界事物的影像（以及声音）摄录在胶片上，通过放映（同时还原声音），用电的方式将活动影像投射到银幕上（以及同步声音）以表现一定内容的现代技术。<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/ae51f3deb48f8c541225f59432292df5e1fe7f92?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"早期电影\"><img class=\"\" src=\"http://g.hiphotos.baidu.com/baike/s%3D220/sign=96f356c8f3f2b211e02e824cfa816511/ae51f3deb48f8c541225f59432292df5e1fe7f92.jpg\" alt=\"早期电影\"></a><span class=\"description\">早期电影</span></div></div><div class=\"para\" label-module=\"para\">电影是一种视觉及听觉艺术，利用<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%83%B6%E5%8D%B7\">胶卷</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BD%95%E5%83%8F\">录像</a>带或<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%95%B0%E4%BD%8D%E5%AA%92%E4%BD%93\">数位媒体</a>将影像和声音捕捉，再加上后期的编辑工作而成。</div><div class=\"para\" label-module=\"para\">电影是一种综合的现代艺术，亦正如艺术本身，有着复杂而繁多的科系，电影世界里有很多不同类型的电影，也有很多种电影的分类方法。</div><div class=\"para\" label-module=\"para\">电影从<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9C%89%E5%A3%B0%E7%94%B5%E5%BD%B1\">有声电影</a>开始发展，已经到了电影的特技时代了。运用大量的电脑特技制作出来的电影，受广大中年以下的朋友欢迎。</div><div class=\"para\" label-module=\"para\">国外<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E5%B9%BF%E5%91%8A\">电影广告</a>在美国和英国的电影广告中，有这样八种标记：</div><div class=\"para\" label-module=\"para\">（1）<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD/125486\" data-lemmaid=\"125486\">美国</a>X——禁止未成年者观看的影片，G——所有观众可看片，R——十七岁以下禁止观看，PG——一般观众可看。</div><div class=\"para\" label-module=\"para\">（2）<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD/144602\" data-lemmaid=\"144602\">英国</a>U——内容正派片，A——一般观众可看片，X——18岁以下青少年禁看片，AA——少年儿童禁看的凶杀片。</div><div class=\"para\" label-module=\"para\">电影其实就是被人称之为艺术而迂回戏话的一幕联想而已。</div><div class=\"para\" label-module=\"para\">1911年意大利诗人和电影先驱者<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B9%94%E6%89%98%C2%B7%E5%8D%A1%E5%8A%AA%E6%9D%9C\">乔托·卡努杜</a>发表了一篇名为《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%AC%AC%E4%B8%83%E8%89%BA%E6%9C%AF%E5%AE%A3%E8%A8%80\">第七艺术宣言</a>》的论著，他在世界电影史上第一次宣称电影是一种<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A1%A8%E6%BC%94%E8%89%BA%E6%9C%AF\">表演艺术</a>，从此，“第七艺术”就成为了电影艺术的同义词。</div><div class=\"para\" label-module=\"para\">现如今有3D电影，是视觉的“长宽高”；美国拍摄电影有5D拍摄技术。</div><div class=\"para\" label-module=\"para\">其中电影最高的奖项为“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E7%94%B5%E5%BD%B1/73575\" data-lemmaid=\"73575\">美国电影</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%A5%E6%96%AF%E5%8D%A1%E9%87%91%E5%83%8F%E5%A5%96\">奥斯卡金像奖</a>、法国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%88%9B%E7%BA%B3%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">戛纳国际电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E6%A3%95%E6%A6%88%E5%A5%96\">金棕榈奖</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A8%81%E5%B0%BC%E6%96%AF%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">威尼斯国际电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E7%8B%AE%E5%A5%96\">金狮奖</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%B7%E5%9B%BD%E6%9F%8F%E6%9E%97%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">德国柏林国际电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E7%86%8A%E5%A5%96\">金熊奖</a>”。</div><div class=\"anchor-list\"><a name=\"2\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_2\" class=\"lemma-anchor \"></a><a name=\"发展历史\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">发展历史</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"2\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"anchor-list\"><a name=\"2_1\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_2_1\" class=\"lemma-anchor \"></a><a name=\"形成\" class=\"lemma-anchor \"></a><a name=\"2-1\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">形成</h3></div><div class=\"para\" label-module=\"para\">1872年的一天，在美国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A0%E5%88%A9%E7%A6%8F%E5%B0%BC%E4%BA%9A%E5%B7%9E/40442\" data-lemmaid=\"40442\">加利福尼亚州</a>一个酒店里，斯坦福与<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A7%91%E6%81%A9/3855\" data-lemmaid=\"3855\">科恩</a>发生了激烈的争执：马奔跑时蹄子是否都着地？斯坦福认为奔跑的马在跃起的瞬间四蹄是腾空的；科恩却认为，马奔跑时始终有一蹄着地。争执的结果谁也说服不了谁，于是就采取了美国人惯用的方式打赌来解决。他们请来一位驯马好手来做裁决，然而，这位裁判员也难以断定谁是谁非。这很正常，因为单凭人的眼睛确实难以看清快速奔跑的马蹄是如何运动的。</div><div class=\"para\" label-module=\"para\">裁判的好友——英国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%91%84%E5%BD%B1%E5%B8%88/3280\" data-lemmaid=\"3280\">摄影师</a>爱德华·麦布里奇（Edward Muybridge）知道了这件事后，表示可由他来试一试。他在跑道的一边安置了24架<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%85%A7%E7%9B%B8%E6%9C%BA/1733\" data-lemmaid=\"1733\">照相机</a>，排成一行，相机镜头都对准跑道。在跑道的另一边，他打了24个木桩，每根木桩上都系上一根细绳，这些细绳横穿跑道，分别系到对面每架照相机快门上。</div><div class=\"para\" label-module=\"para\">一切准备就绪后，麦布里奇牵来了一匹漂亮的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%AA%8F%E9%A9%AC/1284690\" data-lemmaid=\"1284690\">骏马</a>，让它从跑道一端飞奔到另一端。当跑马经过这一区域时，依次把24极引线绊断，24架照相机的快门也就依次被拉动而拍下了24张照片。麦布里奇把这些照片按先后顺序剪接起来。每相邻的两张照片动作差别很小，它们组成了一条连贯的照片带。裁判根据这组照片，终于看出马在奔跑时，所有蹄子都腾空。按理说，故事到此就应结束了，但这场打赌及其判定的奇特方法却引起了人们很大的兴趣。麦布里奇一次又一次地向人们出示那条录有奔马形象的照片带。一次，有人无意识地快速牵动那条照片带，结果眼前出现了一幕奇异的景象：各张照片中那些静止的马叠成一匹运动的马，它竟然“活”起来了！</div><div class=\"para\" label-module=\"para\"><span>过程</span></div><div class=\"para\" label-module=\"para\">早在1829年，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%AF%94%E5%88%A9%E6%97%B6\">比利时</a>著名物理学家约瑟夫普拉多发现：当一个物体在人的眼前<a class=\"lemma-album layout-right nslog:10000206\" title=\"电影放映机\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/2657464/8367d1fc58fe2cceb801a013?fr=lemma&amp;ct=cover\" target=\"_blank\" nslog-type=\"10000206\"><div class=\"album-wrap\"><img class=\"picture\" alt=\"电影放映机\" src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=e16f6f5b7f3e6709ba0042fd0bc69fb8/d833c895d143ad4b97fad5bc82025aafa50f06f1.jpg\"></div><div class=\"description\">电影放映机<span class=\"number\">(15张)</span></div><div class=\"albumBg\"><div class=\"albumBgFir\"></div><div class=\"albumBgSec\"></div></div></a>&nbsp;消失后，该物体的形象还会在人的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A7%86%E7%BD%91%E8%86%9C/456756\" data-lemmaid=\"456756\">视网膜</a>上滞留一段时间。这一发现，被称之为“视象暂留原理”。</div><div class=\"para\" label-module=\"para\">普拉多根据此原理于1832年发明了“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AF%A1%E7%9B%98\">诡盘</a>”。“诡盘”能使被描画在锯齿形的硬纸盘上的画片因运动而活动起来，而且能使视觉上产生的活动画面分解为各种不同的形象。“诡盘”的出现，标志着电影的发明进入到了科学实验阶段。</div><div class=\"para\" label-module=\"para\">1834年，美国人霍尔纳的“活动视盘”试验成功。</div><div class=\"para\" label-module=\"para\">1853年，奥地利的冯乌却梯奥斯将军在上述的发明基础上，运用<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B9%BB%E7%81%AF\">幻灯</a>，放映了原始的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB%E7%89%87\">动画片</a>。</div><div class=\"anchor-list\"><a name=\"2_2\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_2_2\" class=\"lemma-anchor \"></a><a name=\"发展\" class=\"lemma-anchor \"></a><a name=\"2-2\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">发展</h3></div><div class=\"para\" label-module=\"para\"><span>开端</span></div><div class=\"para\" label-module=\"para\">1888年10月，法国电影发明家<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B7%AF%E6%98%93%E6%96%AF%C2%B7%E6%99%AE%E6%9E%97%E6%96%AF\">路易斯·普林斯</a>（路易斯·艾梅·奥古斯汀·雷·普林斯Louis Aimé Augustin Le Prince）在英格兰<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E7%BA%A6%E5%85%8B%E9%83%A1\">西约克郡</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%A9%E5%85%B9\">利兹</a>城进行了一项有里程碑意义的工作，他使用自己的单镜头摄影机和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BC%8A%E5%A3%AB%E6%9B%BC%E6%9F%AF%E8%BE%BE%E5%85%AC%E5%8F%B8\">伊士曼柯达公司</a>的纸质胶片接连拍摄了《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9C%97%E5%BE%B7%E6%B5%B7%E8%8A%B1%E5%9B%AD%E5%9C%BA%E6%99%AF\">朗德海花园场景</a>》（Roundhay Garden Scene）和一段利兹大桥的街景。这比他的竞争者——比如<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%A2%E7%B1%B3%E5%9F%83%E5%B0%94%E5%85%84%E5%BC%9F\">卢米埃尔兄弟</a>和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%89%98%E9%A9%AC%E6%96%AF%C2%B7%E7%88%B1%E8%BF%AA%E7%94%9F\">托马斯·爱迪生</a>——要早上几年。他未能在美国按计划完成这项新发明的公开演示，因为他于1890年9月16日在一辆火车上神秘地失踪了。<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/b999a9014c086e060cef0cf00a087bf40bd1cbc1?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"路易斯·普林斯\"><img class=\"\" src=\"http://b.hiphotos.baidu.com/baike/s%3D220/sign=c069757b8a025aafd73279c9cbecab8d/b999a9014c086e060cef0cf00a087bf40bd1cbc1.jpg\" alt=\"路易斯·普林斯\"></a><span class=\"description\">路易斯·普林斯</span></div></div><div class=\"para\" label-module=\"para\">美国及欧洲的早期电影史是以摄影机专利权之争为标志的。1888年普林斯的一种有16个镜头的设备在美国被授予双专利，它是由一个电影<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%91%84%E5%BD%B1%E6%9C%BA\">摄影机</a>和一个<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8A%95%E5%BD%B1%E5%99%A8\">投影器</a>组合而成的。他的另一发明——一种单镜头摄影机（即MkI）在美国却被拒绝授予专利，因为已有同类产品持有专利。不过，几年后美国人<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%89%98%E9%A9%AC%E6%96%AF%C2%B7%E7%88%B1%E8%BF%AA%E7%94%9F\">托马斯·爱迪生</a>申请同类产品专利时却没有被拒绝。</div><div class=\"para\" label-module=\"para\">1888年10月14日，使用改进版的单镜头摄影机（即MkII）拍摄了电影《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9C%97%E5%BE%B7%E6%B5%B7%E8%8A%B1%E5%9B%AD%E5%9C%BA%E6%99%AF\">朗德海花园场景</a>》。他在<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%A9%E5%85%B9\">利兹</a>的汉斯莱特区（Hunslet）的惠特利工厂以及<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%83%A0%E7%89%B9%E5%88%A9\">惠特利</a>位于朗德海的家——奥克伍德农庄（Oakwood Grange）展出了他这第一部电影。但他们没有在更广的范围里传播这一电影。他在1887年至1888年同时拍摄了电影《利兹大桥》《绕过墙角者》《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8B%89%E6%89%8B%E9%A3%8E%E7%90%B4%E8%80%85\">拉手风琴者</a>》，每部电影的片长为2秒左右。</div><div class=\"para\" label-module=\"para\">接下来的几年，为了使自己和家人移民到纽约去，并进一步进行研究，他取得法国-美国双重国籍。1890年9月，他计划到纽约的聚美大楼举办公开展览，然而他本人却神秘地消失了。因此，普林斯对摄影机的诞生所作的贡献常被人忽视。</div><div class=\"para\" label-module=\"para\"><span>美国电影发展史</span></div><div class=\"para\" label-module=\"para\">1893年，T.A.爱迪生发明电影视镜并创建了“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9B%9A%E8%BD%A6\">囚车</a>”的摄影场，被视为美国电影史<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/18d8bc3eb13533faefb49bf5add3fd1f40345bee?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"英雄无泪\"><img class=\"\" src=\"http://f.hiphotos.baidu.com/baike/s%3D220/sign=4c0085e57eec54e745ec1d1c89399bfd/18d8bc3eb13533faefb49bf5add3fd1f40345bee.jpg\" alt=\"英雄无泪\"></a><span class=\"description\">英雄无泪</span></div>的开端。1896年，维太放映机的推出开始了美国电影的群众性放映。</div><div class=\"para\" label-module=\"para\">19世纪末20世纪初，美国的城市工业发展和中下层居民迅速增多，电影成为适应城市平民需要的一种大众娱乐。它起先在歌舞<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B8%B8%E4%B9%90%E5%9C%BA/1747681\" data-lemmaid=\"1747681\">游乐场</a>内，随后进入<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B0%8F%E5%89%A7%E5%9C%BA\">小剧场</a>，在剧目演出之后放映。</div><div class=\"para\" label-module=\"para\">1905年在<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%B9%E5%85%B9%E5%A0%A1\">匹兹堡</a>出现的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%95%8D%E5%B8%81%E5%BD%B1%E9%99%A2\">镍币影院</a>（入场券为5美分镍币）很快遍及美国所有城镇，到1910年每周的电影观众多达3600万人次。当时影片都是单本一部的，产量每月400部，主要制片基地在纽约，如爱迪生公司、比沃格拉夫公司和维太格拉夫公司。1903年E．S．<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%B2%8D%E7%89%B9\">鲍特</a>的《一个美国消防员的生活》和《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%81%AB%E8%BD%A6%E5%A4%A7%E5%8A%AB%E6%A1%88\">火车大劫案</a>》，使电影从一种新奇的玩艺儿发展为一门艺术。影片中使用了剪辑技巧，鲍特成为用交叉剪辑手法造成戏剧效果的第一位导演。<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/f3d3572c11dfa9ec7dd74b4668d0f703908fc1e2?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"爱迪生\"><img class=\"\" src=\"http://h.hiphotos.baidu.com/baike/s%3D220/sign=00f287a273310a55c024d9f687444387/f3d3572c11dfa9ec7dd74b4668d0f703908fc1e2.jpg\" alt=\"爱迪生\"></a><span class=\"description\">爱迪生</span></div></div><div class=\"para\" label-module=\"para\">收益高，竞争激烈。1897年，爱迪生即为争夺专利进行诉讼，在1908年，成立了由爱迪生控制的电影专利公司，公司拥有16项<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%93%E5%88%A9%E6%9D%83\">专利权</a>。到1910年，电影专利公司垄断了美国电影的制作、发行和放映。独立制片商为摆脱专利公司的垄断，相继到远离纽约和芝加哥的洛杉矶郊外小镇<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%BD%E8%8E%B1%E5%9D%9E/79274\" data-lemmaid=\"79274\">好莱坞</a>去拍片，那里自然条件得天独厚，又临近墨西哥边境，一旦专利公司提出诉讼便可逃离。D．W．格里菲斯1907年加入比沃格拉夫公司，次年导演了第一部影片《陶丽历险记》，他的电影《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%80%E4%B8%AA%E5%9B%BD%E5%AE%B6%E7%9A%84%E8%AF%9E%E7%94%9F\">一个国家的诞生</a>》是世上首部具有真正意义的商业电影影片。至1912年已为该公司摄制了近400部影片，把拍片重心逐渐移向<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%BD%E8%8E%B1%E5%9D%9E/79274\" data-lemmaid=\"79274\">好莱坞</a>，并发现和培养了许多后来的名演员，如M.塞纳特、M.壁克馥和吉许姐妹等。</div><div class=\"para\" label-module=\"para\">美国电影的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3/1323188\" data-lemmaid=\"1323188\">黄金时代</a>结束之后，各大公司从印年代中期开始解体或转产，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B5%B7%E6%96%AF%E6%B3%95%E5%85%B8\">海斯法典</a>也被正式废除。随之出现了微型影院、艺术影院、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B1%BD%E8%BD%A6%E5%BD%B1%E9%99%A2\">汽车影院</a>。独立制片及<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%9E%E9%AA%8C%E7%94%B5%E5%BD%B1\">实验电影</a>有了发展。</div><div class=\"para\" label-module=\"para\"><span>中国电影发展史</span></div><div class=\"para\" label-module=\"para\"><div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/e824b899a9014c087e921b1e027b02087af4f4db?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"一江春水向东流\"><img class=\"\" src=\"http://a.hiphotos.baidu.com/baike/s%3D220/sign=bddfd7987bf082022992963d7bfafb8a/e824b899a9014c087e921b1e027b02087af4f4db.jpg\" alt=\"一江春水向东流\"></a><span class=\"description\">一江春水向东流</span></div>由1896年至二十世纪二十年代，虽然外商在中国电影市场占据了<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9E%84%E6%96%AD\">垄断</a>地位，但亦阻止不了我国电影活动的开始。1903年，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%B7%E5%9B%BD/147953\" data-lemmaid=\"147953\">德国</a>留学生林祝三携带影片和放映机回国，租借北京前门打磨厂天乐茶园放映电影。1905年，北京<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%B0%E6%B3%B0%E7%85%A7%E7%9B%B8%E9%A6%86\">丰泰照相馆</a>的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BB%BB%E5%BA%86%E6%B3%B0\">任庆泰</a>为了向著名京剧老生<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B0%AD%E9%91%AB%E5%9F%B9\">谭鑫培</a>祝寿，拍摄了一段由他主演的京剧《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%9A%E5%86%9B%E5%B1%B1\">定军山</a>》。中国电影一开始，就和中国传统的戏曲和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AF%B4%E5%94%B1/628409\" data-lemmaid=\"628409\">说唱</a>艺术结合起来，发展出一套独特的电影类型。但是最早尝试拍摄这种电影类型的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%B0%E6%B3%B0%E7%85%A7%E7%9B%B8%E9%A6%86\">丰泰照相馆</a>只属小本经营，算不上是电影机构。直至商务印书局“活动电影部”的出现，才真正代表中国制片业的开始。在这段期间，除了“商务”之外，先后出现的电影制片机构还包括由美商投资“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E7%BB%86%E4%BA%9A%E5%BD%B1%E6%88%8F%E5%85%AC%E5%8F%B8\">亚细亚影戏公司</a>”、“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B9%BB%E4%BB%99\">幻仙</a>”、“中国”、“上海”、“新亚”等，由于他们的成员多是来自戏剧舞台，所以当时的电影题材和内容大多源于中国戏曲和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%87%E6%98%8E%E6%88%8F\">文明戏</a>。此外，他们也开始拍摄剧情短片和长片，对电影这种艺术作最初步的探索和尝试。</div><div class=\"para\" label-module=\"para\"><div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/f31fbe096b63f62452f90ab88f44ebf81b4ca3e0?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"白毛女\"><img class=\"\" src=\"http://b.hiphotos.baidu.com/baike/s%3D220/sign=be4f21f4962f07085b052d02d925b865/f31fbe096b63f62452f90ab88f44ebf81b4ca3e0.jpg\" alt=\"白毛女\"></a><span class=\"description\">白毛女</span></div>中国电影诞生于1905年，历经了中国半封建、半殖民地时期，革命战争时期，新中国建设时期，文革时期，改革开放时期和全面建设小康社会新时期等各个历史阶段；经历了从无声到有声再到<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%AB%8B%E4%BD%93%E5%A3%B0/1915529\" data-lemmaid=\"1915529\">立体声</a>，从黑白到彩色再到立体像（3D），从模拟到数字，从传统到现代的技术变革进程。在不同的发展阶段，中国电影都留下了优秀的代表作：20年代<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8B%93%E8%8D%92\">拓荒</a>时期，有《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AD%A4%E5%84%BF%E6%95%91%E7%A5%96%E8%AE%B0\">孤儿救祖记</a>》等关注社会改造的进步电影；抗日救亡时期，有《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8B%82%E6%B5%81\">狂流</a>》、《中华儿女》等鼓舞斗志、弘扬爱国主义的影片；抗战后，《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%85%AB%E5%8D%83%E9%87%8C%E8%B7%AF%E4%BA%91%E5%92%8C%E6%9C%88\">八千里路云和月</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%80%E6%B1%9F%E6%98%A5%E6%B0%B4%E5%90%91%E4%B8%9C%E6%B5%81\">一江春水向东流</a>》等又深刻揭示社会矛盾和本质，形成现实主义的创作潮流。</div><div class=\"para\" label-module=\"para\">1949年新中国成立后的17年间，涌现出《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%99%BD%E6%AF%9B%E5%A5%B3\">白毛女</a>》、<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/eaf81a4c510fd9f997de66d22d2dd42a2934a4bb?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"焦裕禄\"><img class=\"\" src=\"http://a.hiphotos.baidu.com/baike/s%3D220/sign=f86daf8a44086e066ea8384932097b5a/eaf81a4c510fd9f997de66d22d2dd42a2934a4bb.jpg\" alt=\"焦裕禄\"></a><span class=\"description\">焦裕禄</span></div>《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A5%9D%E7%A6%8F\">祝福</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9E%97%E5%AE%B6%E9%93%BA%E5%AD%90\">林家铺子</a>》等一大批现实主义和浪漫主义相结合的优秀作品，塑造了一大批具有浓郁民族风格的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%93%B6%E5%B9%95%E5%BD%A2%E8%B1%A1\">银幕形象</a>，形成了新中国电影发展的第一次高潮；经历十年文革浩劫，中国电影走出低潮，拍摄出《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B0%8F%E8%8A%B1\">小花</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%BA%E5%88%B0%E4%B8%AD%E5%B9%B4\">人到中年</a>》等一大批反映改革实践、针砭社会时弊的优秀影片。尤其是八十年代末，九十年代初，《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BC%80%E5%9B%BD%E5%A4%A7%E5%85%B8\">开国大典</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%86%B3%E6%88%98\">大决战</a>》等重大革命历史题材影片和《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%84%A6%E8%A3%95%E7%A6%84\">焦裕禄</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%87%A4%E5%87%B0%E7%90%B4\">凤凰琴</a>》等现实题材影片，形成了第二次高潮。</div><div class=\"para\" label-module=\"para\">进入二十世纪九十年代，照实说，中国电影先后实施了影视合流改革、电影精品工程、农村电影放映工程、电影股份制、集团化改革等主要措施，艺术质量和形式都有崭新的突破和提高。除《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AD%94%E7%B9%81%E6%A3%AE\">孔繁森</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A6%BB%E5%BC%80%E9%9B%B7%E9%94%8B%E7%9A%84%E6%97%A5%E5%AD%90\">离开雷锋的日子</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%96%9C%E8%8E%B2\">喜莲</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%82%A3%E5%B1%B1%E9%82%A3%E4%BA%BA%E9%82%A3%E7%8B%97\">那山那人那狗</a>》等作品外，还出现了《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8D%E8%A7%81%E4%B8%8D%E6%95%A3\">不见不散</a>》等<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B4%BA%E5%B2%81%E7%89%87\">贺岁片</a>、喜剧片的新样式，涌现出一大批新生力量。进入新世纪，中国电影形成了国有、集体、民营多种所有制协调发展的新格局，电影发展走上了良性循环的轨道。《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%82%93%E5%B0%8F%E5%B9%B3\">邓小平</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8F%AF%E5%8F%AF%E8%A5%BF%E9%87%8C\">可可西里</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8F%B0%E6%B9%BE%E5%BE%80%E4%BA%8B\">台湾往事</a>》等力作取得社会效益和经济效益的双丰收，《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8B%B1%E9%9B%84\">英雄</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A5%9E%E8%AF%9D\">神话</a>》、《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9C%87%E6%92%BC\">震撼</a>》等国产大片共同占据了中国市场的主导地位，并在世界影坛创造了中国电影的票房奇迹。中国有30多部影片在40多个国际电影节上获奖。<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/42a98226cffc1e1744b790604090f603738de953?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"神话\"><img class=\"\" src=\"http://g.hiphotos.baidu.com/baike/s%3D220/sign=1a0aaef5aec27d1ea1263cc62bd4adaf/42a98226cffc1e1744b790604090f603738de953.jpg\" alt=\"神话\"></a><span class=\"description\">神话</span></div></div><div class=\"para\" label-module=\"para\">2012年共生产各类电影893部，全国电影总票房超170亿，而团购票为国内电影票房贡献了近27亿元，为广大影迷们节省了50.12亿元生活开支。<span>[1]</span><a class=\"sup-anchor\" name=\"ref_[1]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\">对于影院团购市场的火爆，业内人士分析认为，电影票和餐饮婚纱相比，它的标准化程度更高，电影院也比一般餐馆的接待能力更强。其次，对于普通消费者来说，电影票的票价仍然偏高，电影的需求受到一定程度的抑制，而团购的出现正好释放了这部分的需求，赢得了广泛影众喜爱。2014年中国电影市场达到了前所未有的高度。2014年在进口大片特别是好莱坞强大的压力面前，国产电影压产量、提质量，不断提高创作水平，不断丰富类型品种，受到了市场观众欢迎，以超过54%的份额赢得了市场主体地位，涌现出《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%99%BA%E5%8F%96%E5%A8%81%E8%99%8E%E5%B1%B1/12797772\" data-lemmaid=\"12797772\">智取威虎山</a>》《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BD%92%E6%9D%A5/8081361\" data-lemmaid=\"8081361\">归来</a>》《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%B2%E7%88%B1%E7%9A%84/14246285\" data-lemmaid=\"14246285\">亲爱的</a>》等一批优秀影片。同时，一批青年电影导演的作品也引起社会广泛瞩目。<span>[2]</span><a class=\"sup-anchor\" name=\"ref_[2]_7943995\">&nbsp;</a>&nbsp;，中国的电影市场达到了一个新高度。</div><div class=\"para\" label-module=\"para\">《<span>2013-2017年中国电影产业市场前瞻与投资战略规划分析报告</span>》<span></span>数据显示，2012年中国生产故事影片745部(含电影频道出品的数字电影92部)，生产各类电影总量达893部;全国电影总票房达到170.73亿元，中国电影市场进入快速发展期。</div><div class=\"para\" label-module=\"para\">2013年2月，我国影院的放映场次达200多万场，环比1月份基本持平;观影人次达5700多万，增长近1000万人次，增幅达19%;共产出票房21亿多元，大增近5亿元，增幅高达近30%。</div><div class=\"anchor-list\"><a name=\"3\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_3\" class=\"lemma-anchor \"></a><a name=\"理论综述\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">理论综述</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"3\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a>是人类知道其确切产生时间和成长历程的艺术，是20世纪以来发展迅速、影响巨大的媒体，是政治、经济、文化三位一体的创意产业。从19世纪末开始，法国、美国及其他地区的电影发明家们相继发明了能摹拟人的眼睛和耳朵的光声记录和还原的技术和机器，这种电影技术从一诞生，就被企业家发展成为电影生意，被政治家发展成为意识形态，被艺术家发展成为电影艺术，被研究者发展成为电影理论。一部电影发展史同时也是电影人探索电影规律的历史。</div><div class=\"para\" label-module=\"para\">商人首先看出电影是一项有利可图的发明，迅速建立了最初的电影公司。到20世纪早期，电影公司集中资金建立制片基地，购买昂贵的制作设备，筹资进行故事片的生产，依靠大量观众集体买票观影来牟利。这就形成商业电影生产与销售模式的雏形。<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A2%85%E9%87%8C%E7%88%B1\">梅里爱</a>的明星影片公司、爱迪生托拉斯和比沃格拉夫托拉斯是早期电影公司的代表。而电影语言及电影艺术的诞生和发展，与导演实践和理论探索息息相关，最初<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E6%B4%8B%E9%95%9C/75579\" data-lemmaid=\"75579\">西洋镜</a>杂耍的制作人是导演的雏形，随着对电影表现方式和电影特性的探索，相继出现了卢米埃尔兄弟、乔治·梅里爱、埃德温·鲍特和格里菲斯等早期的电影艺术探索者，这些电影先驱拓展了电影语言和电影创意的可能性。早期的电影创作、电影经营和电影探索是三位一体的，此时，电影制作者同时也是电影语言的探索者，还是电影的经营者，是具有完备职能的电影人雏形。</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%8E%E5%B0%94%E8%A1%97\">华尔街</a>为追逐电影工业垄断经营所蕴含的巨大利益而介入电影业，电影业之间兼并、收购并形成垄断，迅速掀起了一股兼并浪潮。到20世纪20年代初，好莱坞只剩下八大制片厂，即<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%B1%B3%E9%AB%98%E6%A2%85\">米高梅</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B4%BE%E6%8B%89%E8%92%99\">派拉蒙</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%8E%E7%BA%B3%E5%85%84%E5%BC%9F\">华纳兄弟</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%8C%E5%8D%81%E4%B8%96%E7%BA%AA%E7%A6%8F%E5%85%8B%E6%96%AF\">二十世纪福克斯</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9B%B7%E7%94%B5%E5%8D%8E\">雷电华</a>、环球、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%81%94%E7%BE%8E\">联美</a>和哥伦比亚公司。八大公司不仅垄断了美国电影的国内市场，而且迅速取代了法国电影业当时在欧洲市场的霸主地位。制片厂的主要制度特点包括类型电影的配方式生产、流水线配比、大规模制造、明星制营销和首轮影院体系。由于制片厂强调集体的智慧和细密的分工，最初电影人的完备雏形被消解在集体的合作之中，电影的创作和经营等关键职能也被分解，这个体系需要统一的指挥和调度职能，特定电影的控制权被集中到制片人手里，形成了<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%B6%E7%89%87%E4%BA%BA%E4%B8%AD%E5%BF%83%E5%88%B6\">制片人中心制</a>。大量的拍片机会造就了大批业务娴熟的职业导演，支撑了好莱坞的大规模生产以及技术升级后带来的产业发展的黄金时代。</div><div class=\"para\" label-module=\"para\">美国电影的强大竞争力迫使欧洲电影寻求突破；19世纪末在欧洲兴起的现代主义文艺思潮也对电影发展提供了新的可能性，形成一系列欧洲先锋电影活动，其发端于1910年代末期，于1920年代达到鼎盛，活动中心主要是德国和法国，大批学者和艺术家成为导演。欧洲先锋电影一般包括<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%B0%E8%B1%A1%E6%B4%BE%E7%94%B5%E5%BD%B1\">印象派电影</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8A%BD%E8%B1%A1%E7%94%B5%E5%BD%B1\">抽象电影</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BA%AF%E7%94%B5%E5%BD%B1\">纯电影</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BB%9D%E5%AF%B9%E7%94%B5%E5%BD%B1\">绝对电影</a>和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B6%85%E7%8E%B0%E5%AE%9E%E4%B8%BB%E4%B9%89%E7%94%B5%E5%BD%B1\">超现实主义电影</a>等具体流派，代表流派、人物和作品包括印象派德吕克的《狂热》、抽象电影费尔南德·莱谢尔的《机器的舞蹈》、纯电影谢尔曼·杜拉克的《第927号唱片》、超现实主义电影路易斯·布努埃尔的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%80%E6%9D%A1%E5%AE%89%E8%BE%BE%E9%B2%81%E7%8B%97\">一条安达鲁狗</a>》等等。这种突出个体风格的电影加强了导演对于影片的控制权。</div><div class=\"para\" label-module=\"para\">世界另一边的苏联，自立国起就特别重视电影的意识形态功能，积极培养了一批具有才华的电影人，由库里肖夫、爱森斯坦、普多夫金等为代表的苏联电影学派，提出了第一个具有重要意义的导演创作理论：<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%92%99%E5%A4%AA%E5%A5%87%E7%90%86%E8%AE%BA\">蒙太奇理论</a>，并用之于创作实践，实施<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AF%BC%E6%BC%94%E4%B8%AD%E5%BF%83%E5%88%B6\">导演中心制</a>原则，不朽之作《战舰波将金号》等就是这一理论的实践成果。</div><div class=\"para\" label-module=\"para\">“二战”改变了世界格局，同样深刻地影响了电影。“二战”的创伤以及战后的政治幻灭，使得整整一代青年人以创作等方式尽情倾吐自己的失望和愤怒。以1945 年罗西里尼拍摄的《罗马，不设防城市》为发端，在意大利兴起了一次具有社会进步意义并以艺术创新为特征的电影运动，这次电影运动后来被称为意大利<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E7%8E%B0%E5%AE%9E%E4%B8%BB%E4%B9%89\">新现实主义</a>。而1956年，格里高利·丘赫莱伊，根据鲍·拉普列涅夫的同名小说拍摄了电影《第四十一》，拉开了苏联<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AF%97%E7%94%B5%E5%BD%B1\">诗电影</a>的序幕，苏联开始迎来斯大林后的一个电影创作的春天。</div><div class=\"para\" label-module=\"para\">在<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B3%95%E5%9B%BD/1173384\" data-lemmaid=\"1173384\">法国</a>，巴赞开始通过《电影手册》聚集起一些对电影叙事和电影本体进行深入研究的年轻人，巴赞对蒙太奇思维与表现方式提出了尖锐的批评，并提出了著名的“长镜头（景深）”理论。《电影手册》还专门研究经典好莱坞，从好莱坞商业片导演中发掘出了电影作者。法国涌现出一批处女作导演，1958年，法国《快报》周刊专栏记者法郎索瓦兹·吉鲁首次使用“新浪潮”来描述新涌现的电影现象。新浪潮电影如《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9B%9B%E7%99%BE%E4%B8%8B\">四百下</a>》和《精疲力竭》，既反映了整个时代，也充分反映了创作者个人的认识、思索与风格。<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA%E6%BD%AE\">新浪潮</a>是一次制片技术与制片方法的革命。从新浪潮电影的实践来看，新人们普遍反对好莱坞的制片人中心制，主张电影作者论。如戈达尔认为“拍电影就是写作”，与此同时，部分新浪潮电影实现了独立制片，这对美国和其他国家制片制度的发展和完善产生了重要的影响。</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E4%BD%9C%E8%80%85%E8%AE%BA\">电影作者论</a>是导演研究的重要理论，对导演实践具有重要指导作用。该理论由法国新浪潮主要人物：特吕弗、戈达尔、夏布洛尔等人提出，主张电影像小说、音乐、绘画一样是一个人的作品，即电影作家——导演个人的作品。不是所有导演都能称为“作者”。电影作者资格包含：⑴在一批影片中体现出导演个性和个人风格特征，把个人的东西带入题材，导演不是一个执行者。⑵影片应具有某种内在涵义，是后天形成而非先前存在的。⑶电影作者是对电影制作全面控制的人，无导演、编剧的区分。戈达尔、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%89%B9%E5%90%95%E5%BC%97\">特吕弗</a>、安东尼奥尼、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B4%B9%E9%87%8C%E5%B0%BC\">费里尼</a>、希区柯克等人是电影作者的代表人物。具备电影作者论资格所拍的电影才是“作者电影”。作者电影与类型电影相对，也称艺术片。作者论的实质是强调电影导演是主要创作人和最终定稿人，其判定依据是导演对作品的控制。</div><div class=\"para\" label-module=\"para\">可以说在电影百年的历程中，创作启发理论，理论推动创作，成为一个交互发展的过程。电影理论的发展和各次重要的电影创作运动紧密相关。苏联学派的探索、法国和德国的先锋派实践以及意大利新现实主义分别启发了<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%92%99%E5%A4%AA%E5%A5%87%E7%90%86%E8%AE%BA\">蒙太奇理论</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%85%88%E9%94%8B%E6%B4%BE%E7%90%86%E8%AE%BA\">先锋派理论</a>和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%9C%9F%E5%AE%9E%E7%BE%8E%E5%AD%A6\">真实美学</a>的建立。法国新浪潮运动与法国电影手册派交相辉映，享誉世界。爱森斯坦的蒙太奇理论和巴赞的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%95%BF%E9%95%9C%E5%A4%B4%E7%90%86%E8%AE%BA\">长镜头理论</a>深化了我们对电影的认识；<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E4%BD%9C%E8%80%85%E8%AE%BA\">电影作者论</a>则强调了导演的核心作用，加强了对电影实践的指导。而好莱坞的制片厂体制、类型片模式及后来的新好莱坞独立制片是电影产业化的典范。<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E5%AF%BC%E6%BC%94%E8%AE%BA\">完全导演论</a>则在电影作者论和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%88%B6%E7%89%87%E4%BA%BA%E4%B8%AD%E5%BF%83%E5%88%B6\">制片人中心制</a>的基础上充分考虑导演的完整职能以及与投资人的关系，建立了从<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E5%A5%BD%E8%8E%B1%E5%9D%9E\">新好莱坞</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA%E6%BD%AE\">新浪潮</a>到<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%B0%E7%94%9F%E4%BB%A3\">新生代</a>的导演模型和导演资本制的应用原则。<span>[3]</span><a class=\"sup-anchor\" name=\"ref_[3]_7943995\">&nbsp;</a></div><div class=\"anchor-list\"><a name=\"4\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_4\" class=\"lemma-anchor \"></a><a name=\"电影种类\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">电影种类</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"4\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A8%E4%BD%9C%E7%94%B5%E5%BD%B1\">动作电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%87%E5%B9%BB%E7%94%B5%E5%BD%B1\">奇幻电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%96%9C%E5%89%A7%E7%94%B5%E5%BD%B1\">喜剧电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%81%90%E6%80%96%E7%94%B5%E5%BD%B1/9078162\" data-lemmaid=\"9078162\">恐怖电影</a></div><div class=\"para\" label-module=\"para\">冒险电影</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%88%B1%E6%83%85%E7%94%B5%E5%BD%B1/5679707\" data-lemmaid=\"5679707\">爱情电影</a></div><div class=\"para\" label-module=\"para\">警匪电影</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A7%91%E5%B9%BB%E7%94%B5%E5%BD%B1\">科幻电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%88%98%E4%BA%89/14004\" data-lemmaid=\"14004\">战争</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%81%BE%E9%9A%BE%E7%94%B5%E5%BD%B1\">灾难电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B8%A9%E6%83%85\">温情</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8F%B2%E8%AF%97%E7%94%B5%E5%BD%B1\">史诗电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%9E%E9%AA%8C%E7%94%B5%E5%BD%B1\">实验电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%AE%E7%94%B5%E5%BD%B1\">微电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%AE\">微</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB\">动画</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%82%AC%E7%96%91%E7%94%B5%E5%BD%B1\">悬疑电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9F%B3%E4%B9%90%E7%94%B5%E5%BD%B1\">音乐电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%91%E5%B8%AE%E7%94%B5%E5%BD%B1\">黑帮电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BA%AA%E5%BD%95%E7%94%B5%E5%BD%B1\">纪录电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%85%AC%E8%B7%AF%E7%94%B5%E5%BD%B1\">公路电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%84%8F%E8%AF%86%E6%B5%81%E7%94%B5%E5%BD%B1\">意识流电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1\">动画电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%83%8A%E6%82%9A/82757\" data-lemmaid=\"82757\">惊悚</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A5%BF%E9%83%A8%E7%94%B5%E5%BD%B1\">西部电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%BA%E7%89%A9/33388\" data-lemmaid=\"33388\">人物</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A3%9E%E8%BD%A6/13000899\" data-lemmaid=\"13000899\">飞车</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1/31689\" data-lemmaid=\"31689\">电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%B6%E5%BA%AD%E7%94%B5%E5%BD%B1\">家庭电影</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E8%8B%B1%E9%9B%84%E7%94%B5%E5%BD%B1\">超级英雄电影</a></div><div class=\"anchor-list\"><a name=\"5\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_5\" class=\"lemma-anchor \"></a><a name=\"表现手段\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">表现手段</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"5\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\">电影是一种以现代科技成果为工具与材料，运用创造视觉形象和镜头组接的表现手段，在银幕的空间和时间里，塑造运动的、音画结合的、逼真的具体形象，以反映社会生活的现代艺术。电影能准确地“还原”现实世界，给人以逼真感，亲近感，宛如身临其境。电影的这种特性，可以满足人们更广阔、更真实地感受生活的愿望。</div><div class=\"para\" label-module=\"para\">电影的帧速率一般是24帧每秒，随着技术的提升，即将出现48帧甚至60帧每秒的电影。</div><div class=\"anchor-list\"><a name=\"6\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_6\" class=\"lemma-anchor \"></a><a name=\"电影构成\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">电影构成</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"6\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"anchor-list\"><a name=\"6_1\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_6_1\" class=\"lemma-anchor \"></a><a name=\"技术\" class=\"lemma-anchor \"></a><a name=\"6-1\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">技术</h3></div><div class=\"para\" label-module=\"para\"><span>视觉滞留</span></div><div class=\"para\" label-module=\"para\">“使一块燃烧着的木炭在被挥动时变成一条火带，这种现象曾被古时的人们发现过”但是，将这种视觉现象同电影的发明联系起来，却是19世纪的事情。1829年，比利时著名的物理学家约瑟夫·普拉托为了进一步考察人眼耐光的限度，他曾一次长时间对着强烈的日光凝目而视，结果双目失明。但他发现太阳的影子却深深地印在了他的眼睛里，他终于发现了“视觉滞留”的原理，即：当人们眼前的物体被移走之后，该物体反映在视网膜上的物象不会立即消失，会继续短暂滞留一段时间。实验证明，物象滞留的时间一般为0.1-0.4秒。与此同时，在欧洲的物理学教科书和物理实验室中，也开始采用“法拉第轮”的原理和图画“幻盘”旋转的视觉研究。它们向人类表明，人眼视觉的生理功能可以将一系列独立的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%BB%E9%9D%A2%E7%BB%84%E5%90%88\">画面组合</a>起来，成为连续运动的视象。19世纪30年代，诡盘、走马盘、轮车盘、活动视镜和频闪观察器等视觉玩具相继出现。其基本原理大同小异，即在能够转动的活动视盘上画上一连串的图像，而当视盘转动起来时那些呆滞的、无生命的图象便运动起来，活灵活现。此后，奥地利人又将幻灯和活动视盘相结合，使绘制的静止的图画投影在银幕上，制作出活动幻灯，形成了早期动画。然而，到了上个世纪60年代，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E7%90%86%E8%AE%BA\">电影理论</a>家和教育家对“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%A7%86%E8%A7%89%E6%BB%9E%E7%95%99\">视觉滞留</a>”的问题提出了新的疑义，他们发现银幕上的全部运动现象实际上是跳跃的、不连贯的，但观众却意识到那是一个统一、完整的动作连续。由此证明，真正起作用的不是“视觉滞留”，而是“心理认可”。<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/4bac3073af3e6b248601b000?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"立体电影\"><img class=\"\" src=\"http://e.hiphotos.baidu.com/baike/s%3D220/sign=e7241bc5fc039245a5b5e60db795a4a8/78310a55b319ebc493af9b918226cffc1f1716e6.jpg\" alt=\"立体电影\"></a><span class=\"description\">立体电影</span></div></div><div class=\"para\" label-module=\"para\"><span>拍摄技术</span></div><div class=\"para\" label-module=\"para\">摄影术同样产生于19世纪的欧洲。1839 年，法国人<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%BE%BE%E7%9B%96%E5%B0%94\">达盖尔</a>根据文艺复兴以后在绘画上的小孔成像的原理，并使用化学方法，将形象永久地固定下来，“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%BE%BE%E7%9B%96%E5%B0%94%E7%85%A7%E7%9B%B8%E6%B3%95\">达盖尔照相法</a>”产生。1872 年，最先将“照相法”运用于连续拍摄的，是摄影师爱德华·幕布里奇。他曾在5年的时间里，多次运用多架照相机给一匹正在奔跑的马进行连续拍摄的实验，并于1878年获得成功。1882年，法国人马莱利用左轮手枪的间歇原理，研制了一种可以进行连续拍摄的“摄影枪”。此后他又发明了“软片式连续摄影机”。终于以一架摄影机开始取代了幕布里奇用一组照相机拍摄活动物体的方法。在欧洲，许多国家中的科学家、发明家们也都研制了不同类型的摄影机。其中，美国的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%89%98%E9%A9%AC%E6%96%AF%C2%B7%E7%88%B1%E8%BF%AA%E7%94%9F\">托马斯·爱迪生</a>和他的机械师狄克为了使胶片在摄影机中以同样间隔进行移动，而发明了在胶片两边打上孔洞的牵引方法，解决了机械传动的技术问题。“活动照相”的“摄影术”得以完成。</div><div class=\"para\" label-module=\"para\">目前国内第一本引进讲解拍摄的图书为电子工业出版社的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%A7%E5%B8%88%E9%95%9C%E5%A4%B4\">大师镜头</a>：<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BD%8E%E6%88%90%E6%9C%AC%E6%8B%8D%E5%A4%A7%E7%89%87%E7%9A%84100%E4%B8%AA%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7\">低成本拍大片的100个高级技巧</a>》，第一次将电影拍摄技术介绍给非专业人群。内容涵盖拍摄打斗镜头、追逐镜头、恐怖镜头、出场与退场、车内场景、对话场景、争吵冲突场景、爱情激情场景等各种技巧。</div><div class=\"para\" label-module=\"para\"><span>多片整合</span></div><div class=\"para\" label-module=\"para\">中国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E4%BA%A7%E4%B8%9A\">电影产业</a>高速增长，总票房及单一影片票房屡创新高，电影投资成本也有水涨船高之势。而随着债权融资、直接投资、广告收入与版权预售在内的多层次电影投融资渠道的日益完善，中国电影产业融资链条上两个我们无法忽视的薄弱环节变得更加明显：不可控的单一电影投资风险及无法完片发行风险。<br>　　2000年以来美国每年发行的600多部影片中，大约只有1/4的影片盈利，但已足以弥补其余影片的亏损，并为制片发行方带来高额回报。电影市场回报的高度不确定性，决定了投资组合理念盛行。<br>　　相比2000年以前的单一电影融资机制，国内外电影人也更加青睐于新兴的投资组合运作：它将投资人的资本按科学比例组合投在多个电影项目上，在3至5年，甚至更长时间内分期制作、发行。并以其差异性和投资方式的组合性，可以最大程度地降低投资风险，尽可能提升电影组合的整体投资回报。<br>　　好莱坞早在1995年就将投资组合理论运用于电影投资，因此吸引了大批保险资金和养老基金。通常一个投资组合中会包括20至25部风格不同的电影，这极大地压低了投资人的风险。如今这一理念也传入中国，国影投资基金便是采用这一理念运作的。<br>　　完片担保更是<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%BD%E8%8E%B1%E5%9D%9E%E7%94%B5%E5%BD%B1\">好莱坞电影</a>融资的关键流程，其相关方包括电影上游的投资人、电影下游的制作方及作为第三方的担保方，而一般而言，包括保险公司与担保公司在内的电影担保方才是整个融资链条的核心。完片担保方需要保证电影的投资，而制片人在落实了可供拍摄的剧本、导演及部分主要演员的基础上，在影片开拍前，提前预售电影全部或部分版权。这通常涉及与发行方进行谈判，包括其发行地域、发行条件及分成比例、合约类型等，也包括影片的其他技术要素：按照什么技术规范拍摄、交片档期、各自的任务衔接等。这些预售合约如果是和一些知名制片公司签的，或具备一个出色的主创团队，就能够作为制片贷款的附件，为其增加砝码。<br>　　投资方若有完片公司担保，能够确认影片在遵照预售合约设定的条件下，在约定日期前交到发行商手里，就能促进发行商提前支付订金。相反，如果没有完片担保合约，银行及其他投资人不会放心投资，制片人也难以提供预付款项；没有完片担保，电影产品甚至不能完成并交片。<br>　　电影制作方需要资金拍摄新电影时，一般会通过担保方寻找上游机构进行投资。而电影担保方既要了解整个电影的结构、剧情、演员，从而准确评估电影将来的票房收入，又要说服上游资本投资该影片。从某种程度而言，担保方对电影制作的上下游存在着很强的渗透和控制能力，这也是电影市场成熟的标志之一。<br>　　作为21世纪国际上知名的电影完片<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8B%85%E4%BF%9D%E5%85%AC%E5%8F%B8\">担保公司</a>，比如Cine Finance，能为客户提供专业的电影完成担保服务，并为日趋综合性的复杂业务提供创意解决方案，并适应于国际化的联合制作、税收结构和地区性的扶助金政策，辅助制片人为其影片的投资打通渠道，确定方案。<br>　　在影视融资担保方面，不少机构正在进行积极探索，如具有国资背景的北京国华文创融资担保有限公司就向实际运营2年以上的影视剧制作、发行公司提供6至24个月且额度300万元至3000万元不等的专项贷款，但规定其实物资产抵押物价值不低于贷款金额的30%，并采用了以应收账款、股权、有价证券或依法可以转让的商标专用权、专利权、著作权中的财产权质押，企业控制人提供个人无限连带责任等多种反担保措施。笔者认为，诸如多片整合与完片担保等在内的融资机制的不断推陈出新，也将推动我国电影产业融资产业链的进一步完善。</div><div class=\"anchor-list\"><a name=\"6_2\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_6_2\" class=\"lemma-anchor \"></a><a name=\"放映\" class=\"lemma-anchor \"></a><a name=\"6-2\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">放映</h3></div><div class=\"para\" label-module=\"para\"><span>光学影戏机</span></div><div class=\"para\" label-module=\"para\">1888年，法国人<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9F%83%E7%B1%B3%E5%B0%94%C2%B7%E9%9B%B7%E8%AF%BA\">埃米尔·雷诺</a>发明了“光学影戏机”，人<a class=\"lemma-album layout-right nslog:10000206\" title=\"光学影戏机\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/16169784/a044ad345982b2b7ad93fe3031adcbef76099b32?fr=lemma&amp;ct=cover\" target=\"_blank\" nslog-type=\"10000206\"><div class=\"album-wrap\"><img class=\"picture\" alt=\"光学影戏机\" src=\"https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=ed636ae6720e0cf3a4f749f93a47f23d/a044ad345982b2b7ad93fe3031adcbef76099b32.jpg\"></div><div class=\"description\">光学影戏机<span class=\"number\">(3张)</span></div><div class=\"albumBg\"><div class=\"albumBgFir\"></div><div class=\"albumBgSec\"></div></div></a>&nbsp;们开始可以在幕布上看到几分钟的活动影戏，比如</div><div class=\"para\" label-module=\"para\">《可怜的比埃》。</div><div class=\"para\" label-module=\"para\"><span>活动摄影</span></div><div class=\"para\" label-module=\"para\">1895 年<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%A2%E7%B1%B3%E5%9F%83%E5%B0%94\">卢米埃尔</a>兄弟向大众展现《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%81%AB%E8%BD%A6%E8%BF%9B%E7%AB%99\">火车进站</a>》的画面时，观众被几乎是活生生的影像吓得惊惶四散。从此，由他们所启动的活动摄影（cinematogrphy）不只在人类纪实工具的发展史上展现了划时代的意义，火车进站的镜头也象征了电影技术发展的源起。<span>　</span></div><div class=\"para\" label-module=\"para\"><span>超大银幕</span></div><div class=\"para\" label-module=\"para\">采用70毫米的电影放映技术，因其银幕巨大而称超大。其银幕高度为21米，宽度为30米，相当于七层楼的高度。银幕之大而成为世界之罕见。它具有画面稳定、清晰、色彩还原正常等特点，银幕上景物真实而恢宏的场面，给人以美的欣赏与动的感受，随着远近镜头的推拉，将把您带入富异国情调的美丽的大自然之中。</div><div class=\"para\" label-module=\"para\"><span>动感球幕</span></div><div class=\"para\" label-module=\"para\">影厅采用70毫米放映设备，半球形银幕直径达18米，观众观看电影时，整个画面布满球体，而不是银幕边缘，透射型的金属银幕，六声道的立体声效果，使观众享受变化万千，栩栩如生的万千气象。影厅内的动感平台，是集液压、电器自动化控制、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8A%A8%E7%94%BB\">计算机动画</a>为一体的高科技系统工程，当您坐在平台载体上，整个载体能上下升降，左右倾斜，前后俯仰，即可模拟航天器去邀游太空，也可模拟潜水器，饱览海底世界的奇特景象，随着逼真的画面和平台载体的活动，让人不由自主的进入角色，造成十分真实和惊险刺激的特殊感觉，球幕<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A8%E6%84%9F%E7%94%B5%E5%BD%B1\">动感电影</a>填补了国内空白。</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B0%B4%E5%B9%95\"><span>水幕</span></a></div><div class=\"para\" label-module=\"para\">与一常规电影完全不同。它是利用高压水泵通过特制的喷头，<a class=\"lemma-album layout-right nslog:10000206\" title=\"水幕电影\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/16169785/c9bdddce1d23243b93457e3c?fr=lemma&amp;ct=cover\" target=\"_blank\" nslog-type=\"10000206\"><div class=\"album-wrap\"><img class=\"picture\" alt=\"水幕电影\" src=\"https://gss2.bdstatic.com/-fo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D220/sign=458e97fad562853596e0d523a0ee76f2/fc1f4134970a304efbc14df2d1c8a786c8175cd3.jpg\"></div><div class=\"description\">水幕电影<span class=\"number\">(3张)</span></div><div class=\"albumBg\"><div class=\"albumBgFir\"></div><div class=\"albumBgSec\"></div></div></a>&nbsp;将水自下而上喷出，使水雾化并形成扇面形银幕。此银幕与自然界的夜空连成一片，人物出入画面，忽而腾起飞向天空，忽而又从天而降，产生一种虚幻缥缈的感觉，似海市蜃楼。<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B0%B4%E5%B9%95%E7%94%B5%E5%BD%B1\">水幕电影</a>在我国还很少见。</div><div class=\"para\" label-module=\"para\"><span>环幕</span></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%AF%E5%B9%95%E7%94%B5%E5%BD%B1\">环幕电影</a>：环幕电影也称360度圆周电影，厅内呈圆形周边是由九块银幕组成一个环形银幕，由九台放映机同时放映，观众观摩时，站在圆周中心位置，前瞻后瞩，左顾右盼，目不暇接，画面景象壮观，气势磅礴，加上多声道立体声效果，一种身临其境的强烈感觉，会呈现在观众的面前。</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/3D/25017\" data-lemmaid=\"25017\"><span>3D</span></a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/3D%E7%94%B5%E5%BD%B1\">3D电影</a>是利用光学原理与人眼的视差相配合产生的一种奇特的空间影像和立体效果，当您戴上特制的<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%81%8F%E5%85%89%E7%9C%BC%E9%95%9C\">偏光眼镜</a>，就会感到银幕上的一切景物和大自然一样，存在着远近前后不同距离，有的景物近在眼前，似乎垂手可得，当某一物体朝你快速推进，你会感到物体猛地向头部袭来，使你大吃一惊。</div><div class=\"para\" label-module=\"para\"><span>P2P</span></div><div class=\"para\" label-module=\"para\">随着互联网的发展，P2P作为一种新兴的网络电影播放形式，以其速度快，少缓冲，人越多越不卡的优点成为<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/cb8065380cd79123f66ba744ae345982b2b78072?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"\"><img class=\"\" src=\"http://b.hiphotos.baidu.com/baike/s%3D220/sign=0c94494a23a446237acaa260a8237246/cb8065380cd79123f66ba744ae345982b2b78072.jpg\" alt=\"\"></a></div>广大网友所喜欢的一些电影播放形式，网络中的电影播放形式又叫在线电影，让你足不出户就可以在网络的海洋里，看到你所想看到的电影。<span>　</span></div><div class=\"para\" label-module=\"para\"><span>角色电影</span></div><div class=\"para\" label-module=\"para\">如今还未能推出，但是随着其发展，将很快进入我们生活。其实，角色电影就是以第一人称的视角，拍出来的电影，我们所玩的游戏就可以算作角色电影。</div><div class=\"para\" label-module=\"para\"><span>定格</span></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E9%95%9C%E5%A4%B4\">电影镜头</a>运用的技巧手法之一。其表现为银幕上映出的活动影像骤然停止而成为静止画面（呆照<span>[4]</span><a class=\"sup-anchor\" name=\"ref_[4]_7943995\">&nbsp;</a>&nbsp;）。定格是动作的刹那间“凝结”，显示宛若雕塑的静态美，用以突出或渲染某一场面、某种神态、某个细节等。具体制作方法是，选取所摄镜头中的某一格画面，通过印片机重复印片，使这一停止画面延伸到所需长度。根据镜头剪辑的需要，定格处理可由动（活动画面）到静（定格画面），也可由静（定格画面）到动（活动画面）；也有的在影片结尾时，用定格表明故事结束，或借此点题，以便给观众留有回味。定格是指将上一段的结尾画面动作作静帧处理，使人产生瞬间的视觉停顿，接着出现下一段的第一个画面。</div><div class=\"para\" label-module=\"para\"><span>4D</span></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/4D%E7%94%B5%E5%BD%B1\">4D电影</a>是将震动、吹风、喷水、烟雾、气泡、气味、布景，人物表演等特技效果引入3D（即<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%AB%8B%E4%BD%93%E7%94%B5%E5%BD%B1\">立体电影</a>）影片中。形成一种独特的表演形式，这是当今流行的4D电影。　<div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/ca1349540923dd54c57e95d3d909b3de9c82487f?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"\"><img class=\"\" src=\"http://d.hiphotos.baidu.com/baike/s%3D220/sign=43920b7f39adcbef053479049cae2e0e/ca1349540923dd54c57e95d3d909b3de9c82487f.jpg\" alt=\"\"></a></div>　实际上这是一个伪概念，1D（一维）指的是只有长或宽，2D是指有长和宽，3D是指有长宽高，4D则是指带有时间维度的3D，所以这里的4D是一个伪概念。比如我们就生存在三维空间（3D），时间与空间是整体，不能分割。也有说我们处于四维，空间三维，时间一维。时间轴上每一点都是一个三维的场景组成，这才构成世界。所以这是伪概念。实际上我们所玩的3D游戏只是在平面表现空间，实际意义只能说是2D，而真正的3D是全息投影。</div><div class=\"anchor-list\"><a name=\"7\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_7\" class=\"lemma-anchor \"></a><a name=\"电影审查\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">电影审查</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"7\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\">国家新闻出版广电总局电影局为规范和改进电影剧本（梗概）备案和电影片管理制度，提高电影质量，繁荣电影创作，满足广大群众的精神文化需求，推进电影业健康发展，根据《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%B5%E5%BD%B1%E7%AE%A1%E7%90%86%E6%9D%A1%E4%BE%8B\">电影管理条例</a>》对影片的内容和技术进行审查。</div><div class=\"anchor-list\"><a name=\"8\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_8\" class=\"lemma-anchor \"></a><a name=\"电影节\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">电影节</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"8\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\">据粗略统计，全世界六大洲六十多个国家和地区单独举办或轮流举办的各种名目的国际电影节已超过三百个。欧洲是国际电影节的发源地，现有24个国家，先后举办过144个电影节。其中<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9/148336\" data-lemmaid=\"148336\">意大利</a>27个，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B3%95%E5%9B%BD/1173384\" data-lemmaid=\"1173384\">法国</a>26个，西班牙23个；三个国家共76个，占欧洲总数的一半左右。提起“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">国际电影节</a>”，也许不少人会以为“<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%A5%E6%96%AF%E5%8D%A1%E9%87%91%E5%83%8F%E5%A5%96\">奥斯卡金像奖</a>”就是最大的“国际电影节”。其实“奥斯卡”只是美国本国的电影奖而已。为了增加国际性，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%A5%E6%96%AF%E5%8D%A1/333665\" data-lemmaid=\"333665\">奥斯卡</a>从1948年起又增设了一个“最佳外语片奖”。从上世纪70年代起，每年颁奖仪式都由<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%80%9A%E8%AE%AF%E5%8D%AB%E6%98%9F\">通讯卫星</a>向全世界作实况转播，“奥斯卡金像奖”就更具全球性的影响了。</div><div class=\"anchor-list\"><a name=\"8_1\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_8_1\" class=\"lemma-anchor \"></a><a name=\"国内电影节\" class=\"lemma-anchor \"></a><a name=\"8-1\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">国内电影节</h3></div><div class=\"para\" label-module=\"para\"><div class=\"lemma-picture text-pic layout-right\"><a class=\"image-link\" nslog-type=\"9317\" href=\"https://baike.baidu.com/pic/%E7%94%B5%E5%BD%B1/31689/0/aec379310a55b3199fbe32fe41a98226cefc17f1?fr=lemma&amp;ct=single\" target=\"_blank\" title=\"\"><img class=\"\" src=\"http://e.hiphotos.baidu.com/baike/s%3D220/sign=bc864675c1fdfc03e178e4bae43e87a9/aec379310a55b3199fbe32fe41a98226cefc17f1.jpg\" alt=\"\"></a></div><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">北京国际电影节</a><span>[5]</span><a class=\"sup-anchor\" name=\"ref_[5]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E7%94%B5%E5%BD%B1%E8%8A%82\">上海电影节</a><span>[6]</span><a class=\"sup-anchor\" name=\"ref_[6]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%94%B5%E5%BD%B1%E8%8A%82\">北京大学生电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%95%BF%E6%98%A5%E7%94%B5%E5%BD%B1%E8%8A%82\">长春电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8F%A0%E6%B5%B7%E7%94%B5%E5%BD%B1%E8%8A%82\">珠海电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8F%B0%E5%8C%97%E7%94%B5%E5%BD%B1%E8%8A%82\">台北电影节</a>.......</div><div class=\"anchor-list\"><a name=\"8_2\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_8_2\" class=\"lemma-anchor \"></a><a name=\"国际电影节\" class=\"lemma-anchor \"></a><a name=\"8-2\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">国际电影节</h3></div><div class=\"para\" label-module=\"para\">国际电影节之父———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A8%81%E5%B0%BC%E6%96%AF%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">威尼斯国际电影节</a></div><div class=\"para\" label-module=\"para\">最权威的国际电影节之一———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%88%9B%E7%BA%B3%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">戛纳国际电影节</a></div><div class=\"para\" label-module=\"para\">东西方电影对话的桥梁———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9F%8F%E6%9E%97%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">柏林国际电影节</a></div><div class=\"para\" label-module=\"para\">电影节的电影节———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BC%A6%E6%95%A6%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">伦敦国际电影节</a></div><div class=\"para\" label-module=\"para\">为了和平与友谊———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8E%AB%E6%96%AF%E7%A7%91%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">莫斯科国际电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%97%E7%BE%8E%E6%B4%B2\">北美洲</a>的电影节———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%92%99%E7%89%B9%E5%88%A9%E5%B0%94%E4%B8%96%E7%95%8C%E7%94%B5%E5%BD%B1%E8%8A%82\">蒙特利尔世界电影节</a></div><div class=\"para\" label-module=\"para\">我国影片获奖最多的电影节———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%A1%E7%BD%97%E7%BB%B4%E5%8F%91%E5%88%A9%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">卡罗维发利国际电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E6%B4%B2\">亚洲</a>最大的电影节———亚太国际电影节</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9D%9E%E6%B4%B2/81619\" data-lemmaid=\"81619\">非洲</a>最有影响的电影节———<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BC%80%E7%BD%97%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">开罗国际电影节</a></div><div class=\"anchor-list\"><a name=\"9\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9\" class=\"lemma-anchor \"></a><a name=\"全球奖项\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">全球奖项</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"9\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"anchor-list\"><a name=\"9_1\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9_1\" class=\"lemma-anchor \"></a><a name=\"北美洲\" class=\"lemma-anchor \"></a><a name=\"9-1\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">北美洲</h3></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%A5%E6%96%AF%E5%8D%A1%E9%87%91%E5%83%8F%E5%A5%96\">奥斯卡金像奖</a></div><div class=\"para\" label-module=\"para\">美国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E7%90%83%E5%A5%96/2284347\" data-lemmaid=\"2284347\">金球奖</a></div><div class=\"para\" label-module=\"para\">美国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BA%BD%E7%BA%A6%E5%BD%B1%E5%B1%95\">纽约影展</a></div><div class=\"para\" label-module=\"para\">美国日舞影展</div><div class=\"para\" label-module=\"para\">美国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8A%9D%E5%8A%A0%E5%93%A5%E5%BD%B1%E5%B1%95\">芝加哥影展</a></div><div class=\"para\" label-module=\"para\">美国旧金山影展</div><div class=\"para\" label-module=\"para\">美国纽约玛格雷丽特影展</div><div class=\"para\" label-module=\"para\">美国圣地牙哥影展</div><div class=\"para\" label-module=\"para\">美国西雅图影展</div><div class=\"para\" label-module=\"para\">美国夏威夷影展</div><div class=\"para\" label-module=\"para\">美国旧金山同性恋影展</div><div class=\"para\" label-module=\"para\">美国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B4%9B%E6%9D%89%E7%9F%B6\">洛杉矶</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E9%85%B8%E8%8E%93%E5%A5%96\">金酸莓奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E7%8B%AC%E7%AB%8B%E7%B2%BE%E7%A5%9E%E5%A5%96\">美国独立精神奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B4%9B%E6%9D%89%E7%9F%B6%E5%BD%B1%E8%AF%84%E4%BA%BA%E5%8D%8F%E4%BC%9A%E5%A5%96\">洛杉矶影评人协会奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BA%BD%E7%BA%A6%E5%BD%B1%E8%AF%84%E4%BA%BA%E5%8D%8F%E4%BC%9A%E5%A5%96\">纽约影评人协会奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A5%BD%E8%8E%B1%E5%9D%9E/79274\" data-lemmaid=\"79274\">好莱坞</a>电影节</div><div class=\"para\" label-module=\"para\">Teen Choice</div><div class=\"para\" label-module=\"para\">加拿大多伦多影展</div><div class=\"para\" label-module=\"para\">加拿大蒙特利尔影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8A%A0%E6%8B%BF%E5%A4%A7\">加拿大</a>温哥华影展</div><div class=\"anchor-list\"><a name=\"9_2\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9_2\" class=\"lemma-anchor \"></a><a name=\"欧洲\" class=\"lemma-anchor \"></a><a name=\"9-2\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">欧洲</h3></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8B%B1%E5%9B%BD%E7%94%B5%E5%BD%B1%E5%AD%A6%E9%99%A2%E5%A5%96\">英国电影学院奖</a></div><div class=\"para\" label-module=\"para\">英国伦敦影展</div><div class=\"para\" label-module=\"para\">英国爱丁堡影展</div><div class=\"para\" label-module=\"para\">英国爱丁堡影展</div><div class=\"para\" label-module=\"para\">英国伦敦短片影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E7%94%B5%E5%BD%B1%E5%A5%96\">欧洲电影奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9F%8F%E6%9E%97%E7%94%B5%E5%BD%B1%E8%8A%82\">柏林电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E7%86%8A%E5%A5%96\">金熊奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A8%81%E5%B0%BC%E6%96%AF%E7%94%B5%E5%BD%B1%E8%8A%82\">威尼斯电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E7%8B%AE%E5%A5%96\">金狮奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%88%9B%E7%BA%B3%E7%94%B5%E5%BD%B1%E8%8A%82\">戛纳电影节</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E6%A3%95%E6%A6%88%E5%A5%96\">金棕榈奖</a></div><div class=\"para\" label-module=\"para\">荷兰鹿特丹影展</div><div class=\"para\" label-module=\"para\">荷兰阿姆斯特丹纪录片影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%B7%E5%9B%BD%E5%9B%BD%E9%99%85%E5%A6%87%E5%A5%B3%E7%94%B5%E5%BD%B1%E8%8A%82\">德国国际妇女电影节</a></div><div class=\"para\" label-module=\"para\">德国曼汉姆影展</div><div class=\"para\" label-module=\"para\">德国汉堡电影节</div><div class=\"para\" label-module=\"para\">德国慕尼黑电影节</div><div class=\"para\" label-module=\"para\">瑞士卢卡诺影展</div><div class=\"para\" label-module=\"para\">瑞士佛瑞堡影展</div><div class=\"para\" label-module=\"para\">瑞典<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%96%AF%E5%BE%B7%E5%93%A5%E5%B0%94%E6%91%A9%E7%94%B5%E5%BD%B1%E8%8A%82\">斯德哥尔摩电影节</a></div><div class=\"para\" label-module=\"para\">法国南特影展</div><div class=\"para\" label-module=\"para\">法国克勒泰依女性影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B3%95%E5%9B%BD/1173384\" data-lemmaid=\"1173384\">法国</a>凯撒大奖</div><div class=\"para\" label-module=\"para\">法国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%87%AF%E6%92%92%E7%94%B5%E5%BD%B1%E5%A5%96\">凯撒电影奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BF%84%E7%BD%97%E6%96%AF/125568\" data-lemmaid=\"125568\">俄罗斯</a><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8E%AB%E6%96%AF%E7%A7%91/5522\" data-lemmaid=\"5522\">莫斯科</a>影展</div><div class=\"para\" label-module=\"para\">捷克卡罗威发利影展</div><div class=\"para\" label-module=\"para\">意大利<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%BF%9C%E4%B8%9C%E7%94%B5%E5%BD%B1%E8%8A%82\">远东电影节</a></div><div class=\"para\" label-module=\"para\">意大利都灵影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9%E7%94%B5%E5%BD%B1%E5%A4%A7%E5%8D%AB%E5%A5%96\">意大利电影大卫奖</a></div><div class=\"para\" label-module=\"para\">比利时布鲁塞尔国际影片暨录像带影展</div><div class=\"para\" label-module=\"para\">比利时根特影展</div><div class=\"para\" label-module=\"para\">奥地利维也纳影展</div><div class=\"para\" label-module=\"para\">希腊铁撒隆尼卡影展</div><div class=\"para\" label-module=\"para\">葡萄牙电影节</div><div class=\"para\" label-module=\"para\">西班牙芝昂电影节</div><div class=\"para\" label-module=\"para\">巴塞罗那电影节</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9C%A3%E5%A1%9E%E5%B7%B4%E6%96%AF%E8%92%82%E5%AE%89%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">圣塞巴斯蒂安国际电影节</a></div><div class=\"para\" label-module=\"para\">挪威电影节</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%8D%B7%E5%85%8B%E5%8D%A1%E7%BD%97%E7%BB%B4%E6%B3%95%E5%88%A9%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">捷克卡罗维法利国际电影节</a></div><div class=\"anchor-list\"><a name=\"9_3\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9_3\" class=\"lemma-anchor \"></a><a name=\"亚洲\" class=\"lemma-anchor \"></a><a name=\"9-3\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">亚洲</h3></div><div class=\"para\" label-module=\"para\">国际学生电影影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E7%94%B5%E5%BD%B1%E9%87%91%E5%83%8F%E5%A5%96\">香港电影金像奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%8E%E9%BC%8E%E5%A5%96\">华鼎奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E5%AD%A6%E4%BC%9A%E5%A4%A7%E5%A5%96\">香港电影评论学会大奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E7%94%B5%E5%BD%B1%E9%87%91%E7%B4%AB%E8%8D%86%E5%A5%96\">香港电影金紫荆奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E6%B4%B2%E7%94%B5%E5%BD%B1%E5%A4%A7%E5%A5%96\">亚洲电影大奖</a></div><div class=\"para\" label-module=\"para\">台湾金马奖</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8F%B0%E5%8C%97%E7%94%B5%E5%BD%B1%E8%8A%82\">台北电影节</a></div><div class=\"para\" label-module=\"para\">台湾中时晚报电影奖</div><div class=\"para\" label-module=\"para\">中国百花奖</div><div class=\"para\" label-module=\"para\">中国金鸡奖</div><div class=\"para\" label-module=\"para\">中国华表奖</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E6%89%AB%E5%B8%9A%E5%A5%96\">金扫帚奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%99%BE%E5%90%88%E5%A5%96\">百合奖</a></div><div class=\"para\" label-module=\"para\">中国电影世纪奖</div><div class=\"para\" label-module=\"para\">日本东京国际电影节大奖</div><div class=\"para\" label-module=\"para\">日本山形纪录片影展</div><div class=\"para\" label-module=\"para\">日本福冈影展</div><div class=\"para\" label-module=\"para\">日本电影学院大奖</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%97%A5%E6%9C%AC%E7%94%B5%E5%BD%B1%E6%97%AC%E6%8A%A5%E5%A5%96\">日本电影旬报奖</a></div><div class=\"para\" label-module=\"para\">韩国釜山影展</div><div class=\"para\" label-module=\"para\">新加坡影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E5%A4%AA%E5%BD%B1%E5%B1%95\">亚太影展</a></div><div class=\"para\" label-module=\"para\">韩国全州国际影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%AA%8F%E9%A9%AC%E5%A5%96\">骏马奖</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%87%91%E8%AF%9D%E6%A2%85%E5%A5%96\">金话梅奖</a></div><div class=\"para\" label-module=\"para\">金扫帚奖</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8D%B0%E5%BA%A6%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">印度国际电影节</a></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9B%BC%E8%B0%B7%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">曼谷国际电影节</a></div><div class=\"anchor-list\"><a name=\"9_4\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9_4\" class=\"lemma-anchor \"></a><a name=\"大洋洲\" class=\"lemma-anchor \"></a><a name=\"9-4\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">大洋洲</h3></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%BE%B3%E6%B4%B2\">澳洲</a>雪梨影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A2%A8%E5%B0%94%E6%9C%AC%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">墨尔本国际电影节</a></div><div class=\"para\" label-module=\"para\">澳洲雪梨纪录片影展</div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%BE%B3%E5%A4%A7%E5%88%A9%E4%BA%9A%E6%82%89%E5%B0%BC%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">澳大利亚悉尼国际电影节</a></div><div class=\"anchor-list\"><a name=\"9_5\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_9_5\" class=\"lemma-anchor \"></a><a name=\"特殊\" class=\"lemma-anchor \"></a><a name=\"9-5\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-3\" label-module=\"para-title\"><h3 class=\"title-text\">特殊</h3></div><div class=\"para\" label-module=\"para\"><a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8F%AD%E5%A4%AB%E5%B1%B1%E5%9C%B0%E7%94%B5%E5%BD%B1%E8%8A%82\">班夫山地电影节</a></div><div class=\"anchor-list\"><a name=\"10\" class=\"lemma-anchor para-title\"></a><a name=\"sub7943995_10\" class=\"lemma-anchor \"></a><a name=\"中国电影之最\" class=\"lemma-anchor \"></a></div><div class=\"para-title level-2\" label-module=\"para-title\"><h2 class=\"title-text\">中国电影之最</h2><a class=\"edit-icon j-edit-link\" data-edit-dl=\"10\"><span class=\"cmn-icon wiki-lemma-icons wiki-lemma-icons_edit-lemma\"></span>编辑</a></div><div class=\"para\" label-module=\"para\">中国最早放映的电影——1896年8月11日法国商人在上海<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%90%E5%9B%AD\">徐园</a>“又一村”茶楼内放映的“西洋影戏”。<span>[7]</span><a class=\"sup-anchor\" name=\"ref_[7]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\">中国<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%AC%AC%E4%B8%80%E9%83%A8%E7%94%B5%E5%BD%B1\">第一部电影</a>是戏曲片京剧《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%9A%E5%86%9B%E5%B1%B1\">定军山</a>》，内有《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AF%B7%E7%BC%A8\">请缨</a>》、《舞刀》等片断，1905年（清光绪三十一年），由<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E4%B8%B0%E6%B3%B0%E7%85%A7%E7%9B%B8%E9%A6%86\">北京丰泰照相馆</a>摄制。无声片，长约半小时。</div><div class=\"para\" label-module=\"para\">中国第一部短故事片是《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9A%BE%E5%A4%AB%E9%9A%BE%E5%A6%BB\">难夫难妻</a>》（又名《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B4%9E%E6%88%BF%E8%8A%B1%E7%83%9B\">洞房花烛</a>》），1913年在上海拍摄，无声片，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%83%91%E6%AD%A3%E7%A7%8B\">郑正秋</a>编剧，郑正秋和<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BC%A0%E7%9F%B3%E5%B7%9D\">张石川</a>联合导演。此片是由<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%9A%E7%BB%86%E4%BA%9A%E5%BD%B1%E6%88%8F%E5%85%AC%E5%8F%B8\">亚细亚影戏公司</a>开张后的第一部作品，首开<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%AE%B6%E5%BA%AD%E4%BC%A6%E7%90%86%E5%89%A7\">家庭伦理剧</a>之先河。</div><div class=\"para\" label-module=\"para\">中国第一部长故事片——1921年中国影戏研究社在上海拍摄第一部长故事片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%98%8E%E7%91%9E%E7%94%9F\">阎瑞生</a>》。</div><div class=\"para\" label-module=\"para\">中国现存最早的一部可放映电影——1922年由张石川导演的《劳工之爱情》又名《掷果缘》，是现存尚可放映的最早的一部中国电影，也是中国现存最早的故事片。</div><div class=\"para\" label-module=\"para\">中国第一部<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9C%89%E5%A3%B0%E7%94%B5%E5%BD%B1\">有声电影</a>是《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%AD%8C%E5%A5%B3%E7%BA%A2%E7%89%A1%E4%B8%B9\">歌女红牡丹</a>》，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%98%8E%E6%98%9F%E5%BD%B1%E7%89%87%E5%85%AC%E5%8F%B8\">明星影片公司</a>1931年摄制，该片采用的是蜡盘配音的技术。</div><div class=\"para\" label-module=\"para\">中国第一部开创电影奇迹的影片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A0%B4%E8%88%B1\">破舱</a>》，是完全一个人摄制的、零成本、即兴创作（先拍摄后写剧本）的电影长片，2013年<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9D%A8%E8%AF%9A%E4%BF%8A\">杨诚俊</a>导演电影。</div><div class=\"para\" label-module=\"para\">中国第一部获得国际大奖的影片是20世纪30年代由<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%94%A1%E6%A5%9A%E7%94%9F\">蔡楚生</a>导演的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B8%94%E5%85%89%E6%9B%B2\">渔光曲</a>》，它在1935年<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%8E%AB%E6%96%AF%E7%A7%91%E5%9B%BD%E9%99%85%E7%94%B5%E5%BD%B1%E8%8A%82\">莫斯科国际电影节</a>上获“荣誉奖”。</div><div class=\"para\" label-module=\"para\">中国第一部长动画片——1941年中国第一部长动画片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%93%81%E6%89%87%E5%85%AC%E4%B8%BB\">铁扇公主</a>》完成，公映后受到好评。</div><div class=\"para\" label-module=\"para\">中国第一部彩色电影是1948年拍摄于上海的戏曲片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%94%9F%E6%AD%BB%E6%81%A8\">生死恨</a>》，由华艺影片公司出品。费穆导演，主演<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A2%85%E5%85%B0%E8%8A%B3\">梅兰芳</a>，著名摄影师<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E7%BB%8D%E8%8A%AC\">黄绍芬</a>为摄影指导，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9D%8E%E7%94%9F%E4%BC%9F\">李生伟</a>任摄影师。</div><div class=\"para\" label-module=\"para\">新中国成立后第一部故事片是《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A1%A5\">桥</a>》，编剧<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%8E%E6%95%8F\">于敏</a>，导演<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%8B%E6%BB%A8\">王滨</a>，东北电影制片厂1949年摄制。</div><div class=\"para\" label-module=\"para\">新中国成立后的第一部<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%AF%91%E5%88%B6%E7%89%87\">译制片</a>是《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%9B%A2%E7%9A%84%E5%84%BF%E5%AD%90\">团的儿子</a>》，原译名《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%B0%8F%E8%8B%B1%E9%9B%84\">小英雄</a>》，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9D%A8%E8%8C%83\">杨范</a>、陈涓翻译，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%91%A8%E5%BD%A6\">周彦</a>译制导演，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E7%94%B5%E5%BD%B1%E5%88%B6%E7%89%87%E5%8E%82\">上海电影制片厂</a>1950年译制。</div><div class=\"para\" label-module=\"para\">我国与外国合拍的第一部彩色故事片是1958年由<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%8C%97%E4%BA%AC%E7%94%B5%E5%BD%B1%E5%88%B6%E7%89%87%E5%8E%82\">北京电影制片厂</a>与法国加朗斯公司合摄的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A3%8E%E7%AD%9D\">风筝</a>》，导演<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%8B%E5%AE%B6%E4%B9%99\">王家乙</a>、罗歇·比果。</div><div class=\"para\" label-module=\"para\">中国第一部彩色故事片是1956年拍的《祝福》（<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%B2%81%E8%BF%85\">鲁迅</a>著，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%A4%8F%E8%A1%8D\">夏衍</a>改编，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A1%91%E5%BC%A7\">桑弧</a>导演），北京电影制片厂摄制。</div><div class=\"para\" label-module=\"para\">中国第一部彩色宽银幕故事片是1959年拍的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%80%81%E5%85%B5%E6%96%B0%E4%BC%A0\">老兵新传</a>》，编剧<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9D%8E%E5%87%86\">李准</a>，导演<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%B2%88%E6%B5%AE\">沈浮</a>，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E6%B5%B7%E7%87%95%E7%94%B5%E5%BD%B1%E5%88%B6%E7%89%87%E5%8E%82\">上海海燕电影制片厂</a>摄制。</div><div class=\"para\" label-module=\"para\">中国第一部彩色立体银幕故事片是1962年拍的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%AD%94%E6%9C%AF%E5%B8%88%E7%9A%84%E5%A5%87%E9%81%87\">魔术师的奇遇</a>》，编剧：<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%8B%E7%82%BC\">王炼</a>、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%99%88%E6%81%AD%E6%95%8F\">陈恭敏</a>、桑弧，导演桑弧，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E5%A4%A9%E9%A9%AC%E7%94%B5%E5%BD%B1%E5%88%B6%E7%89%87%E5%8E%82\">上海天马电影制片厂</a>摄制。</div><div class=\"para\" label-module=\"para\">中国第一部彩色舞台纪录片是1953年拍的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%A2%81%E5%B1%B1%E4%BC%AF%E4%B8%8E%E7%A5%9D%E8%8B%B1%E5%8F%B0\">梁山伯与祝英台</a>》，编剧：<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E5%BE%90%E8%BF%9B\">徐进</a>、桑弧，导演桑弧、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BB%84%E6%B2%99\">黄沙</a>，上海电影制片厂摄制。</div><div class=\"para\" label-module=\"para\">中国美术片第一次在国际上获奖影片——1956年<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E6%9C%A8%E5%81%B6%E7%89%87\">木偶片</a>《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%A5%9E%E7%AC%94\">神笔</a>》获意大利第八届威尼斯国际儿童电影节8至12岁的儿童文娱片一等奖。</div><div class=\"para\" label-module=\"para\">中国第一部获得柏林国际电影节金熊奖的电影——1988年张艺谋的《红高粱》。<span>[8]</span><a class=\"sup-anchor\" name=\"ref_[8]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\">中国第一部剪纸片——1958年<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%B8%87%E5%8F%A4%E8%9F%BE\">万古蟾</a>导演我国第一部剪纸片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8C%AA%E5%85%AB%E6%88%92%E5%90%83%E8%A5%BF%E7%93%9C\">猪八戒吃西瓜</a>》，为<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%BE%8E%E6%9C%AF%E5%BD%B1%E7%89%87\">美术影片</a>增添了一个新品种。</div><div class=\"para\" label-module=\"para\">中国第一部遮幅式宽银幕故事片是1977年拍的《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9D%92%E6%98%A5\">青春</a>》，李云官、<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E7%8E%8B%E7%82%BC\">王炼</a>编剧，<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E8%B0%A2%E6%99%8B\">谢晋</a>导演。</div><div class=\"para\" label-module=\"para\">中国第一部现代音乐故事片《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%9C%87%E6%92%BC\">震撼</a>》由长春电影制片厂和北京法宣影视文化有限公司强强联手，共同打造而成。</div><div class=\"para\" label-module=\"para\">中国第一座电影院——伊留继昂电影院。1905年，由俄籍建筑设计师、犹太人潘·瓦·科勃采夫开设了哈尔滨第一家电影院。原址就在<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%81%93%E9%87%8C%E5%8C%BA\">道里区</a>西十二道街和中央大街<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E4%BA%A4%E5%8F%A3\">交口</a>处，这也就是中国第一家电影院。</div><div class=\"para\" label-module=\"para\">中国第一个电影制片公司——1909年美籍俄裔商人本杰明·布拉斯基(Benjamin Brasky)久慕上海这块生财富地，不远万里来到上海<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E8%B7%AF\">香港路</a>创办亚细亚影戏公司。这是中国土地上的第一家影片摄制公司。<span>[9]</span><a class=\"sup-anchor\" name=\"ref_[9]_7943995\">&nbsp;</a></div><div class=\"para\" label-module=\"para\">中国海外预售最高动画片------《<a target=\"_blank\" href=\"https://baike.baidu.com/item/%E9%BE%99%E4%B9%8B%E8%B0%B7%C2%B7%E7%A0%B4%E6%99%93%E5%A5%87%E5%85%B5\">龙之谷·破晓奇兵</a>》</div><div class=\"para\" label-module=\"para\">中国国产电影票房第一名：《战狼2》，打破了《美人鱼》2016年创造的33.92亿票房纪录，成为中国影史的国产片新科状元。<span>[10]</span><a class=\"sup-anchor\" name=\"ref_[10]_7943995\">&nbsp;</a></div>','default',0),(169,'如何做「读书笔记」收获最大','主页文章','bigmeng',NULL,1,1,31,'2018-02-08 02:38:50',NULL,'/pic/a64a0383-7eac-4216-870a-205cb7b1c040.jpg',1,'大家平时怎样吸收和运用书中知识？看书时有做读书笔记的习惯吗？',NULL,'<p>今天我们继续聊一聊「善用纸张(Paper Smart)」的话题，就从「读书」来切入。你在平时阅读过程中，有没有使用好的笔记方法让「书页」发挥更大的价值呢？今天向各位象亲推荐 6 招：</p><h3>加工</h3><hr><p>这类方法基于直接在书页上加工，优点是直观方便。</p><p><span>通过批注做读书笔记</span></p><p>直接在书上做读书的批注会非常直观。勾画你有感触的语句，直接批注上你的想法和体悟，这样下次再翻看书籍时，非常容易识别书中精华和重点，也可以基于上次的阅读体会提出跟深入的见解或引入更多的视角。</p><p><img class=\"alignnone size-full wp-image-9800\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-5.png\" alt=\"640-5\" width=\"500\" height=\"399\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-5.png 500w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-5-300x239.png 300w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p><p><span>通过符号做读书笔记</span></p><p>在用这个方法读书时，有个很重要的前提是赋予符号固定的含义。比如「~~~」波浪线代表优美的语句，「！」感叹号代表着重要关注的观点等。当定义好自己的「阅读符号系统」后就可以直接在书页上恣意勾画啦。看看毛爷爷以前用符号笔记法做的读书笔记：</p><p><img class=\"alignnone size-full wp-image-9801\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-6.png\" alt=\"640-6\" width=\"500\" height=\"847\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-6.png 500w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-6-177x300.png 177w\" sizes=\"(max-width: 500px) 100vw, 500px\"></p><h3>延展</h3><hr><p>延展指的是书页之外的延伸，可以用纸张、笔记本或便条纸的形式去承载更多读书笔记的内容。这类方法更有助于内化书籍的精华，为自己所用。</p><p><span>通过视觉归纳做读书笔记</span></p><p>读完一本书后，有没有想过用一张纸来归纳总结书籍的内容？印象笔记的深度用户蔡萨沙非常擅长用画图的形式把一些生涩难懂的观点直接形象化。她会为每一本书都做一页手绘的读书笔记，这既是一种梳理，又能在日后能够帮助自己内化回顾，非常受用：</p><p><img class=\"alignnone size-full wp-image-9802\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-7.png\" alt=\"640-7\" width=\"640\" height=\"494\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-7.png 640w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-7-300x232.png 300w\" sizes=\"(max-width: 640px) 100vw, 640px\"></p><p><span>通过便条纸做读书笔记</span></p><p>一些好的体悟，也可以用便条纸的形式粘贴在对应的书页里。这样有几点好处：1、方便随时摘下挪动，自由组合。2、根据便条纸不同的颜色，赋予不同的批注功能。3、通过印象笔记扫描摄像头或<a href=\"https://www.yinxiang.com/products/scannable/\" target=\"_blank\">「扫描宝」</a>应用可以识别归档，直接电子化。</p><p>另外，使用便条纸还可以运用拆书帮的「RIA 读书法」：</p><blockquote><p>R（阅读片段）</p><p>I（用自己的话重述知识）</p><p>A1（描述自己的相关经验）</p><p>A2（以后我怎么应用）</p></blockquote><p>注：R=Read，阅读原文片段 / I=Interpretation 引导促进 / A=Appropriation 拆为己用</p><p>这样就能真正将书中知识学以致用啦，效果图如下：</p><p><img class=\"alignnone size-full wp-image-9803\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-8.png\" alt=\"640-8\" width=\"640\" height=\"838\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-8.png 640w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-8-229x300.png 229w\" sizes=\"(max-width: 640px) 100vw, 640px\"></p><h3>解构</h3><hr><p>解构是一种有意义的破坏，比如剪裁书籍，切割书籍，把糟粕或无意义的部分扔掉，让最好的部分留下。</p><p><span>通过剪贴手帐做读书笔记</span></p><p>很多时候，一本书不是都「有价值」，你可以直接把重要的部分剪裁下来贴到常用的读书笔记本上。这个笔记本将成为你的知识宝库，承载者精华，还带着你有温度的批注，既好看又实用。</p><p><img class=\"alignnone size-full wp-image-9804\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-49.jpeg\" alt=\"640-49\" width=\"595\" height=\"438\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-49.jpeg 595w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-49-300x221.jpeg 300w\" sizes=\"(max-width: 595px) 100vw, 595px\"></p><p><span>通过切书电子化做读书笔记</span></p><p>拥有一个「书房」或「大书柜」总归是一件奢侈的事情，特别对于喜欢「轻便出行」的年轻人来说，拥有一个「云端图书馆」更为重要。大家可以将自己喜欢的书籍沿着书脊切掉，使用印象笔记智能扫描仪或其他扫描工具将切割的书页进行电子化。</p><p><img class=\"alignnone size-full wp-image-9805\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-50.jpeg\" alt=\"640-50\" width=\"640\" height=\"360\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-50.jpeg 640w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-50-300x169.jpeg 300w\" sizes=\"(max-width: 640px) 100vw, 640px\"></p><p>将扫描文本存成 PDF 格式的文档后，可以使用印象笔记直接在电子书上进行圈点标注。这样你只需要带着手机或 iPad 出门，就能手握一个私人的图书馆啦！</p><p><img class=\"alignnone size-full wp-image-9806\" src=\"https://blog.yinxiang.com/wp-content/uploads/2017/02/640-51.jpeg\" alt=\"640-51\" width=\"640\" height=\"440\" srcset=\"http://blog.yinxiang.com/wp-content/uploads/2017/02/640-51.jpeg 640w, http://blog.yinxiang.com/wp-content/uploads/2017/02/640-51-300x206.jpeg 300w\" sizes=\"(max-width: 640px) 100vw, 640px\"></p><p>李克强总理曾在记者会上说「书籍和悦读可以说是人类和文明传承的重要载体，就个人的经历来说，闲暇时间阅读是一种享受，也是拥有财富，可以说终身受益。」多读书，多记笔记，一起多做一点让自己终身受益的事吧。</p><h3>让读书笔记电子化</h3><hr><p>如果还想永久保存甚至再次利用这些珍贵的读书笔记，可以在 iPhone 和 iPad 上安装印象笔记或「<a href=\"https://www.yinxiang.com/products/scannable/\" target=\"_blank\">扫描宝</a>」，对准读书笔记页，就能立即获得清晰的扫描件</p>','default',0),(171,'轮播图测试一','轮播图','bigmeng',NULL,1,1,33,'2018-02-08 03:10:08',NULL,'/pic/f0cb859c-bc92-4574-a5de-39a4652c4b8b.jpg',3,'测试',NULL,'测试-轮播图-哈','default',0),(172,'轮播图测试二','轮播图','bigmeng',NULL,1,1,33,'2018-02-08 03:20:11',NULL,'/pic/7517c3a8-5a81-4f04-8b9d-8528bc953c7a.jpg',0,'test',NULL,'轮播图唱的无法无法无法 的测试','default',0);
/*!40000 ALTER TABLE `cms_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_category`
--

DROP TABLE IF EXISTS `cms_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_title` varchar(100) DEFAULT NULL,
  `category_create_time` datetime DEFAULT NULL,
  `category_update_time` datetime DEFAULT NULL,
  `category_parent_id` int(11) DEFAULT NULL,
  `category_level` int(11) DEFAULT '0',
  `category_site_id` int(11) DEFAULT NULL,
  `category_status` int(11) DEFAULT NULL,
  `category_desc` varchar(255) DEFAULT NULL,
  `category_order` int(11) DEFAULT NULL,
  `category_skin` varchar(255) DEFAULT NULL,
  `category_type` varchar(255) DEFAULT NULL,
  `category_in_homepage` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`category_id`),
  KEY `cms_category_cms_category_category_id_fk` (`category_parent_id`),
  KEY `cms_category_cms_site_site_id_fk` (`category_site_id`),
  CONSTRAINT `cms_category_cms_category_category_id_fk` FOREIGN KEY (`category_parent_id`) REFERENCES `cms_category` (`category_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `cms_category_cms_site_site_id_fk` FOREIGN KEY (`category_site_id`) REFERENCES `cms_site` (`site_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_category`
--

LOCK TABLES `cms_category` WRITE;
/*!40000 ALTER TABLE `cms_category` DISABLE KEYS */;
INSERT INTO `cms_category` VALUES (1,'root',NULL,'2018-02-05 11:11:32',NULL,-1,1,NULL,'root category',NULL,NULL,'NORMAL_CATEGORY_TYPE',NULL),(27,'编程','2018-02-08 01:38:33',NULL,1,0,1,NULL,'编程是一门艺术',1,'default','普通目录',0),(28,'Java','2018-02-08 01:39:57','2018-02-08 02:33:05',27,1,1,NULL,'后端程序员最爱的一门语言!!',1,'default','主页目录',0),(29,'Python','2018-02-08 01:40:24',NULL,27,1,1,NULL,'emmmm, simple',1,'default','普通目录',0),(30,'电影艺术','2018-02-08 02:09:25','2018-02-08 02:31:45',1,0,1,NULL,'电影，是由活动照相术和幻灯放映术结合发展起来的一种连续的影像画面，是一门视觉和听觉的现代艺术，也是一门可以容纳悲喜剧与文学戏剧、摄影、绘画、音乐、舞蹈、文字、雕塑、建筑等多种艺术的现代科技与艺术的综合体。',1,'default','主页目录',0),(31,'读书生活','2018-02-08 02:15:42',NULL,1,0,1,NULL,'书籍是人类进步的阶梯',1,'default','主页目录',0),(32,'测试栏目','2018-02-08 03:08:04',NULL,1,0,1,NULL,'测试用',1,'default','普通目录',0),(33,'轮播图测试','2018-02-08 03:08:31',NULL,32,1,1,NULL,'轮播图测试用',1,'default','普通目录',0);
/*!40000 ALTER TABLE `cms_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_group`
--

DROP TABLE IF EXISTS `cms_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_group` (
  `group_id` int(11) NOT NULL AUTO_INCREMENT,
  `group_name` varchar(100) DEFAULT NULL,
  `group_desc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`group_id`),
  UNIQUE KEY `cms_group_group_name_uindex` (`group_name`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_group`
--

LOCK TABLES `cms_group` WRITE;
/*!40000 ALTER TABLE `cms_group` DISABLE KEYS */;
INSERT INTO `cms_group` VALUES (8,'admi',NULL),(31,'ccc',NULL),(32,'dddd',NULL),(38,'nnn','gbgfbfgbfgbgfb');
/*!40000 ALTER TABLE `cms_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_module`
--

DROP TABLE IF EXISTS `cms_module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_module` (
  `module_id` int(11) NOT NULL AUTO_INCREMENT,
  `module_name` varchar(100) DEFAULT NULL,
  `module_url` varchar(255) DEFAULT NULL,
  `module_parent_id` int(11) DEFAULT NULL,
  `module_sort` int(11) DEFAULT NULL,
  `module_create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`module_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_module`
--

LOCK TABLES `cms_module` WRITE;
/*!40000 ALTER TABLE `cms_module` DISABLE KEYS */;
INSERT INTO `cms_module` VALUES (1,'content manage','',0,NULL,'2018-01-31 01:40:05'),(2,'article manage','/listArticle.html',1,NULL,'2018-01-31 01:40:42'),(3,'column manage','/listCategory.html',1,NULL,'2018-01-31 01:42:00'),(4,'permission manage',NULL,0,NULL,'2018-01-31 01:42:26'),(5,'admi manage','/listUser.html',4,NULL,'2018-01-31 01:43:11'),(6,'group manage','/listGroup.html',4,NULL,NULL),(7,'site manage','/listSite.html',1,NULL,'2018-02-08 00:52:52');
/*!40000 ALTER TABLE `cms_module` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_permission`
--

DROP TABLE IF EXISTS `cms_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_permission` (
  `permission_id` int(11) NOT NULL AUTO_INCREMENT,
  `permission_name` varchar(255) DEFAULT NULL,
  `permission_desc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`permission_id`)
) ENGINE=InnoDB AUTO_INCREMENT=70 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_permission`
--

LOCK TABLES `cms_permission` WRITE;
/*!40000 ALTER TABLE `cms_permission` DISABLE KEYS */;
INSERT INTO `cms_permission` VALUES (1,'Site(1):Category(1):Permission(WRITE)','对站点first site下的root栏目具有写权限'),(2,'Site(1)','对站点first site具有控制权限'),(12,'Site(1)','对站点first site具有控制权限'),(54,'Site(1):Category(13):Permission(READ)',NULL),(55,'Site(1)','对站点first site具有控制权限'),(59,'Site(1)','对站点first site具有控制权限'),(60,'Site(1):Category(14):Permission(READ)','对站点first site下的life栏目具有读权限'),(61,'Site(1):Category(14):Permission(WRITE)','对站点first site下的life栏目具有写权限'),(62,'Site(1):Module(3):Permission(READ)','对站点first site下的column manage模块具有读权限'),(63,'Site(1):Module(3):Permission(WRITE)','对站点first site下的column manage模块具有写权限'),(64,'Site(1):Category(1):Permission(READ)','对站点first site下的root栏目具有读权限'),(65,'Site(1):Category(1):Permission(WRITE)','对站点first site下的root栏目具有写权限'),(66,'Site(1):Module(5):Permission(READ)','对站点first site下的admin manage模块具有读权限'),(67,'Site(1):Module(5):Permission(WRITE)','对站点first site下的admin manage模块具有写权限'),(68,'Site(1):Module(6):Permission(READ)','对站点first site下的group manage模块具有读权限'),(69,'Site(1):Module(6):Permission(WRITE)','对站点first site下的group manage模块具有写权限');
/*!40000 ALTER TABLE `cms_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_site`
--

DROP TABLE IF EXISTS `cms_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_site` (
  `site_id` int(11) NOT NULL AUTO_INCREMENT,
  `site_name` varchar(100) DEFAULT NULL,
  `site_url` varchar(100) DEFAULT NULL,
  `site_desc` varchar(255) DEFAULT NULL,
  `site_copyright` varchar(100) DEFAULT NULL,
  `site_skin` varchar(255) DEFAULT NULL,
  `site_create_time` datetime DEFAULT NULL,
  `site_status` int(11) DEFAULT NULL,
  `site_pic` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`site_id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_site`
--

LOCK TABLES `cms_site` WRITE;
/*!40000 ALTER TABLE `cms_site` DISABLE KEYS */;
INSERT INTO `cms_site` VALUES (1,'first site','index',NULL,NULL,'default','2018-02-08 01:44:42',NULL,NULL),(9,'2 site',NULL,NULL,NULL,'default','2018-02-08 01:44:44',NULL,NULL),(10,'gvewfv','feqw','feqwefwe',NULL,NULL,'2018-02-08 02:13:52',NULL,NULL);
/*!40000 ALTER TABLE `cms_site` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_skin`
--

DROP TABLE IF EXISTS `cms_skin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_skin` (
  `skin_name` varchar(100) NOT NULL,
  `skin_create_time` datetime DEFAULT NULL,
  `skin_update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`skin_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_skin`
--

LOCK TABLES `cms_skin` WRITE;
/*!40000 ALTER TABLE `cms_skin` DISABLE KEYS */;
/*!40000 ALTER TABLE `cms_skin` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_sys`
--

DROP TABLE IF EXISTS `cms_sys`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_sys` (
  `sys_key` varchar(255) NOT NULL,
  `sys_value` varchar(255) DEFAULT NULL,
  `sys_create_time` datetime DEFAULT NULL,
  `sys_update_time` datetime DEFAULT NULL,
  PRIMARY KEY (`sys_key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_sys`
--

LOCK TABLES `cms_sys` WRITE;
/*!40000 ALTER TABLE `cms_sys` DISABLE KEYS */;
INSERT INTO `cms_sys` VALUES ('pic_path','/home/bigmeng/cms_pic_upload/',NULL,NULL);
/*!40000 ALTER TABLE `cms_sys` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_tag`
--

DROP TABLE IF EXISTS `cms_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_tag` (
  `tag_id` int(11) NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(255) DEFAULT NULL,
  `tag_create_time` datetime DEFAULT NULL,
  PRIMARY KEY (`tag_id`),
  UNIQUE KEY `cms_tag_tag_name_uindex` (`tag_name`)
) ENGINE=InnoDB AUTO_INCREMENT=45 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_tag`
--

LOCK TABLES `cms_tag` WRITE;
/*!40000 ALTER TABLE `cms_tag` DISABLE KEYS */;
INSERT INTO `cms_tag` VALUES (34,'java','2018-02-08 01:42:49'),(35,'test','2018-02-08 01:42:50'),(36,'多线程','2018-02-08 01:51:15'),(37,'编程语言','2018-02-08 01:56:38'),(38,'实战','2018-02-08 02:03:04'),(39,'肖申克的救赎','2018-02-08 02:25:55'),(40,'电影','2018-02-08 02:25:55'),(41,'影评','2018-02-08 02:25:55'),(42,'书籍','2018-02-08 02:38:51'),(43,'笔记','2018-02-08 02:38:51');
/*!40000 ALTER TABLE `cms_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `cms_user`
--

DROP TABLE IF EXISTS `cms_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `cms_user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `user_name` varchar(255) DEFAULT NULL,
  `user_phone` varchar(20) DEFAULT NULL,
  `user_password` varchar(35) DEFAULT NULL,
  `user_email` varchar(20) DEFAULT NULL,
  `user_status` int(11) DEFAULT NULL,
  `user_create_time` datetime DEFAULT NULL,
  `user_last_login` datetime DEFAULT NULL,
  `user_org` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `cms_user`
--

LOCK TABLES `cms_user` WRITE;
/*!40000 ALTER TABLE `cms_user` DISABLE KEYS */;
INSERT INTO `cms_user` VALUES (1,'admi','1531531','root','',NULL,'2018-01-31 05:50:14',NULL,''),(24,'aaa','','000000','',NULL,'2018-02-05 06:53:55',NULL,''),(28,'eeee','41651685185','5616515','156165156',3,'2018-02-07 07:00:18',NULL,'65165156'),(29,'qqq','','333333','',NULL,'2018-02-07 07:01:53',NULL,''),(30,'lll','15616516','165156','1351564',2,'2018-02-07 07:21:38',NULL,'scscdscds');
/*!40000 ALTER TABLE `cms_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `group_permission`
--

DROP TABLE IF EXISTS `group_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `group_permission` (
  `group_id` int(11) DEFAULT NULL,
  `permission_id` int(11) DEFAULT NULL,
  KEY `group_permission_cms_group_group_id_fk` (`group_id`),
  KEY `group_permission_cms_permission_permission_id_fk` (`permission_id`),
  CONSTRAINT `group_permission_cms_group_group_id_fk` FOREIGN KEY (`group_id`) REFERENCES `cms_group` (`group_id`),
  CONSTRAINT `group_permission_cms_permission_permission_id_fk` FOREIGN KEY (`permission_id`) REFERENCES `cms_permission` (`permission_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `group_permission`
--

LOCK TABLES `group_permission` WRITE;
/*!40000 ALTER TABLE `group_permission` DISABLE KEYS */;
INSERT INTO `group_permission` VALUES (8,1),(8,2),(32,54),(38,55),(31,59),(31,60),(31,61),(31,62),(31,63),(38,64),(38,65),(38,66),(38,67),(38,68),(38,69);
/*!40000 ALTER TABLE `group_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tag_article`
--

DROP TABLE IF EXISTS `tag_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tag_article` (
  `tag_id` int(11) DEFAULT NULL,
  `article_id` int(20) DEFAULT NULL,
  KEY `tag_article_cms_article_article_id_fk` (`article_id`),
  KEY `tag_article_cms_tag_tag_id_fk` (`tag_id`),
  CONSTRAINT `tag_article_cms_article_article_id_fk` FOREIGN KEY (`article_id`) REFERENCES `cms_article` (`article_id`),
  CONSTRAINT `tag_article_cms_tag_tag_id_fk` FOREIGN KEY (`tag_id`) REFERENCES `cms_tag` (`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tag_article`
--

LOCK TABLES `tag_article` WRITE;
/*!40000 ALTER TABLE `tag_article` DISABLE KEYS */;
INSERT INTO `tag_article` VALUES (34,163),(35,163),(34,164),(36,164),(34,165),(37,165),(34,166),(38,166),(39,167),(40,167),(41,167),(40,168),(42,169),(43,169),(35,171),(35,172);
/*!40000 ALTER TABLE `tag_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_group`
--

DROP TABLE IF EXISTS `user_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `user_group` (
  `user_id` int(11) DEFAULT NULL,
  `group_id` int(11) DEFAULT NULL,
  KEY `user_group_cms_group_group_id_fk` (`group_id`),
  KEY `user_group_cms_user_user_id_fk` (`user_id`),
  CONSTRAINT `user_group_cms_group_group_id_fk` FOREIGN KEY (`group_id`) REFERENCES `cms_group` (`group_id`),
  CONSTRAINT `user_group_cms_user_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `cms_user` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_group`
--

LOCK TABLES `user_group` WRITE;
/*!40000 ALTER TABLE `user_group` DISABLE KEYS */;
INSERT INTO `user_group` VALUES (1,8),(1,31),(28,38),(28,8);
/*!40000 ALTER TABLE `user_group` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-02-08 12:17:25
